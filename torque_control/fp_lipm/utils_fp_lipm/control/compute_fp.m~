function [ufp_sol,xlip_sol] = compute_fp(p)
    %% Extract Inputs
    import casadi.*
    % parameters
    m = p.m;
    g = p.g;
    z_H = p.z_H;
    
    % state
    x_init = p.x_init;
    Lx_des = p.Lx_des;
    Ly_des = p.Ly_des;
    
    % control
    ufp_stance_max = p.ufp_stance_max; % p.ufp_max;
    ufp_stance_min = p.ufp_stance_min;
    ufp_init = p.ufp_init;
    
    % terrain
    k = p.k;
    mu = p.mu;
    
    % mpc
    n_xlip = p.n_xlip;
    n_ufp = p.n_ufp;
    N_steps_ahead = p.N_steps;
    opti = p.opti;
    p_x_init = p.p_x_init;
    p_Lx_des = p.p_Lx_des;
    p_Ly_des = p.p_Ly_des;
    p_z_H = p.p_z_H;
    p_ufp_stance_max = p.p_ufp_stance_max;
    p_ufp_stance_min = p.p_ufp_stance_min;

    p_k = p.p_k;
    p_mu = p.p_mu;
    p_ufp_init = p.p_ufp_init;
    
    %% Foot Placement
    % params
    opti.set_value(p_x_init,x_init);
    opti.set_value(p_Lx_des,Lx_des);
    opti.set_value(p_Ly_des,Ly_des);
    opti.set_value(p_z_H,z_H);
    opti.set_value(p_ufp_stance_max,ufp_stance_max);
    opti.set_value(p_ufp_stance_min,ufp_stance_min);
    opti.set_value(p_k,k);
    opti.set_value(p_mu,mu);
    opti.set_value(p_ufp_init,ufp_init);
    
    % Solven_ufp
    sol = opti.solve();
    
    % Extract Solution
    N_fp = N_steps_ahead;
    k_step = (t_step_period / dt_opt);
    N_k = uint8((N_steps_ahead * k_step)+1);
    
    optvar = opti.x;
    xlip_sol_temp = opti.value(optvar(1:n_x.*N_k));
    xlip_sol = reshape(xlip_sol_temp,n_xlip,length(xlip_sol_temp)/n_xlip);
    ufp_sol_temp = opti.value(optvar(end-(n_ufp*N_steps_ahead-1):end));
    ufp_sol = reshape(ufp_sol_temp,n_ufp,length(ufp_sol_temp)/n_ufp);
    cost_sol = sol.value(opti.f);
    
%     lg = 0.5;
%     maxstep = [lg; lg; lg];
%     minstep = -maxstep;
%     for i = 1:N_steps_ahead
%         ufp_sol(:,i) = max(min(ufp_sol(:,i),maxstep),minstep);
%     end

end