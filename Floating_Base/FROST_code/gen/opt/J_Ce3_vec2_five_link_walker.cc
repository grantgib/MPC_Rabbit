/*
 * Automatically Generated from Mathematica.
 * Sun 29 Mar 2020 00:50:08 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t5710;
  double t2950;
  double t4817;
  double t6243;
  double t7598;
  double t2948;
  double t7656;
  double t7657;
  double t7658;
  double t9452;
  double t9460;
  double t9838;
  double t9944;
  double t9945;
  double t4865;
  double t6270;
  double t7223;
  double t7367;
  double t8609;
  double t8616;
  double t12152;
  double t11451;
  double t11545;
  double t12195;
  double t12269;
  double t12313;
  double t12321;
  double t12378;
  double t12379;
  double t12387;
  double t12395;
  double t12397;
  double t12082;
  double t12201;
  double t12208;
  double t12223;
  double t12322;
  double t12324;
  double t14924;
  double t15045;
  double t15828;
  double t8642;
  double t8737;
  double t8757;
  double t18402;
  double t18425;
  double t18429;
  double t10197;
  double t10113;
  double t10160;
  double t10172;
  double t10185;
  double t10201;
  double t18663;
  double t18840;
  double t18862;
  double t18869;
  double t12349;
  double t12352;
  double t12372;
  double t19179;
  double t19718;
  double t20252;
  double t12525;
  double t12407;
  double t12433;
  double t12452;
  double t12517;
  double t12529;
  double t20464;
  double t17745;
  double t18275;
  double t18398;
  double t18544;
  double t18547;
  double t18731;
  double t18752;
  double t18556;
  double t18621;
  double t18644;
  double t18662;
  double t18679;
  double t18993;
  double t19175;
  double t19177;
  double t20418;
  double t20424;
  double t20487;
  double t20490;
  double t20438;
  double t20441;
  double t20442;
  double t20462;
  double t20478;
  double t20786;
  double t20788;
  double t20789;
  double t20791;
  double t20793;
  double t20794;
  double t21357;
  double t21358;
  double t21370;
  double t21959;
  double t21968;
  double t22096;
  double t8923;
  double t9975;
  double t9996;
  double t10028;
  double t10725;
  double t10855;
  double t11192;
  double t11285;
  double t22207;
  double t22208;
  double t22209;
  double t22210;
  double t22211;
  double t15906;
  double t16083;
  double t16260;
  double t18485;
  double t18490;
  double t18520;
  double t20510;
  double t20512;
  double t20514;
  double t20516;
  double t20537;
  double t20541;
  double t20557;
  double t20569;
  double t22235;
  double t22236;
  double t20761;
  double t20762;
  double t20773;
  double t20777;
  double t20778;
  double t20785;
  double t20790;
  double t20795;
  double t20797;
  double t20799;
  double t20800;
  double t20801;
  double t22293;
  double t22305;
  double t22306;
  double t22212;
  double t22213;
  double t22220;
  double t22227;
  double t22234;
  double t22244;
  double t22245;
  double t22261;
  double t22262;
  double t22266;
  double t22271;
  double t22273;
  double t22274;
  double t22275;
  double t22276;
  double t22292;
  double t22310;
  double t22314;
  double t22327;
  double t22405;
  double t22406;
  double t22329;
  double t22408;
  double t22409;
  double t22332;
  double t12374;
  double t12400;
  double t12405;
  double t12406;
  double t12536;
  double t12537;
  double t13000;
  double t14545;
  double t22421;
  double t22422;
  double t22423;
  double t22427;
  double t22428;
  double t18915;
  double t18925;
  double t18928;
  double t20278;
  double t20309;
  double t20408;
  double t20573;
  double t20577;
  double t20590;
  double t20593;
  double t20633;
  double t20639;
  double t20646;
  double t20649;
  double t22440;
  double t22441;
  double t20995;
  double t21012;
  double t21066;
  double t21072;
  double t21201;
  double t21284;
  double t21375;
  double t22154;
  double t22155;
  double t22166;
  double t22188;
  double t22194;
  double t22457;
  double t22458;
  double t22459;
  double t22429;
  double t22431;
  double t22435;
  double t22438;
  double t22439;
  double t22442;
  double t22443;
  double t22446;
  double t22447;
  double t22448;
  double t22449;
  double t22450;
  double t22451;
  double t22452;
  double t22453;
  double t22456;
  double t22461;
  double t22462;
  double t22466;
  double t22491;
  double t22492;
  double t22468;
  double t22494;
  double t22495;
  double t22470;
  double t22507;
  double t22508;
  double t22509;
  double t22510;
  double t22511;
  double t22512;
  double t22513;
  double t22514;
  double t22515;
  double t22516;
  double t22517;
  double t22518;
  double t22519;
  double t22520;
  double t22521;
  double t22522;
  double t22523;
  double t22524;
  double t22525;
  double t22526;
  double t22527;
  double t22528;
  double t22529;
  double t22554;
  double t22555;
  double t22556;
  double t22557;
  double t22558;
  double t22559;
  double t22560;
  double t22561;
  double t22532;
  double t22533;
  double t22534;
  double t22535;
  double t22538;
  double t22539;
  double t22540;
  double t22541;
  double t22221;
  double t22222;
  double t22246;
  double t22253;
  double t22284;
  double t22285;
  double t22309;
  double t22322;
  double t22323;
  double t22326;
  double t22328;
  double t22331;
  double t22333;
  double t22335;
  double t22336;
  double t22337;
  double t22338;
  double t22339;
  double t22569;
  double t22597;
  double t22598;
  double t22599;
  double t22570;
  double t22389;
  double t22395;
  double t22396;
  double t22571;
  double t22340;
  double t22379;
  double t22382;
  double t22572;
  double t22575;
  double t22576;
  double t22577;
  double t22578;
  double t22579;
  double t22582;
  double t22583;
  double t22584;
  double t22585;
  double t22586;
  double t22587;
  double t22588;
  double t22591;
  double t22407;
  double t22410;
  double t22411;
  double t22593;
  double t22596;
  double t22602;
  double t22413;
  double t22414;
  double t22415;
  double t22607;
  double t22630;
  double t22631;
  double t22611;
  double t22543;
  double t22544;
  double t22650;
  double t22651;
  double t22652;
  double t22653;
  double t22654;
  double t22664;
  double t22665;
  double t22666;
  double t22667;
  double t22668;
  double t22657;
  double t22658;
  double t22659;
  double t22383;
  double t22397;
  double t22398;
  double t22399;
  double t22401;
  double t22402;
  double t22403;
  double t22404;
  double t22412;
  double t22416;
  double t22417;
  double t22418;
  double t22419;
  double t22420;
  double t22618;
  double t22619;
  double t22620;
  double t22621;
  double t22622;
  double t22623;
  double t22624;
  double t22625;
  double t22626;
  double t22627;
  double t22628;
  double t22629;
  double t22632;
  double t22633;
  double t22634;
  double t22635;
  double t22636;
  double t22637;
  double t22638;
  double t22639;
  double t22640;
  double t22641;
  double t22642;
  double t22643;
  double t22644;
  double t22645;
  double t22646;
  double t22647;
  double t22648;
  double t22649;
  double t22656;
  double t22697;
  double t22706;
  double t22707;
  double t22708;
  double t22699;
  double t22700;
  double t22701;
  double t22673;
  double t22436;
  double t22437;
  double t22444;
  double t22445;
  double t22454;
  double t22455;
  double t22460;
  double t22463;
  double t22464;
  double t22465;
  double t22467;
  double t22469;
  double t22471;
  double t22472;
  double t22473;
  double t22474;
  double t22475;
  double t22476;
  double t22713;
  double t22741;
  double t22742;
  double t22743;
  double t22714;
  double t22481;
  double t22482;
  double t22483;
  double t22715;
  double t22477;
  double t22478;
  double t22479;
  double t22716;
  double t22719;
  double t22720;
  double t22721;
  double t22722;
  double t22723;
  double t22726;
  double t22727;
  double t22728;
  double t22729;
  double t22730;
  double t22731;
  double t22732;
  double t22735;
  double t22493;
  double t22496;
  double t22497;
  double t22737;
  double t22740;
  double t22746;
  double t22499;
  double t22500;
  double t22501;
  double t22751;
  double t22774;
  double t22775;
  double t22755;
  double t22547;
  double t22548;
  double t22794;
  double t22795;
  double t22796;
  double t22797;
  double t22798;
  double t22808;
  double t22809;
  double t22810;
  double t22811;
  double t22812;
  double t22801;
  double t22802;
  double t22803;
  double t22480;
  double t22484;
  double t22485;
  double t22486;
  double t22487;
  double t22488;
  double t22489;
  double t22490;
  double t22498;
  double t22502;
  double t22503;
  double t22504;
  double t22505;
  double t22506;
  double t22762;
  double t22763;
  double t22764;
  double t22765;
  double t22766;
  double t22767;
  double t22768;
  double t22769;
  double t22770;
  double t22771;
  double t22772;
  double t22773;
  double t22776;
  double t22777;
  double t22778;
  double t22779;
  double t22780;
  double t22781;
  double t22782;
  double t22783;
  double t22784;
  double t22785;
  double t22786;
  double t22787;
  double t22788;
  double t22789;
  double t22790;
  double t22791;
  double t22792;
  double t22793;
  double t22800;
  double t22841;
  double t22850;
  double t22851;
  double t22852;
  double t22843;
  double t22844;
  double t22845;
  double t22817;
  t5710 = Cos(var1[3]);
  t2950 = Cos(var1[4]);
  t4817 = Sin(var1[3]);
  t6243 = Sin(var1[4]);
  t7598 = Sin(var1[2]);
  t2948 = Cos(var1[2]);
  t7656 = t5710*t2950;
  t7657 = -1.*t4817*t6243;
  t7658 = t7656 + t7657;
  t9452 = -1.*t2950;
  t9460 = 1. + t9452;
  t9838 = 0.4*t9460;
  t9944 = 0.64*t2950;
  t9945 = t9838 + t9944;
  t4865 = -1.*t2950*t4817;
  t6270 = -1.*t5710*t6243;
  t7223 = t4865 + t6270;
  t7367 = -1.*t2948*t7223;
  t8609 = t7598*t7658;
  t8616 = t7367 + t8609;
  t12152 = Cos(var1[5]);
  t11451 = Cos(var1[6]);
  t11545 = Sin(var1[5]);
  t12195 = Sin(var1[6]);
  t12269 = t12152*t11451;
  t12313 = -1.*t11545*t12195;
  t12321 = t12269 + t12313;
  t12378 = -1.*t11451;
  t12379 = 1. + t12378;
  t12387 = 0.4*t12379;
  t12395 = 0.64*t11451;
  t12397 = t12387 + t12395;
  t12082 = -1.*t11451*t11545;
  t12201 = -1.*t12152*t12195;
  t12208 = t12082 + t12201;
  t12223 = -1.*t2948*t12208;
  t12322 = t7598*t12321;
  t12324 = t12223 + t12322;
  t14924 = -1.*t5710*t7598;
  t15045 = -1.*t2948*t4817;
  t15828 = t14924 + t15045;
  t8642 = t5710*t7598;
  t8737 = t2948*t4817;
  t8757 = t8642 + t8737;
  t18402 = -1.*t2948*t5710;
  t18425 = t7598*t4817;
  t18429 = t18402 + t18425;
  t10197 = -1.*t2948*t7658;
  t10113 = t2950*t4817;
  t10160 = t5710*t6243;
  t10172 = t10113 + t10160;
  t10185 = t7598*t10172;
  t10201 = t10185 + t10197;
  t18663 = -1.*t7598*t7658;
  t18840 = -1.*t12152*t7598;
  t18862 = -1.*t2948*t11545;
  t18869 = t18840 + t18862;
  t12349 = t12152*t7598;
  t12352 = t2948*t11545;
  t12372 = t12349 + t12352;
  t19179 = -1.*t2948*t12152;
  t19718 = t7598*t11545;
  t20252 = t19179 + t19718;
  t12525 = -1.*t2948*t12321;
  t12407 = t11451*t11545;
  t12433 = t12152*t12195;
  t12452 = t12407 + t12433;
  t12517 = t7598*t12452;
  t12529 = t12517 + t12525;
  t20464 = -1.*t7598*t12321;
  t17745 = t2948*t5710;
  t18275 = -1.*t7598*t4817;
  t18398 = t17745 + t18275;
  t18544 = -1.*t7598*t7223;
  t18547 = t18544 + t10197;
  t18731 = t2948*t7223;
  t18752 = t18731 + t18663;
  t18556 = -1.*t7598*t10172;
  t18621 = t2948*t7658;
  t18644 = t18556 + t18621;
  t18662 = -1.*t2948*t10172;
  t18679 = t18662 + t18663;
  t18993 = t2948*t12152;
  t19175 = -1.*t7598*t11545;
  t19177 = t18993 + t19175;
  t20418 = -1.*t7598*t12208;
  t20424 = t20418 + t12525;
  t20487 = t2948*t12208;
  t20490 = t20487 + t20464;
  t20438 = -1.*t7598*t12452;
  t20441 = t2948*t12321;
  t20442 = t20438 + t20441;
  t20462 = -1.*t2948*t12452;
  t20478 = t20462 + t20464;
  t20786 = t9945*t4817;
  t20788 = 0.24*t5710*t6243;
  t20789 = t20786 + t20788;
  t20791 = t5710*t9945;
  t20793 = -0.24*t4817*t6243;
  t20794 = t20791 + t20793;
  t21357 = t12397*t11545;
  t21358 = 0.24*t12152*t12195;
  t21370 = t21357 + t21358;
  t21959 = t12152*t12397;
  t21968 = -0.24*t11545*t12195;
  t22096 = t21959 + t21968;
  t8923 = -0.748*t8757;
  t9975 = t9945*t6243;
  t9996 = -0.24*t2950*t6243;
  t10028 = t9975 + t9996;
  t10725 = t9945*t2950;
  t10855 = Power(t6243,2);
  t11192 = 0.24*t10855;
  t11285 = t10725 + t11192;
  t22207 = -1.*t5710*t2950;
  t22208 = t4817*t6243;
  t22209 = t22207 + t22208;
  t22210 = -1.*t7598*t22209;
  t22211 = t7367 + t22210;
  t15906 = Power(t15828,2);
  t16083 = -13.6*t15906;
  t16260 = -13.6*t15828*t8757;
  t18485 = -13.6*t18398*t18429;
  t18490 = Power(t18429,2);
  t18520 = -13.6*t18490;
  t20510 = -20.4*t15828*t18398;
  t20512 = -6.8*t8757*t18398;
  t20514 = -20.4*t15828*t18429;
  t20516 = -6.8*t8757*t18429;
  t20537 = t7598*t7223;
  t20541 = t20537 + t18621;
  t20557 = t2948*t10172;
  t20569 = t20557 + t8609;
  t22235 = t2948*t22209;
  t22236 = t18544 + t22235;
  t20761 = Power(t5710,2);
  t20762 = 0.11*t20761;
  t20773 = Power(t4817,2);
  t20777 = 0.11*t20773;
  t20778 = t20762 + t20777;
  t20785 = -6.8*t8757*t20778;
  t20790 = -1.*t20789*t7658;
  t20795 = -1.*t7223*t20794;
  t20797 = t20790 + t20795;
  t20799 = t20789*t10172;
  t20800 = t7658*t20794;
  t20801 = t20799 + t20800;
  t22293 = -1.*t9945*t4817;
  t22305 = -0.24*t5710*t6243;
  t22306 = t22293 + t22305;
  t22212 = 0.384*var2[4]*t22211;
  t22213 = -3.2*t10028*t18547;
  t22220 = -3.2*t11285*t22211;
  t22227 = -6.4*t18547*t18644;
  t22234 = -6.4*t18752*t18679;
  t22244 = -6.4*t18547*t22236;
  t22245 = -6.4*t18752*t22211;
  t22261 = -6.4*t18644*t18752;
  t22262 = -3.2*t20541*t18679;
  t22266 = -3.2*t18547*t20569;
  t22271 = -6.4*t18752*t22236;
  t22273 = -3.2*t20541*t22211;
  t22274 = t7598*t22209;
  t22275 = t18731 + t22274;
  t22276 = -3.2*t18547*t22275;
  t22292 = -3.2*t18547*t20797;
  t22310 = t20789*t7658;
  t22314 = t7223*t20794;
  t22327 = -3.2*t20801*t22211;
  t22405 = -0.24*t2950*t4817;
  t22406 = t22405 + t22305;
  t22329 = -1.*t7223*t20789;
  t22408 = 0.24*t5710*t2950;
  t22409 = t22408 + t20793;
  t22332 = -1.*t20794*t22209;
  t12374 = -0.748*t12372;
  t12400 = t12397*t12195;
  t12405 = -0.24*t11451*t12195;
  t12406 = t12400 + t12405;
  t12536 = t12397*t11451;
  t12537 = Power(t12195,2);
  t13000 = 0.24*t12537;
  t14545 = t12536 + t13000;
  t22421 = -1.*t12152*t11451;
  t22422 = t11545*t12195;
  t22423 = t22421 + t22422;
  t22427 = -1.*t7598*t22423;
  t22428 = t12223 + t22427;
  t18915 = Power(t18869,2);
  t18925 = -13.6*t18915;
  t18928 = -13.6*t18869*t12372;
  t20278 = -13.6*t19177*t20252;
  t20309 = Power(t20252,2);
  t20408 = -13.6*t20309;
  t20573 = -20.4*t18869*t19177;
  t20577 = -6.8*t12372*t19177;
  t20590 = -20.4*t18869*t20252;
  t20593 = -6.8*t12372*t20252;
  t20633 = t7598*t12208;
  t20639 = t20633 + t20441;
  t20646 = t2948*t12452;
  t20649 = t20646 + t12322;
  t22440 = t2948*t22423;
  t22441 = t20418 + t22440;
  t20995 = Power(t12152,2);
  t21012 = 0.11*t20995;
  t21066 = Power(t11545,2);
  t21072 = 0.11*t21066;
  t21201 = t21012 + t21072;
  t21284 = -6.8*t12372*t21201;
  t21375 = -1.*t21370*t12321;
  t22154 = -1.*t12208*t22096;
  t22155 = t21375 + t22154;
  t22166 = t21370*t12452;
  t22188 = t12321*t22096;
  t22194 = t22166 + t22188;
  t22457 = -1.*t12397*t11545;
  t22458 = -0.24*t12152*t12195;
  t22459 = t22457 + t22458;
  t22429 = 0.384*var2[6]*t22428;
  t22431 = -3.2*t12406*t20424;
  t22435 = -3.2*t14545*t22428;
  t22438 = -6.4*t20424*t20442;
  t22439 = -6.4*t20490*t20478;
  t22442 = -6.4*t20424*t22441;
  t22443 = -6.4*t20490*t22428;
  t22446 = -6.4*t20442*t20490;
  t22447 = -3.2*t20639*t20478;
  t22448 = -3.2*t20424*t20649;
  t22449 = -6.4*t20490*t22441;
  t22450 = -3.2*t20639*t22428;
  t22451 = t7598*t22423;
  t22452 = t20487 + t22451;
  t22453 = -3.2*t20424*t22452;
  t22456 = -3.2*t20424*t22155;
  t22461 = t21370*t12321;
  t22462 = t12208*t22096;
  t22466 = -3.2*t22194*t22428;
  t22491 = -0.24*t11451*t11545;
  t22492 = t22491 + t22458;
  t22468 = -1.*t12208*t21370;
  t22494 = 0.24*t12152*t11451;
  t22495 = t22494 + t21968;
  t22470 = -1.*t22096*t22423;
  t22507 = -6.8*t15906;
  t22508 = -6.8*t15828*t8757;
  t22509 = Power(t18398,2);
  t22510 = -6.8*t22509;
  t22511 = -6.8*t18398*t18429;
  t22512 = -3.2*t18547*t20541;
  t22513 = Power(t18644,2);
  t22514 = -3.2*t22513;
  t22515 = Power(t18752,2);
  t22516 = -3.2*t22515;
  t22517 = -3.2*t18679*t20569;
  t22518 = -6.8*t18915;
  t22519 = -6.8*t18869*t12372;
  t22520 = Power(t19177,2);
  t22521 = -6.8*t22520;
  t22522 = -6.8*t19177*t20252;
  t22523 = -3.2*t20424*t20639;
  t22524 = Power(t20442,2);
  t22525 = -3.2*t22524;
  t22526 = Power(t20490,2);
  t22527 = -3.2*t22526;
  t22528 = -3.2*t20478*t20649;
  t22529 = t22507 + t22508 + t22510 + t22511 + t22512 + t22514 + t22516 + t22517 + t22518 + t22519 + t22521 + t22522 + t22523 + t22525 + t22527 + t22528;
  t22554 = 2.88*t2948;
  t22555 = -6.8*t18429*t20778;
  t22556 = -3.2*t18679*t20797;
  t22557 = -3.2*t18547*t20801;
  t22558 = -6.8*t20252*t21201;
  t22559 = -3.2*t20478*t22155;
  t22560 = -3.2*t20424*t22194;
  t22561 = t22554 + t22555 + t22556 + t22557 + t22558 + t22559 + t22560;
  t22532 = -0.748*t18429;
  t22533 = -3.2*t11285*t18547;
  t22534 = -3.2*t10028*t18679;
  t22535 = t22532 + t22533 + t22534;
  t22538 = -0.748*t20252;
  t22539 = -3.2*t14545*t20424;
  t22540 = -3.2*t12406*t20478;
  t22541 = t22538 + t22539 + t22540;
  t22221 = t8923 + t22213 + t22220;
  t22222 = -0.5*var2[3]*t22221;
  t22246 = t16083 + t16260 + t18485 + t18520 + t22227 + t22234 + t22244 + t22245;
  t22253 = -0.5*var2[1]*t22246;
  t22284 = t20510 + t20512 + t20514 + t20516 + t22261 + t22262 + t22266 + t22271 + t22273 + t22276;
  t22285 = -0.5*var2[0]*t22284;
  t22309 = t22306*t7658;
  t22322 = t10172*t20794;
  t22323 = t22309 + t22310 + t22314 + t22322;
  t22326 = -3.2*t18547*t22323;
  t22328 = -1.*t7223*t22306;
  t22331 = -1.*t7658*t20794;
  t22333 = t22328 + t22329 + t22331 + t22332;
  t22335 = -3.2*t18679*t22333;
  t22336 = t20785 + t22292 + t22326 + t22327 + t22335;
  t22337 = -0.5*var2[2]*t22336;
  t22338 = t22212 + t22222 + t22253 + t22285 + t22337;
  t22339 = var2[1]*t22338;
  t22569 = t20557 + t22210;
  t22597 = -1.*t5710*t9945;
  t22598 = 0.24*t4817*t6243;
  t22599 = t22597 + t22598;
  t22570 = 0.384*var2[4]*t22569;
  t22389 = Power(t2950,2);
  t22395 = -0.24*t22389;
  t22396 = t10725 + t22395;
  t22571 = -3.2*t10028*t22236;
  t22340 = -1.*t9945*t6243;
  t22379 = 0.24*t2950*t6243;
  t22382 = t22340 + t22379;
  t22572 = -3.2*t11285*t22569;
  t22575 = -6.4*t22515;
  t22576 = -6.4*t18644*t22236;
  t22577 = Power(t22236,2);
  t22578 = -6.4*t22577;
  t22579 = -6.4*t18752*t22569;
  t22582 = -6.4*t20541*t18752;
  t22583 = -3.2*t20569*t22236;
  t22584 = t10185 + t22235;
  t22585 = -3.2*t18752*t22584;
  t22586 = -3.2*t20541*t22569;
  t22587 = -3.2*t18644*t22275;
  t22588 = -6.4*t22236*t22275;
  t22591 = -3.2*t20797*t22236;
  t22407 = t22406*t7658;
  t22410 = t10172*t22409;
  t22411 = t22407 + t22310 + t22314 + t22410;
  t22593 = -3.2*t20801*t22569;
  t22596 = -1.*t10172*t20794;
  t22602 = -1.*t20789*t22209;
  t22413 = -1.*t7223*t22406;
  t22414 = -1.*t7658*t22409;
  t22415 = t22413 + t22329 + t22414 + t22332;
  t22607 = t7223*t20789;
  t22630 = -0.24*t5710*t2950;
  t22631 = t22630 + t22598;
  t22611 = t20794*t22209;
  t22543 = -13.6*t15828*t18398;
  t22544 = -13.6*t15828*t18429;
  t22650 = -3.2*t20541*t18644;
  t22651 = -3.2*t18752*t20569;
  t22652 = -3.2*t20541*t22236;
  t22653 = -3.2*t18752*t22275;
  t22654 = t22507 + t22508 + t22510 + t22511 + t22650 + t22651 + t22652 + t22653;
  t22664 = -3.2*t18752*t20797;
  t22665 = -3.2*t18752*t22323;
  t22666 = -3.2*t20801*t22236;
  t22667 = -3.2*t18644*t22333;
  t22668 = t22555 + t22664 + t22665 + t22666 + t22667;
  t22657 = -3.2*t10028*t18752;
  t22658 = -3.2*t11285*t22236;
  t22659 = t22532 + t22657 + t22658;
  t22383 = -3.2*t22382*t18547;
  t22397 = -3.2*t22396*t18679;
  t22398 = t22213 + t22383 + t22397 + t22220;
  t22399 = -0.5*var2[3]*t22398;
  t22401 = t22227 + t22234 + t22244 + t22245;
  t22402 = -0.5*var2[1]*t22401;
  t22403 = t22261 + t22262 + t22266 + t22271 + t22273 + t22276;
  t22404 = -0.5*var2[0]*t22403;
  t22412 = -3.2*t18547*t22411;
  t22416 = -3.2*t18679*t22415;
  t22417 = t22292 + t22412 + t22327 + t22416;
  t22418 = -0.5*var2[2]*t22417;
  t22419 = t22212 + t22399 + t22402 + t22404 + t22418;
  t22420 = var2[1]*t22419;
  t22618 = -3.2*t22396*t18752;
  t22619 = -3.2*t22382*t22236;
  t22620 = t22618 + t22571 + t22619 + t22572;
  t22621 = -0.5*var2[3]*t22620;
  t22622 = t22575 + t22576 + t22578 + t22579;
  t22623 = -0.5*var2[1]*t22622;
  t22624 = t22582 + t22583 + t22585 + t22586 + t22587 + t22588;
  t22625 = -0.5*var2[0]*t22624;
  t22626 = -3.2*t22323*t22236;
  t22627 = -3.2*t22411*t22236;
  t22628 = -1.*t22406*t7658;
  t22629 = -1.*t7223*t22409;
  t22632 = -1.*t7223*t22631;
  t22633 = -1.*t22306*t22209;
  t22634 = -1.*t22406*t22209;
  t22635 = t22628 + t20795 + t22596 + t22629 + t22632 + t22633 + t22634 + t22602;
  t22636 = -3.2*t18644*t22635;
  t22637 = -3.2*t18752*t22333;
  t22638 = -3.2*t18752*t22415;
  t22639 = t7223*t22306;
  t22640 = t7223*t22406;
  t22641 = t22406*t10172;
  t22642 = t7658*t22409;
  t22643 = t7658*t22631;
  t22644 = t22639 + t22640 + t22607 + t22641 + t20800 + t22642 + t22643 + t22611;
  t22645 = -3.2*t18752*t22644;
  t22646 = t22591 + t22626 + t22627 + t22593 + t22636 + t22637 + t22638 + t22645;
  t22647 = -0.5*var2[2]*t22646;
  t22648 = t22570 + t22621 + t22623 + t22625 + t22647;
  t22649 = var2[1]*t22648;
  t22656 = 0.384*var2[4]*t22236;
  t22697 = t22650 + t22651 + t22652 + t22653;
  t22706 = -3.2*t18752*t22411;
  t22707 = -3.2*t18644*t22415;
  t22708 = t22664 + t22706 + t22666 + t22707;
  t22699 = -3.2*t22396*t18644;
  t22700 = -3.2*t22382*t18752;
  t22701 = t22699 + t22657 + t22700 + t22658;
  t22673 = 0.384*var2[1]*t22236;
  t22436 = t12374 + t22431 + t22435;
  t22437 = -0.5*var2[5]*t22436;
  t22444 = t18925 + t18928 + t20278 + t20408 + t22438 + t22439 + t22442 + t22443;
  t22445 = -0.5*var2[1]*t22444;
  t22454 = t20573 + t20577 + t20590 + t20593 + t22446 + t22447 + t22448 + t22449 + t22450 + t22453;
  t22455 = -0.5*var2[0]*t22454;
  t22460 = t22459*t12321;
  t22463 = t12452*t22096;
  t22464 = t22460 + t22461 + t22462 + t22463;
  t22465 = -3.2*t20424*t22464;
  t22467 = -1.*t12208*t22459;
  t22469 = -1.*t12321*t22096;
  t22471 = t22467 + t22468 + t22469 + t22470;
  t22472 = -3.2*t20478*t22471;
  t22473 = t21284 + t22456 + t22465 + t22466 + t22472;
  t22474 = -0.5*var2[2]*t22473;
  t22475 = t22429 + t22437 + t22445 + t22455 + t22474;
  t22476 = var2[1]*t22475;
  t22713 = t20646 + t22427;
  t22741 = -1.*t12152*t12397;
  t22742 = 0.24*t11545*t12195;
  t22743 = t22741 + t22742;
  t22714 = 0.384*var2[6]*t22713;
  t22481 = Power(t11451,2);
  t22482 = -0.24*t22481;
  t22483 = t12536 + t22482;
  t22715 = -3.2*t12406*t22441;
  t22477 = -1.*t12397*t12195;
  t22478 = 0.24*t11451*t12195;
  t22479 = t22477 + t22478;
  t22716 = -3.2*t14545*t22713;
  t22719 = -6.4*t22526;
  t22720 = -6.4*t20442*t22441;
  t22721 = Power(t22441,2);
  t22722 = -6.4*t22721;
  t22723 = -6.4*t20490*t22713;
  t22726 = -6.4*t20639*t20490;
  t22727 = -3.2*t20649*t22441;
  t22728 = t12517 + t22440;
  t22729 = -3.2*t20490*t22728;
  t22730 = -3.2*t20639*t22713;
  t22731 = -3.2*t20442*t22452;
  t22732 = -6.4*t22441*t22452;
  t22735 = -3.2*t22155*t22441;
  t22493 = t22492*t12321;
  t22496 = t12452*t22495;
  t22497 = t22493 + t22461 + t22462 + t22496;
  t22737 = -3.2*t22194*t22713;
  t22740 = -1.*t12452*t22096;
  t22746 = -1.*t21370*t22423;
  t22499 = -1.*t12208*t22492;
  t22500 = -1.*t12321*t22495;
  t22501 = t22499 + t22468 + t22500 + t22470;
  t22751 = t12208*t21370;
  t22774 = -0.24*t12152*t11451;
  t22775 = t22774 + t22742;
  t22755 = t22096*t22423;
  t22547 = -13.6*t18869*t19177;
  t22548 = -13.6*t18869*t20252;
  t22794 = -3.2*t20639*t20442;
  t22795 = -3.2*t20490*t20649;
  t22796 = -3.2*t20639*t22441;
  t22797 = -3.2*t20490*t22452;
  t22798 = t22518 + t22519 + t22521 + t22522 + t22794 + t22795 + t22796 + t22797;
  t22808 = -3.2*t20490*t22155;
  t22809 = -3.2*t20490*t22464;
  t22810 = -3.2*t22194*t22441;
  t22811 = -3.2*t20442*t22471;
  t22812 = t22558 + t22808 + t22809 + t22810 + t22811;
  t22801 = -3.2*t12406*t20490;
  t22802 = -3.2*t14545*t22441;
  t22803 = t22538 + t22801 + t22802;
  t22480 = -3.2*t22479*t20424;
  t22484 = -3.2*t22483*t20478;
  t22485 = t22431 + t22480 + t22484 + t22435;
  t22486 = -0.5*var2[5]*t22485;
  t22487 = t22438 + t22439 + t22442 + t22443;
  t22488 = -0.5*var2[1]*t22487;
  t22489 = t22446 + t22447 + t22448 + t22449 + t22450 + t22453;
  t22490 = -0.5*var2[0]*t22489;
  t22498 = -3.2*t20424*t22497;
  t22502 = -3.2*t20478*t22501;
  t22503 = t22456 + t22498 + t22466 + t22502;
  t22504 = -0.5*var2[2]*t22503;
  t22505 = t22429 + t22486 + t22488 + t22490 + t22504;
  t22506 = var2[1]*t22505;
  t22762 = -3.2*t22483*t20490;
  t22763 = -3.2*t22479*t22441;
  t22764 = t22762 + t22715 + t22763 + t22716;
  t22765 = -0.5*var2[5]*t22764;
  t22766 = t22719 + t22720 + t22722 + t22723;
  t22767 = -0.5*var2[1]*t22766;
  t22768 = t22726 + t22727 + t22729 + t22730 + t22731 + t22732;
  t22769 = -0.5*var2[0]*t22768;
  t22770 = -3.2*t22464*t22441;
  t22771 = -3.2*t22497*t22441;
  t22772 = -1.*t22492*t12321;
  t22773 = -1.*t12208*t22495;
  t22776 = -1.*t12208*t22775;
  t22777 = -1.*t22459*t22423;
  t22778 = -1.*t22492*t22423;
  t22779 = t22772 + t22154 + t22740 + t22773 + t22776 + t22777 + t22778 + t22746;
  t22780 = -3.2*t20442*t22779;
  t22781 = -3.2*t20490*t22471;
  t22782 = -3.2*t20490*t22501;
  t22783 = t12208*t22459;
  t22784 = t12208*t22492;
  t22785 = t22492*t12452;
  t22786 = t12321*t22495;
  t22787 = t12321*t22775;
  t22788 = t22783 + t22784 + t22751 + t22785 + t22188 + t22786 + t22787 + t22755;
  t22789 = -3.2*t20490*t22788;
  t22790 = t22735 + t22770 + t22771 + t22737 + t22780 + t22781 + t22782 + t22789;
  t22791 = -0.5*var2[2]*t22790;
  t22792 = t22714 + t22765 + t22767 + t22769 + t22791;
  t22793 = var2[1]*t22792;
  t22800 = 0.384*var2[6]*t22441;
  t22841 = t22794 + t22795 + t22796 + t22797;
  t22850 = -3.2*t20490*t22497;
  t22851 = -3.2*t20442*t22501;
  t22852 = t22808 + t22850 + t22810 + t22851;
  t22843 = -3.2*t22483*t20442;
  t22844 = -3.2*t22479*t20490;
  t22845 = t22843 + t22801 + t22844 + t22802;
  t22817 = 0.384*var2[1]*t22441;
  p_output1[0]=var2[1]*(-0.5*(-9.6*t18644*t18679 - 9.6*t18547*t18752 - 9.6*t20442*t20478 - 9.6*t20424*t20490 + t20510 + t20512 + t20514 + t20516 - 3.2*t10201*t20569 + t20573 + t20577 + t20590 + t20593 - 3.2*t12324*t20639 - 3.2*t12529*t20649 - 3.2*t20541*t8616)*var2[0] - 0.5*(t16083 + t16260 + t18485 + t18520 - 6.4*Power(t18547,2) - 6.4*t10201*t18644 - 6.4*Power(t18679,2) + t18925 + t18928 + t20278 + t20408 - 6.4*Power(t20424,2) - 6.4*t12529*t20442 - 6.4*Power(t20478,2) - 6.4*t12324*t20490 - 6.4*t18752*t8616)*var2[1] - 0.5*(t20785 - 3.2*t10201*t20797 + t21284 - 3.2*t12529*t22155 - 3.2*t12324*t22194 - 2.88*t7598 - 3.2*t20801*t8616)*var2[2] - 0.5*(-3.2*t10028*t10201 - 3.2*t11285*t8616 + t8923)*var2[3] + 0.384*t8616*var2[4] - 0.5*(t12374 - 3.2*t12406*t12529 - 3.2*t12324*t14545)*var2[5] + 0.384*t12324*var2[6]);
  p_output1[1]=t22339;
  p_output1[2]=t22420;
  p_output1[3]=t22476;
  p_output1[4]=t22506;
  p_output1[5]=-0.5*t22529*var2[1];
  p_output1[6]=-0.5*t22529*var2[0] - 1.*(-6.4*t18644*t18679 - 6.4*t18547*t18752 - 6.4*t20442*t20478 - 6.4*t20424*t20490 + t22543 + t22544 + t22547 + t22548)*var2[1] - 0.5*t22561*var2[2] - 0.5*t22535*var2[3] + 0.384*t18547*var2[4] - 0.5*t22541*var2[5] + 0.384*t20424*var2[6];
  p_output1[7]=-0.5*t22561*var2[1];
  p_output1[8]=-0.5*t22535*var2[1];
  p_output1[9]=0.384*t18547*var2[1];
  p_output1[10]=-0.5*t22541*var2[1];
  p_output1[11]=0.384*t20424*var2[1];
  p_output1[12]=t22339;
  p_output1[13]=var2[1]*(t22570 - 0.5*(t20510 + t20512 + t20514 + t20516 + t22582 + t22583 + t22585 + t22586 + t22587 + t22588)*var2[0] - 0.5*(t16083 + t16260 + t18485 + t18520 + t22575 + t22576 + t22578 + t22579)*var2[1] - 0.5*(t20785 - 6.4*t22236*t22323 - 6.4*t18752*t22333 + t22591 + t22593 - 3.2*t18644*(-2.*t22209*t22306 + t22596 + t22602 - 2.*t20794*t7223 - 1.*t22599*t7223 - 1.*t22306*t7658) - 3.2*t18752*(t10172*t22306 + t22607 + t22611 + 2.*t22306*t7223 + 2.*t20794*t7658 + t22599*t7658))*var2[2] - 0.5*(t22571 + t22572 + t8923)*var2[3]);
  p_output1[14]=t22649;
  p_output1[15]=-0.5*t22654*var2[1];
  p_output1[16]=t22656 - 0.5*t22654*var2[0] - 1.*(t22261 + t22271 + t22543 + t22544)*var2[1] - 0.5*t22668*var2[2] - 0.5*t22659*var2[3];
  p_output1[17]=-0.5*t22668*var2[1];
  p_output1[18]=-0.5*t22659*var2[1];
  p_output1[19]=t22673;
  p_output1[20]=t22420;
  p_output1[21]=t22649;
  p_output1[22]=var2[1]*(t22570 + t22623 + t22625 - 0.5*(-6.4*t22236*t22411 - 6.4*t18752*t22415 + t22591 + t22593 - 3.2*t18644*(-2.*t22209*t22406 + t22596 + t22602 + t22628 + t22632 - 2.*t22409*t7223) - 3.2*t18752*(t22607 + t22611 + t22641 + t22643 + 2.*t22406*t7223 + 2.*t22409*t7658))*var2[2] - 0.5*(-3.2*t18644*t22382 - 6.4*t22236*t22382 - 6.4*t18752*t22396 + t22571 + t22572 - 3.2*t18752*(0.24*t22389 - 1.*t2950*t9945))*var2[3]);
  p_output1[23]=-0.5*t22697*var2[1];
  p_output1[24]=t22656 - 0.5*t22697*var2[0] - 1.*(t22261 + t22271)*var2[1] - 0.5*t22708*var2[2] - 0.5*t22701*var2[3];
  p_output1[25]=-0.5*t22708*var2[1];
  p_output1[26]=-0.5*t22701*var2[1];
  p_output1[27]=t22673;
  p_output1[28]=t22476;
  p_output1[29]=var2[1]*(t22714 - 0.5*(t20573 + t20577 + t20590 + t20593 + t22726 + t22727 + t22729 + t22730 + t22731 + t22732)*var2[0] - 0.5*(t18925 + t18928 + t20278 + t20408 + t22719 + t22720 + t22722 + t22723)*var2[1] - 0.5*(t21284 - 6.4*t22441*t22464 - 6.4*t20490*t22471 + t22735 + t22737 - 3.2*t20442*(-2.*t12208*t22096 - 1.*t12321*t22459 - 2.*t22423*t22459 + t22740 - 1.*t12208*t22743 + t22746) - 3.2*t20490*(2.*t12321*t22096 + 2.*t12208*t22459 + t12452*t22459 + t12321*t22743 + t22751 + t22755))*var2[2] - 0.5*(t12374 + t22715 + t22716)*var2[5]);
  p_output1[30]=t22793;
  p_output1[31]=-0.5*t22798*var2[1];
  p_output1[32]=t22800 - 0.5*t22798*var2[0] - 1.*(t22446 + t22449 + t22547 + t22548)*var2[1] - 0.5*t22812*var2[2] - 0.5*t22803*var2[5];
  p_output1[33]=-0.5*t22812*var2[1];
  p_output1[34]=-0.5*t22803*var2[1];
  p_output1[35]=t22817;
  p_output1[36]=t22506;
  p_output1[37]=t22793;
  p_output1[38]=var2[1]*(t22714 + t22767 + t22769 - 0.5*(-6.4*t22441*t22497 - 6.4*t20490*t22501 + t22735 + t22737 - 3.2*t20442*(-2.*t22423*t22492 - 2.*t12208*t22495 + t22740 + t22746 + t22772 + t22776) - 3.2*t20490*(2.*t12208*t22492 + 2.*t12321*t22495 + t22751 + t22755 + t22785 + t22787))*var2[2] - 0.5*(-3.2*t20442*t22479 - 6.4*t22441*t22479 - 3.2*t20490*(-1.*t11451*t12397 + 0.24*t22481) - 6.4*t20490*t22483 + t22715 + t22716)*var2[5]);
  p_output1[39]=-0.5*t22841*var2[1];
  p_output1[40]=t22800 - 0.5*t22841*var2[0] - 1.*(t22446 + t22449)*var2[1] - 0.5*t22852*var2[2] - 0.5*t22845*var2[5];
  p_output1[41]=-0.5*t22852*var2[1];
  p_output1[42]=-0.5*t22845*var2[1];
  p_output1[43]=t22817;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 44, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec2_five_link_walker.hh"

namespace RightStance
{

void J_Ce3_vec2_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
