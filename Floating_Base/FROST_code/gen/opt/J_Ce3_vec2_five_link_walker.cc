/*
 * Automatically Generated from Mathematica.
 * Wed 25 Mar 2020 22:52:02 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t2154;
  double t251;
  double t2006;
  double t3571;
  double t4320;
  double t85;
  double t4483;
  double t4515;
  double t4563;
  double t7959;
  double t8044;
  double t8173;
  double t8175;
  double t8517;
  double t2077;
  double t3644;
  double t4118;
  double t4126;
  double t4644;
  double t5373;
  double t8589;
  double t8586;
  double t8587;
  double t8603;
  double t8607;
  double t8608;
  double t8609;
  double t8624;
  double t8625;
  double t8626;
  double t8627;
  double t8638;
  double t8588;
  double t8604;
  double t8605;
  double t8606;
  double t8610;
  double t8611;
  double t8656;
  double t8657;
  double t8658;
  double t6924;
  double t6925;
  double t7386;
  double t8665;
  double t8666;
  double t8667;
  double t8563;
  double t8532;
  double t8550;
  double t8561;
  double t8562;
  double t8564;
  double t8701;
  double t8709;
  double t8710;
  double t8711;
  double t8615;
  double t8616;
  double t8617;
  double t8718;
  double t8719;
  double t8720;
  double t8646;
  double t8642;
  double t8643;
  double t8644;
  double t8645;
  double t8647;
  double t8733;
  double t8662;
  double t8663;
  double t8664;
  double t8675;
  double t8676;
  double t8706;
  double t8707;
  double t8679;
  double t8693;
  double t8694;
  double t8696;
  double t8703;
  double t8715;
  double t8716;
  double t8717;
  double t8724;
  double t8725;
  double t8751;
  double t8752;
  double t8728;
  double t8729;
  double t8730;
  double t8732;
  double t8734;
  double t11647;
  double t11697;
  double t11789;
  double t13345;
  double t13360;
  double t13361;
  double t13488;
  double t13489;
  double t13496;
  double t13500;
  double t13501;
  double t13511;
  double t7387;
  double t8529;
  double t8530;
  double t8531;
  double t8572;
  double t8580;
  double t8581;
  double t8582;
  double t13563;
  double t13564;
  double t13565;
  double t13724;
  double t13729;
  double t8659;
  double t8660;
  double t8661;
  double t8668;
  double t8669;
  double t8670;
  double t9373;
  double t9415;
  double t9417;
  double t9473;
  double t9590;
  double t9605;
  double t9697;
  double t9774;
  double t13772;
  double t13773;
  double t11374;
  double t11392;
  double t11412;
  double t11418;
  double t11435;
  double t11627;
  double t13169;
  double t13362;
  double t13420;
  double t13434;
  double t13435;
  double t13437;
  double t13811;
  double t13812;
  double t13814;
  double t13730;
  double t13735;
  double t13739;
  double t13745;
  double t13763;
  double t13774;
  double t13775;
  double t13778;
  double t13779;
  double t13784;
  double t13785;
  double t13792;
  double t13793;
  double t13800;
  double t13801;
  double t13806;
  double t13816;
  double t13817;
  double t13823;
  double t13897;
  double t13898;
  double t13825;
  double t13900;
  double t13901;
  double t13827;
  double t8618;
  double t8639;
  double t8640;
  double t8641;
  double t8649;
  double t8650;
  double t8651;
  double t8652;
  double t13917;
  double t13921;
  double t13922;
  double t13923;
  double t13924;
  double t8712;
  double t8713;
  double t8714;
  double t8721;
  double t8722;
  double t8723;
  double t9838;
  double t9858;
  double t9889;
  double t9939;
  double t10024;
  double t10027;
  double t10032;
  double t10036;
  double t13950;
  double t13951;
  double t13466;
  double t13476;
  double t13481;
  double t13482;
  double t13484;
  double t13487;
  double t13498;
  double t13513;
  double t13515;
  double t13519;
  double t13520;
  double t13521;
  double t13974;
  double t14011;
  double t14014;
  double t13925;
  double t13930;
  double t13931;
  double t13946;
  double t13947;
  double t13952;
  double t13957;
  double t13961;
  double t13962;
  double t13963;
  double t13965;
  double t13966;
  double t13967;
  double t13969;
  double t13970;
  double t13973;
  double t14021;
  double t14027;
  double t14031;
  double t14060;
  double t14061;
  double t14034;
  double t14067;
  double t14068;
  double t14036;
  double t14080;
  double t14081;
  double t14082;
  double t14083;
  double t14084;
  double t14085;
  double t14086;
  double t14087;
  double t14088;
  double t14089;
  double t14090;
  double t14091;
  double t14092;
  double t14093;
  double t14094;
  double t14095;
  double t14096;
  double t14097;
  double t14098;
  double t14099;
  double t14100;
  double t14101;
  double t14102;
  double t14127;
  double t14128;
  double t14129;
  double t14130;
  double t14131;
  double t14132;
  double t14133;
  double t14134;
  double t14105;
  double t14106;
  double t14107;
  double t14108;
  double t14111;
  double t14112;
  double t14113;
  double t14114;
  double t13743;
  double t13744;
  double t13776;
  double t13777;
  double t13804;
  double t13805;
  double t13815;
  double t13819;
  double t13820;
  double t13821;
  double t13824;
  double t13826;
  double t13828;
  double t13865;
  double t13868;
  double t13869;
  double t13875;
  double t13881;
  double t14142;
  double t14170;
  double t14171;
  double t14172;
  double t14143;
  double t13887;
  double t13888;
  double t13889;
  double t14144;
  double t13882;
  double t13883;
  double t13884;
  double t14145;
  double t14148;
  double t14149;
  double t14150;
  double t14151;
  double t14152;
  double t14155;
  double t14156;
  double t14157;
  double t14158;
  double t14159;
  double t14160;
  double t14161;
  double t14164;
  double t13899;
  double t13902;
  double t13903;
  double t14166;
  double t14169;
  double t14175;
  double t13905;
  double t13906;
  double t13907;
  double t14180;
  double t14203;
  double t14204;
  double t14184;
  double t14116;
  double t14117;
  double t14223;
  double t14224;
  double t14225;
  double t14226;
  double t14227;
  double t14237;
  double t14238;
  double t14239;
  double t14240;
  double t14241;
  double t14230;
  double t14231;
  double t14232;
  double t13885;
  double t13890;
  double t13891;
  double t13892;
  double t13893;
  double t13894;
  double t13895;
  double t13896;
  double t13904;
  double t13908;
  double t13909;
  double t13913;
  double t13914;
  double t13915;
  double t14191;
  double t14192;
  double t14193;
  double t14194;
  double t14195;
  double t14196;
  double t14197;
  double t14198;
  double t14199;
  double t14200;
  double t14201;
  double t14202;
  double t14205;
  double t14206;
  double t14207;
  double t14208;
  double t14209;
  double t14210;
  double t14211;
  double t14212;
  double t14213;
  double t14214;
  double t14215;
  double t14216;
  double t14217;
  double t14218;
  double t14219;
  double t14220;
  double t14221;
  double t14222;
  double t14229;
  double t14270;
  double t14279;
  double t14280;
  double t14281;
  double t14272;
  double t14273;
  double t14274;
  double t14246;
  double t13938;
  double t13939;
  double t13958;
  double t13960;
  double t13971;
  double t13972;
  double t14015;
  double t14028;
  double t14029;
  double t14030;
  double t14033;
  double t14035;
  double t14037;
  double t14038;
  double t14039;
  double t14040;
  double t14041;
  double t14042;
  double t14286;
  double t14314;
  double t14315;
  double t14316;
  double t14287;
  double t14047;
  double t14048;
  double t14049;
  double t14288;
  double t14043;
  double t14044;
  double t14045;
  double t14289;
  double t14292;
  double t14293;
  double t14294;
  double t14295;
  double t14296;
  double t14299;
  double t14300;
  double t14301;
  double t14302;
  double t14303;
  double t14304;
  double t14305;
  double t14308;
  double t14063;
  double t14069;
  double t14070;
  double t14310;
  double t14313;
  double t14319;
  double t14072;
  double t14073;
  double t14074;
  double t14324;
  double t14347;
  double t14348;
  double t14328;
  double t14120;
  double t14121;
  double t14367;
  double t14368;
  double t14369;
  double t14370;
  double t14371;
  double t14381;
  double t14382;
  double t14383;
  double t14384;
  double t14385;
  double t14374;
  double t14375;
  double t14376;
  double t14046;
  double t14050;
  double t14051;
  double t14052;
  double t14053;
  double t14054;
  double t14055;
  double t14059;
  double t14071;
  double t14075;
  double t14076;
  double t14077;
  double t14078;
  double t14079;
  double t14335;
  double t14336;
  double t14337;
  double t14338;
  double t14339;
  double t14340;
  double t14341;
  double t14342;
  double t14343;
  double t14344;
  double t14345;
  double t14346;
  double t14349;
  double t14350;
  double t14351;
  double t14352;
  double t14353;
  double t14354;
  double t14355;
  double t14356;
  double t14357;
  double t14358;
  double t14359;
  double t14360;
  double t14361;
  double t14362;
  double t14363;
  double t14364;
  double t14365;
  double t14366;
  double t14373;
  double t14414;
  double t14423;
  double t14424;
  double t14425;
  double t14416;
  double t14417;
  double t14418;
  double t14390;
  t2154 = Cos(var1[3]);
  t251 = Cos(var1[4]);
  t2006 = Sin(var1[3]);
  t3571 = Sin(var1[4]);
  t4320 = Sin(var1[2]);
  t85 = Cos(var1[2]);
  t4483 = t2154*t251;
  t4515 = -1.*t2006*t3571;
  t4563 = t4483 + t4515;
  t7959 = -1.*t251;
  t8044 = 1. + t7959;
  t8173 = 0.4*t8044;
  t8175 = 0.64*t251;
  t8517 = t8173 + t8175;
  t2077 = -1.*t251*t2006;
  t3644 = -1.*t2154*t3571;
  t4118 = t2077 + t3644;
  t4126 = -1.*t85*t4118;
  t4644 = t4320*t4563;
  t5373 = t4126 + t4644;
  t8589 = Cos(var1[5]);
  t8586 = Cos(var1[6]);
  t8587 = Sin(var1[5]);
  t8603 = Sin(var1[6]);
  t8607 = t8589*t8586;
  t8608 = -1.*t8587*t8603;
  t8609 = t8607 + t8608;
  t8624 = -1.*t8586;
  t8625 = 1. + t8624;
  t8626 = 0.4*t8625;
  t8627 = 0.64*t8586;
  t8638 = t8626 + t8627;
  t8588 = -1.*t8586*t8587;
  t8604 = -1.*t8589*t8603;
  t8605 = t8588 + t8604;
  t8606 = -1.*t85*t8605;
  t8610 = t4320*t8609;
  t8611 = t8606 + t8610;
  t8656 = -1.*t2154*t4320;
  t8657 = -1.*t85*t2006;
  t8658 = t8656 + t8657;
  t6924 = t2154*t4320;
  t6925 = t85*t2006;
  t7386 = t6924 + t6925;
  t8665 = -1.*t85*t2154;
  t8666 = t4320*t2006;
  t8667 = t8665 + t8666;
  t8563 = -1.*t85*t4563;
  t8532 = t251*t2006;
  t8550 = t2154*t3571;
  t8561 = t8532 + t8550;
  t8562 = t4320*t8561;
  t8564 = t8562 + t8563;
  t8701 = -1.*t4320*t4563;
  t8709 = -1.*t8589*t4320;
  t8710 = -1.*t85*t8587;
  t8711 = t8709 + t8710;
  t8615 = t8589*t4320;
  t8616 = t85*t8587;
  t8617 = t8615 + t8616;
  t8718 = -1.*t85*t8589;
  t8719 = t4320*t8587;
  t8720 = t8718 + t8719;
  t8646 = -1.*t85*t8609;
  t8642 = t8586*t8587;
  t8643 = t8589*t8603;
  t8644 = t8642 + t8643;
  t8645 = t4320*t8644;
  t8647 = t8645 + t8646;
  t8733 = -1.*t4320*t8609;
  t8662 = t85*t2154;
  t8663 = -1.*t4320*t2006;
  t8664 = t8662 + t8663;
  t8675 = -1.*t4320*t4118;
  t8676 = t8675 + t8563;
  t8706 = t85*t4118;
  t8707 = t8706 + t8701;
  t8679 = -1.*t4320*t8561;
  t8693 = t85*t4563;
  t8694 = t8679 + t8693;
  t8696 = -1.*t85*t8561;
  t8703 = t8696 + t8701;
  t8715 = t85*t8589;
  t8716 = -1.*t4320*t8587;
  t8717 = t8715 + t8716;
  t8724 = -1.*t4320*t8605;
  t8725 = t8724 + t8646;
  t8751 = t85*t8605;
  t8752 = t8751 + t8733;
  t8728 = -1.*t4320*t8644;
  t8729 = t85*t8609;
  t8730 = t8728 + t8729;
  t8732 = -1.*t85*t8644;
  t8734 = t8732 + t8733;
  t11647 = t8517*t2006;
  t11697 = 0.24*t2154*t3571;
  t11789 = t11647 + t11697;
  t13345 = t2154*t8517;
  t13360 = -0.24*t2006*t3571;
  t13361 = t13345 + t13360;
  t13488 = t8638*t8587;
  t13489 = 0.24*t8589*t8603;
  t13496 = t13488 + t13489;
  t13500 = t8589*t8638;
  t13501 = -0.24*t8587*t8603;
  t13511 = t13500 + t13501;
  t7387 = -0.748*t7386;
  t8529 = t8517*t3571;
  t8530 = -0.24*t251*t3571;
  t8531 = t8529 + t8530;
  t8572 = t8517*t251;
  t8580 = Power(t3571,2);
  t8581 = 0.24*t8580;
  t8582 = t8572 + t8581;
  t13563 = -1.*t2154*t251;
  t13564 = t2006*t3571;
  t13565 = t13563 + t13564;
  t13724 = -1.*t4320*t13565;
  t13729 = t4126 + t13724;
  t8659 = Power(t8658,2);
  t8660 = -13.6*t8659;
  t8661 = -13.6*t8658*t7386;
  t8668 = -13.6*t8664*t8667;
  t8669 = Power(t8667,2);
  t8670 = -13.6*t8669;
  t9373 = -20.4*t8658*t8664;
  t9415 = -6.8*t7386*t8664;
  t9417 = -20.4*t8658*t8667;
  t9473 = -6.8*t7386*t8667;
  t9590 = t4320*t4118;
  t9605 = t9590 + t8693;
  t9697 = t85*t8561;
  t9774 = t9697 + t4644;
  t13772 = t85*t13565;
  t13773 = t8675 + t13772;
  t11374 = Power(t2154,2);
  t11392 = 0.11*t11374;
  t11412 = Power(t2006,2);
  t11418 = 0.11*t11412;
  t11435 = t11392 + t11418;
  t11627 = -6.8*t7386*t11435;
  t13169 = -1.*t11789*t4563;
  t13362 = -1.*t4118*t13361;
  t13420 = t13169 + t13362;
  t13434 = t11789*t8561;
  t13435 = t4563*t13361;
  t13437 = t13434 + t13435;
  t13811 = -1.*t8517*t2006;
  t13812 = -0.24*t2154*t3571;
  t13814 = t13811 + t13812;
  t13730 = 0.384*var2[4]*t13729;
  t13735 = -3.2*t8531*t8676;
  t13739 = -3.2*t8582*t13729;
  t13745 = -6.4*t8676*t8694;
  t13763 = -6.4*t8707*t8703;
  t13774 = -6.4*t8676*t13773;
  t13775 = -6.4*t8707*t13729;
  t13778 = -6.4*t8694*t8707;
  t13779 = -3.2*t9605*t8703;
  t13784 = -3.2*t8676*t9774;
  t13785 = -6.4*t8707*t13773;
  t13792 = -3.2*t9605*t13729;
  t13793 = t4320*t13565;
  t13800 = t8706 + t13793;
  t13801 = -3.2*t8676*t13800;
  t13806 = -3.2*t8676*t13420;
  t13816 = t11789*t4563;
  t13817 = t4118*t13361;
  t13823 = -3.2*t13437*t13729;
  t13897 = -0.24*t251*t2006;
  t13898 = t13897 + t13812;
  t13825 = -1.*t4118*t11789;
  t13900 = 0.24*t2154*t251;
  t13901 = t13900 + t13360;
  t13827 = -1.*t13361*t13565;
  t8618 = -0.748*t8617;
  t8639 = t8638*t8603;
  t8640 = -0.24*t8586*t8603;
  t8641 = t8639 + t8640;
  t8649 = t8638*t8586;
  t8650 = Power(t8603,2);
  t8651 = 0.24*t8650;
  t8652 = t8649 + t8651;
  t13917 = -1.*t8589*t8586;
  t13921 = t8587*t8603;
  t13922 = t13917 + t13921;
  t13923 = -1.*t4320*t13922;
  t13924 = t8606 + t13923;
  t8712 = Power(t8711,2);
  t8713 = -13.6*t8712;
  t8714 = -13.6*t8711*t8617;
  t8721 = -13.6*t8717*t8720;
  t8722 = Power(t8720,2);
  t8723 = -13.6*t8722;
  t9838 = -20.4*t8711*t8717;
  t9858 = -6.8*t8617*t8717;
  t9889 = -20.4*t8711*t8720;
  t9939 = -6.8*t8617*t8720;
  t10024 = t4320*t8605;
  t10027 = t10024 + t8729;
  t10032 = t85*t8644;
  t10036 = t10032 + t8610;
  t13950 = t85*t13922;
  t13951 = t8724 + t13950;
  t13466 = Power(t8589,2);
  t13476 = 0.11*t13466;
  t13481 = Power(t8587,2);
  t13482 = 0.11*t13481;
  t13484 = t13476 + t13482;
  t13487 = -6.8*t8617*t13484;
  t13498 = -1.*t13496*t8609;
  t13513 = -1.*t8605*t13511;
  t13515 = t13498 + t13513;
  t13519 = t13496*t8644;
  t13520 = t8609*t13511;
  t13521 = t13519 + t13520;
  t13974 = -1.*t8638*t8587;
  t14011 = -0.24*t8589*t8603;
  t14014 = t13974 + t14011;
  t13925 = 0.384*var2[6]*t13924;
  t13930 = -3.2*t8641*t8725;
  t13931 = -3.2*t8652*t13924;
  t13946 = -6.4*t8725*t8730;
  t13947 = -6.4*t8752*t8734;
  t13952 = -6.4*t8725*t13951;
  t13957 = -6.4*t8752*t13924;
  t13961 = -6.4*t8730*t8752;
  t13962 = -3.2*t10027*t8734;
  t13963 = -3.2*t8725*t10036;
  t13965 = -6.4*t8752*t13951;
  t13966 = -3.2*t10027*t13924;
  t13967 = t4320*t13922;
  t13969 = t8751 + t13967;
  t13970 = -3.2*t8725*t13969;
  t13973 = -3.2*t8725*t13515;
  t14021 = t13496*t8609;
  t14027 = t8605*t13511;
  t14031 = -3.2*t13521*t13924;
  t14060 = -0.24*t8586*t8587;
  t14061 = t14060 + t14011;
  t14034 = -1.*t8605*t13496;
  t14067 = 0.24*t8589*t8586;
  t14068 = t14067 + t13501;
  t14036 = -1.*t13511*t13922;
  t14080 = -6.8*t8659;
  t14081 = -6.8*t8658*t7386;
  t14082 = Power(t8664,2);
  t14083 = -6.8*t14082;
  t14084 = -6.8*t8664*t8667;
  t14085 = -3.2*t8676*t9605;
  t14086 = Power(t8694,2);
  t14087 = -3.2*t14086;
  t14088 = Power(t8707,2);
  t14089 = -3.2*t14088;
  t14090 = -3.2*t8703*t9774;
  t14091 = -6.8*t8712;
  t14092 = -6.8*t8711*t8617;
  t14093 = Power(t8717,2);
  t14094 = -6.8*t14093;
  t14095 = -6.8*t8717*t8720;
  t14096 = -3.2*t8725*t10027;
  t14097 = Power(t8730,2);
  t14098 = -3.2*t14097;
  t14099 = Power(t8752,2);
  t14100 = -3.2*t14099;
  t14101 = -3.2*t8734*t10036;
  t14102 = t14080 + t14081 + t14083 + t14084 + t14085 + t14087 + t14089 + t14090 + t14091 + t14092 + t14094 + t14095 + t14096 + t14098 + t14100 + t14101;
  t14127 = 2.88*t85;
  t14128 = -6.8*t8667*t11435;
  t14129 = -3.2*t8703*t13420;
  t14130 = -3.2*t8676*t13437;
  t14131 = -6.8*t8720*t13484;
  t14132 = -3.2*t8734*t13515;
  t14133 = -3.2*t8725*t13521;
  t14134 = t14127 + t14128 + t14129 + t14130 + t14131 + t14132 + t14133;
  t14105 = -0.748*t8667;
  t14106 = -3.2*t8582*t8676;
  t14107 = -3.2*t8531*t8703;
  t14108 = t14105 + t14106 + t14107;
  t14111 = -0.748*t8720;
  t14112 = -3.2*t8652*t8725;
  t14113 = -3.2*t8641*t8734;
  t14114 = t14111 + t14112 + t14113;
  t13743 = t7387 + t13735 + t13739;
  t13744 = -0.5*var2[3]*t13743;
  t13776 = t8660 + t8661 + t8668 + t8670 + t13745 + t13763 + t13774 + t13775;
  t13777 = -0.5*var2[1]*t13776;
  t13804 = t9373 + t9415 + t9417 + t9473 + t13778 + t13779 + t13784 + t13785 + t13792 + t13801;
  t13805 = -0.5*var2[0]*t13804;
  t13815 = t13814*t4563;
  t13819 = t8561*t13361;
  t13820 = t13815 + t13816 + t13817 + t13819;
  t13821 = -3.2*t8676*t13820;
  t13824 = -1.*t4118*t13814;
  t13826 = -1.*t4563*t13361;
  t13828 = t13824 + t13825 + t13826 + t13827;
  t13865 = -3.2*t8703*t13828;
  t13868 = t11627 + t13806 + t13821 + t13823 + t13865;
  t13869 = -0.5*var2[2]*t13868;
  t13875 = t13730 + t13744 + t13777 + t13805 + t13869;
  t13881 = var2[1]*t13875;
  t14142 = t9697 + t13724;
  t14170 = -1.*t2154*t8517;
  t14171 = 0.24*t2006*t3571;
  t14172 = t14170 + t14171;
  t14143 = 0.384*var2[4]*t14142;
  t13887 = Power(t251,2);
  t13888 = -0.24*t13887;
  t13889 = t8572 + t13888;
  t14144 = -3.2*t8531*t13773;
  t13882 = -1.*t8517*t3571;
  t13883 = 0.24*t251*t3571;
  t13884 = t13882 + t13883;
  t14145 = -3.2*t8582*t14142;
  t14148 = -6.4*t14088;
  t14149 = -6.4*t8694*t13773;
  t14150 = Power(t13773,2);
  t14151 = -6.4*t14150;
  t14152 = -6.4*t8707*t14142;
  t14155 = -6.4*t9605*t8707;
  t14156 = -3.2*t9774*t13773;
  t14157 = t8562 + t13772;
  t14158 = -3.2*t8707*t14157;
  t14159 = -3.2*t9605*t14142;
  t14160 = -3.2*t8694*t13800;
  t14161 = -6.4*t13773*t13800;
  t14164 = -3.2*t13420*t13773;
  t13899 = t13898*t4563;
  t13902 = t8561*t13901;
  t13903 = t13899 + t13816 + t13817 + t13902;
  t14166 = -3.2*t13437*t14142;
  t14169 = -1.*t8561*t13361;
  t14175 = -1.*t11789*t13565;
  t13905 = -1.*t4118*t13898;
  t13906 = -1.*t4563*t13901;
  t13907 = t13905 + t13825 + t13906 + t13827;
  t14180 = t4118*t11789;
  t14203 = -0.24*t2154*t251;
  t14204 = t14203 + t14171;
  t14184 = t13361*t13565;
  t14116 = -13.6*t8658*t8664;
  t14117 = -13.6*t8658*t8667;
  t14223 = -3.2*t9605*t8694;
  t14224 = -3.2*t8707*t9774;
  t14225 = -3.2*t9605*t13773;
  t14226 = -3.2*t8707*t13800;
  t14227 = t14080 + t14081 + t14083 + t14084 + t14223 + t14224 + t14225 + t14226;
  t14237 = -3.2*t8707*t13420;
  t14238 = -3.2*t8707*t13820;
  t14239 = -3.2*t13437*t13773;
  t14240 = -3.2*t8694*t13828;
  t14241 = t14128 + t14237 + t14238 + t14239 + t14240;
  t14230 = -3.2*t8531*t8707;
  t14231 = -3.2*t8582*t13773;
  t14232 = t14105 + t14230 + t14231;
  t13885 = -3.2*t13884*t8676;
  t13890 = -3.2*t13889*t8703;
  t13891 = t13735 + t13885 + t13890 + t13739;
  t13892 = -0.5*var2[3]*t13891;
  t13893 = t13745 + t13763 + t13774 + t13775;
  t13894 = -0.5*var2[1]*t13893;
  t13895 = t13778 + t13779 + t13784 + t13785 + t13792 + t13801;
  t13896 = -0.5*var2[0]*t13895;
  t13904 = -3.2*t8676*t13903;
  t13908 = -3.2*t8703*t13907;
  t13909 = t13806 + t13904 + t13823 + t13908;
  t13913 = -0.5*var2[2]*t13909;
  t13914 = t13730 + t13892 + t13894 + t13896 + t13913;
  t13915 = var2[1]*t13914;
  t14191 = -3.2*t13889*t8707;
  t14192 = -3.2*t13884*t13773;
  t14193 = t14191 + t14144 + t14192 + t14145;
  t14194 = -0.5*var2[3]*t14193;
  t14195 = t14148 + t14149 + t14151 + t14152;
  t14196 = -0.5*var2[1]*t14195;
  t14197 = t14155 + t14156 + t14158 + t14159 + t14160 + t14161;
  t14198 = -0.5*var2[0]*t14197;
  t14199 = -3.2*t13820*t13773;
  t14200 = -3.2*t13903*t13773;
  t14201 = -1.*t13898*t4563;
  t14202 = -1.*t4118*t13901;
  t14205 = -1.*t4118*t14204;
  t14206 = -1.*t13814*t13565;
  t14207 = -1.*t13898*t13565;
  t14208 = t14201 + t13362 + t14169 + t14202 + t14205 + t14206 + t14207 + t14175;
  t14209 = -3.2*t8694*t14208;
  t14210 = -3.2*t8707*t13828;
  t14211 = -3.2*t8707*t13907;
  t14212 = t4118*t13814;
  t14213 = t4118*t13898;
  t14214 = t13898*t8561;
  t14215 = t4563*t13901;
  t14216 = t4563*t14204;
  t14217 = t14212 + t14213 + t14180 + t14214 + t13435 + t14215 + t14216 + t14184;
  t14218 = -3.2*t8707*t14217;
  t14219 = t14164 + t14199 + t14200 + t14166 + t14209 + t14210 + t14211 + t14218;
  t14220 = -0.5*var2[2]*t14219;
  t14221 = t14143 + t14194 + t14196 + t14198 + t14220;
  t14222 = var2[1]*t14221;
  t14229 = 0.384*var2[4]*t13773;
  t14270 = t14223 + t14224 + t14225 + t14226;
  t14279 = -3.2*t8707*t13903;
  t14280 = -3.2*t8694*t13907;
  t14281 = t14237 + t14279 + t14239 + t14280;
  t14272 = -3.2*t13889*t8694;
  t14273 = -3.2*t13884*t8707;
  t14274 = t14272 + t14230 + t14273 + t14231;
  t14246 = 0.384*var2[1]*t13773;
  t13938 = t8618 + t13930 + t13931;
  t13939 = -0.5*var2[5]*t13938;
  t13958 = t8713 + t8714 + t8721 + t8723 + t13946 + t13947 + t13952 + t13957;
  t13960 = -0.5*var2[1]*t13958;
  t13971 = t9838 + t9858 + t9889 + t9939 + t13961 + t13962 + t13963 + t13965 + t13966 + t13970;
  t13972 = -0.5*var2[0]*t13971;
  t14015 = t14014*t8609;
  t14028 = t8644*t13511;
  t14029 = t14015 + t14021 + t14027 + t14028;
  t14030 = -3.2*t8725*t14029;
  t14033 = -1.*t8605*t14014;
  t14035 = -1.*t8609*t13511;
  t14037 = t14033 + t14034 + t14035 + t14036;
  t14038 = -3.2*t8734*t14037;
  t14039 = t13487 + t13973 + t14030 + t14031 + t14038;
  t14040 = -0.5*var2[2]*t14039;
  t14041 = t13925 + t13939 + t13960 + t13972 + t14040;
  t14042 = var2[1]*t14041;
  t14286 = t10032 + t13923;
  t14314 = -1.*t8589*t8638;
  t14315 = 0.24*t8587*t8603;
  t14316 = t14314 + t14315;
  t14287 = 0.384*var2[6]*t14286;
  t14047 = Power(t8586,2);
  t14048 = -0.24*t14047;
  t14049 = t8649 + t14048;
  t14288 = -3.2*t8641*t13951;
  t14043 = -1.*t8638*t8603;
  t14044 = 0.24*t8586*t8603;
  t14045 = t14043 + t14044;
  t14289 = -3.2*t8652*t14286;
  t14292 = -6.4*t14099;
  t14293 = -6.4*t8730*t13951;
  t14294 = Power(t13951,2);
  t14295 = -6.4*t14294;
  t14296 = -6.4*t8752*t14286;
  t14299 = -6.4*t10027*t8752;
  t14300 = -3.2*t10036*t13951;
  t14301 = t8645 + t13950;
  t14302 = -3.2*t8752*t14301;
  t14303 = -3.2*t10027*t14286;
  t14304 = -3.2*t8730*t13969;
  t14305 = -6.4*t13951*t13969;
  t14308 = -3.2*t13515*t13951;
  t14063 = t14061*t8609;
  t14069 = t8644*t14068;
  t14070 = t14063 + t14021 + t14027 + t14069;
  t14310 = -3.2*t13521*t14286;
  t14313 = -1.*t8644*t13511;
  t14319 = -1.*t13496*t13922;
  t14072 = -1.*t8605*t14061;
  t14073 = -1.*t8609*t14068;
  t14074 = t14072 + t14034 + t14073 + t14036;
  t14324 = t8605*t13496;
  t14347 = -0.24*t8589*t8586;
  t14348 = t14347 + t14315;
  t14328 = t13511*t13922;
  t14120 = -13.6*t8711*t8717;
  t14121 = -13.6*t8711*t8720;
  t14367 = -3.2*t10027*t8730;
  t14368 = -3.2*t8752*t10036;
  t14369 = -3.2*t10027*t13951;
  t14370 = -3.2*t8752*t13969;
  t14371 = t14091 + t14092 + t14094 + t14095 + t14367 + t14368 + t14369 + t14370;
  t14381 = -3.2*t8752*t13515;
  t14382 = -3.2*t8752*t14029;
  t14383 = -3.2*t13521*t13951;
  t14384 = -3.2*t8730*t14037;
  t14385 = t14131 + t14381 + t14382 + t14383 + t14384;
  t14374 = -3.2*t8641*t8752;
  t14375 = -3.2*t8652*t13951;
  t14376 = t14111 + t14374 + t14375;
  t14046 = -3.2*t14045*t8725;
  t14050 = -3.2*t14049*t8734;
  t14051 = t13930 + t14046 + t14050 + t13931;
  t14052 = -0.5*var2[5]*t14051;
  t14053 = t13946 + t13947 + t13952 + t13957;
  t14054 = -0.5*var2[1]*t14053;
  t14055 = t13961 + t13962 + t13963 + t13965 + t13966 + t13970;
  t14059 = -0.5*var2[0]*t14055;
  t14071 = -3.2*t8725*t14070;
  t14075 = -3.2*t8734*t14074;
  t14076 = t13973 + t14071 + t14031 + t14075;
  t14077 = -0.5*var2[2]*t14076;
  t14078 = t13925 + t14052 + t14054 + t14059 + t14077;
  t14079 = var2[1]*t14078;
  t14335 = -3.2*t14049*t8752;
  t14336 = -3.2*t14045*t13951;
  t14337 = t14335 + t14288 + t14336 + t14289;
  t14338 = -0.5*var2[5]*t14337;
  t14339 = t14292 + t14293 + t14295 + t14296;
  t14340 = -0.5*var2[1]*t14339;
  t14341 = t14299 + t14300 + t14302 + t14303 + t14304 + t14305;
  t14342 = -0.5*var2[0]*t14341;
  t14343 = -3.2*t14029*t13951;
  t14344 = -3.2*t14070*t13951;
  t14345 = -1.*t14061*t8609;
  t14346 = -1.*t8605*t14068;
  t14349 = -1.*t8605*t14348;
  t14350 = -1.*t14014*t13922;
  t14351 = -1.*t14061*t13922;
  t14352 = t14345 + t13513 + t14313 + t14346 + t14349 + t14350 + t14351 + t14319;
  t14353 = -3.2*t8730*t14352;
  t14354 = -3.2*t8752*t14037;
  t14355 = -3.2*t8752*t14074;
  t14356 = t8605*t14014;
  t14357 = t8605*t14061;
  t14358 = t14061*t8644;
  t14359 = t8609*t14068;
  t14360 = t8609*t14348;
  t14361 = t14356 + t14357 + t14324 + t14358 + t13520 + t14359 + t14360 + t14328;
  t14362 = -3.2*t8752*t14361;
  t14363 = t14308 + t14343 + t14344 + t14310 + t14353 + t14354 + t14355 + t14362;
  t14364 = -0.5*var2[2]*t14363;
  t14365 = t14287 + t14338 + t14340 + t14342 + t14364;
  t14366 = var2[1]*t14365;
  t14373 = 0.384*var2[6]*t13951;
  t14414 = t14367 + t14368 + t14369 + t14370;
  t14423 = -3.2*t8752*t14070;
  t14424 = -3.2*t8730*t14074;
  t14425 = t14381 + t14423 + t14383 + t14424;
  t14416 = -3.2*t14049*t8730;
  t14417 = -3.2*t14045*t8752;
  t14418 = t14416 + t14374 + t14417 + t14375;
  t14390 = 0.384*var2[1]*t13951;
  p_output1[0]=var2[1]*(-0.5*(-3.2*t10027*t8611 - 3.2*t10036*t8647 - 9.6*t8694*t8703 - 9.6*t8676*t8707 - 9.6*t8730*t8734 - 9.6*t8725*t8752 + t9373 + t9415 + t9417 + t9473 - 3.2*t5373*t9605 - 3.2*t8564*t9774 + t9838 + t9858 + t9889 + t9939)*var2[0] - 0.5*(t8660 + t8661 + t8668 + t8670 - 6.4*Power(t8676,2) - 6.4*t8564*t8694 - 6.4*Power(t8703,2) - 6.4*t5373*t8707 + t8713 + t8714 + t8721 + t8723 - 6.4*Power(t8725,2) - 6.4*t8647*t8730 - 6.4*Power(t8734,2) - 6.4*t8611*t8752)*var2[1] - 0.5*(t11627 + t13487 - 2.88*t4320 - 3.2*t13437*t5373 - 3.2*t13420*t8564 - 3.2*t13521*t8611 - 3.2*t13515*t8647)*var2[2] - 0.5*(t7387 - 3.2*t8531*t8564 - 3.2*t5373*t8582)*var2[3] + 0.384*t5373*var2[4] - 0.5*(t8618 - 3.2*t8641*t8647 - 3.2*t8611*t8652)*var2[5] + 0.384*t8611*var2[6]);
  p_output1[1]=t13881;
  p_output1[2]=t13915;
  p_output1[3]=t14042;
  p_output1[4]=t14079;
  p_output1[5]=-0.5*t14102*var2[1];
  p_output1[6]=-0.5*t14102*var2[0] - 1.*(t14116 + t14117 + t14120 + t14121 - 6.4*t8694*t8703 - 6.4*t8676*t8707 - 6.4*t8730*t8734 - 6.4*t8725*t8752)*var2[1] - 0.5*t14134*var2[2] - 0.5*t14108*var2[3] + 0.384*t8676*var2[4] - 0.5*t14114*var2[5] + 0.384*t8725*var2[6];
  p_output1[7]=-0.5*t14134*var2[1];
  p_output1[8]=-0.5*t14108*var2[1];
  p_output1[9]=0.384*t8676*var2[1];
  p_output1[10]=-0.5*t14114*var2[1];
  p_output1[11]=0.384*t8725*var2[1];
  p_output1[12]=t13881;
  p_output1[13]=var2[1]*(t14143 - 0.5*(t14155 + t14156 + t14158 + t14159 + t14160 + t14161 + t9373 + t9415 + t9417 + t9473)*var2[0] - 0.5*(t14148 + t14149 + t14151 + t14152 + t8660 + t8661 + t8668 + t8670)*var2[1] - 0.5*(t11627 - 6.4*t13773*t13820 + t14164 + t14166 - 3.2*(-2.*t13565*t13814 + t14169 + t14175 - 2.*t13361*t4118 - 1.*t14172*t4118 - 1.*t13814*t4563)*t8694 - 6.4*t13828*t8707 - 3.2*(t14180 + t14184 + 2.*t13814*t4118 + 2.*t13361*t4563 + t14172*t4563 + t13814*t8561)*t8707)*var2[2] - 0.5*(t14144 + t14145 + t7387)*var2[3]);
  p_output1[14]=t14222;
  p_output1[15]=-0.5*t14227*var2[1];
  p_output1[16]=t14229 - 0.5*t14227*var2[0] - 1.*(t13778 + t13785 + t14116 + t14117)*var2[1] - 0.5*t14241*var2[2] - 0.5*t14232*var2[3];
  p_output1[17]=-0.5*t14241*var2[1];
  p_output1[18]=-0.5*t14232*var2[1];
  p_output1[19]=t14246;
  p_output1[20]=t13915;
  p_output1[21]=t14222;
  p_output1[22]=var2[1]*(t14143 + t14196 + t14198 - 0.5*(-6.4*t13773*t13903 + t14164 + t14166 - 3.2*(-2.*t13565*t13898 + t14169 + t14175 + t14201 + t14205 - 2.*t13901*t4118)*t8694 - 6.4*t13907*t8707 - 3.2*(t14180 + t14184 + t14214 + t14216 + 2.*t13898*t4118 + 2.*t13901*t4563)*t8707)*var2[2] - 0.5*(-6.4*t13773*t13884 + t14144 + t14145 - 3.2*t13884*t8694 - 6.4*t13889*t8707 - 3.2*(0.24*t13887 - 1.*t251*t8517)*t8707)*var2[3]);
  p_output1[23]=-0.5*t14270*var2[1];
  p_output1[24]=t14229 - 0.5*t14270*var2[0] - 1.*(t13778 + t13785)*var2[1] - 0.5*t14281*var2[2] - 0.5*t14274*var2[3];
  p_output1[25]=-0.5*t14281*var2[1];
  p_output1[26]=-0.5*t14274*var2[1];
  p_output1[27]=t14246;
  p_output1[28]=t14042;
  p_output1[29]=var2[1]*(t14287 - 0.5*(t14299 + t14300 + t14302 + t14303 + t14304 + t14305 + t9838 + t9858 + t9889 + t9939)*var2[0] - 0.5*(t14292 + t14293 + t14295 + t14296 + t8713 + t8714 + t8721 + t8723)*var2[1] - 0.5*(t13487 - 6.4*t13951*t14029 + t14308 + t14310 - 3.2*(-2.*t13922*t14014 + t14313 + t14319 - 2.*t13511*t8605 - 1.*t14316*t8605 - 1.*t14014*t8609)*t8730 - 6.4*t14037*t8752 - 3.2*(t14324 + t14328 + 2.*t14014*t8605 + 2.*t13511*t8609 + t14316*t8609 + t14014*t8644)*t8752)*var2[2] - 0.5*(t14288 + t14289 + t8618)*var2[5]);
  p_output1[30]=t14366;
  p_output1[31]=-0.5*t14371*var2[1];
  p_output1[32]=t14373 - 0.5*t14371*var2[0] - 1.*(t13961 + t13965 + t14120 + t14121)*var2[1] - 0.5*t14385*var2[2] - 0.5*t14376*var2[5];
  p_output1[33]=-0.5*t14385*var2[1];
  p_output1[34]=-0.5*t14376*var2[1];
  p_output1[35]=t14390;
  p_output1[36]=t14079;
  p_output1[37]=t14366;
  p_output1[38]=var2[1]*(t14287 + t14340 + t14342 - 0.5*(-6.4*t13951*t14070 + t14308 + t14310 - 3.2*(-2.*t13922*t14061 + t14313 + t14319 + t14345 + t14349 - 2.*t14068*t8605)*t8730 - 6.4*t14074*t8752 - 3.2*(t14324 + t14328 + t14358 + t14360 + 2.*t14061*t8605 + 2.*t14068*t8609)*t8752)*var2[2] - 0.5*(-6.4*t13951*t14045 + t14288 + t14289 - 3.2*t14045*t8730 - 6.4*t14049*t8752 - 3.2*(0.24*t14047 - 1.*t8586*t8638)*t8752)*var2[5]);
  p_output1[39]=-0.5*t14414*var2[1];
  p_output1[40]=t14373 - 0.5*t14414*var2[0] - 1.*(t13961 + t13965)*var2[1] - 0.5*t14425*var2[2] - 0.5*t14418*var2[5];
  p_output1[41]=-0.5*t14425*var2[1];
  p_output1[42]=-0.5*t14418*var2[1];
  p_output1[43]=t14390;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 44, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec2_five_link_walker.hh"

namespace RightStance
{

void J_Ce3_vec2_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
