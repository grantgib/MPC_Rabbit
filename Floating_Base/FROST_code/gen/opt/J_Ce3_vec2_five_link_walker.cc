/*
 * Automatically Generated from Mathematica.
 * Tue 17 Mar 2020 21:35:55 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t3867;
  double t2268;
  double t2879;
  double t3904;
  double t4274;
  double t141;
  double t4285;
  double t4486;
  double t4494;
  double t5527;
  double t5572;
  double t5573;
  double t5574;
  double t5635;
  double t3598;
  double t4047;
  double t4059;
  double t4247;
  double t4496;
  double t4505;
  double t5733;
  double t5728;
  double t5730;
  double t5734;
  double t5759;
  double t5776;
  double t5780;
  double t9141;
  double t9182;
  double t9377;
  double t9421;
  double t9424;
  double t5732;
  double t5735;
  double t5736;
  double t5752;
  double t5782;
  double t5783;
  double t10526;
  double t10527;
  double t10536;
  double t4675;
  double t4725;
  double t4770;
  double t10568;
  double t10569;
  double t10570;
  double t5690;
  double t5647;
  double t5652;
  double t5679;
  double t5685;
  double t5691;
  double t12044;
  double t13992;
  double t13993;
  double t14016;
  double t5785;
  double t8399;
  double t8882;
  double t14038;
  double t14039;
  double t14044;
  double t10501;
  double t10195;
  double t10359;
  double t10467;
  double t10490;
  double t10502;
  double t14078;
  double t10560;
  double t10562;
  double t10563;
  double t10579;
  double t10580;
  double t13979;
  double t13984;
  double t11785;
  double t11793;
  double t11882;
  double t11996;
  double t13955;
  double t14035;
  double t14036;
  double t14037;
  double t14062;
  double t14063;
  double t14083;
  double t14085;
  double t14068;
  double t14073;
  double t14074;
  double t14077;
  double t14079;
  double t14171;
  double t14175;
  double t14176;
  double t14179;
  double t14183;
  double t14184;
  double t14220;
  double t14222;
  double t14223;
  double t14225;
  double t14227;
  double t14228;
  double t5477;
  double t5639;
  double t5644;
  double t5645;
  double t5700;
  double t5701;
  double t5702;
  double t5712;
  double t14289;
  double t14290;
  double t14291;
  double t14292;
  double t14293;
  double t10540;
  double t10557;
  double t10558;
  double t10571;
  double t10572;
  double t10576;
  double t14089;
  double t14090;
  double t14127;
  double t14130;
  double t14143;
  double t14144;
  double t14146;
  double t14147;
  double t14302;
  double t14303;
  double t14165;
  double t14166;
  double t14167;
  double t14168;
  double t14169;
  double t14170;
  double t14177;
  double t14185;
  double t14186;
  double t14192;
  double t14193;
  double t14200;
  double t14322;
  double t14323;
  double t14325;
  double t14295;
  double t14296;
  double t14297;
  double t14300;
  double t14301;
  double t14304;
  double t14305;
  double t14308;
  double t14309;
  double t14310;
  double t14311;
  double t14312;
  double t14313;
  double t14314;
  double t14315;
  double t14321;
  double t14330;
  double t14331;
  double t14335;
  double t14360;
  double t14361;
  double t14337;
  double t14363;
  double t14364;
  double t14339;
  double t9030;
  double t9503;
  double t9508;
  double t9794;
  double t10510;
  double t10511;
  double t10512;
  double t10513;
  double t14376;
  double t14377;
  double t14378;
  double t14379;
  double t14380;
  double t14031;
  double t14032;
  double t14034;
  double t14045;
  double t14052;
  double t14053;
  double t14150;
  double t14151;
  double t14152;
  double t14153;
  double t14156;
  double t14157;
  double t14159;
  double t14160;
  double t14388;
  double t14389;
  double t14208;
  double t14209;
  double t14212;
  double t14213;
  double t14214;
  double t14219;
  double t14224;
  double t14229;
  double t14231;
  double t14233;
  double t14234;
  double t14235;
  double t14405;
  double t14406;
  double t14407;
  double t14381;
  double t14382;
  double t14383;
  double t14386;
  double t14387;
  double t14390;
  double t14391;
  double t14394;
  double t14395;
  double t14396;
  double t14397;
  double t14398;
  double t14399;
  double t14400;
  double t14401;
  double t14404;
  double t14409;
  double t14410;
  double t14414;
  double t14439;
  double t14440;
  double t14416;
  double t14442;
  double t14443;
  double t14418;
  double t14455;
  double t14456;
  double t14457;
  double t14458;
  double t14459;
  double t14460;
  double t14461;
  double t14462;
  double t14463;
  double t14464;
  double t14465;
  double t14466;
  double t14467;
  double t14468;
  double t14469;
  double t14470;
  double t14471;
  double t14472;
  double t14473;
  double t14474;
  double t14475;
  double t14476;
  double t14477;
  double t14502;
  double t14503;
  double t14504;
  double t14505;
  double t14506;
  double t14507;
  double t14508;
  double t14509;
  double t14480;
  double t14481;
  double t14482;
  double t14483;
  double t14486;
  double t14487;
  double t14488;
  double t14489;
  double t14298;
  double t14299;
  double t14306;
  double t14307;
  double t14316;
  double t14317;
  double t14329;
  double t14332;
  double t14333;
  double t14334;
  double t14336;
  double t14338;
  double t14340;
  double t14341;
  double t14342;
  double t14343;
  double t14344;
  double t14345;
  double t14517;
  double t14545;
  double t14546;
  double t14547;
  double t14518;
  double t14350;
  double t14351;
  double t14352;
  double t14519;
  double t14346;
  double t14347;
  double t14348;
  double t14520;
  double t14523;
  double t14524;
  double t14525;
  double t14526;
  double t14527;
  double t14530;
  double t14531;
  double t14532;
  double t14533;
  double t14534;
  double t14535;
  double t14536;
  double t14539;
  double t14362;
  double t14365;
  double t14366;
  double t14541;
  double t14544;
  double t14550;
  double t14368;
  double t14369;
  double t14370;
  double t14555;
  double t14578;
  double t14579;
  double t14559;
  double t14491;
  double t14492;
  double t14598;
  double t14599;
  double t14600;
  double t14601;
  double t14602;
  double t14612;
  double t14613;
  double t14614;
  double t14615;
  double t14616;
  double t14605;
  double t14606;
  double t14607;
  double t14349;
  double t14353;
  double t14354;
  double t14355;
  double t14356;
  double t14357;
  double t14358;
  double t14359;
  double t14367;
  double t14371;
  double t14372;
  double t14373;
  double t14374;
  double t14375;
  double t14566;
  double t14567;
  double t14568;
  double t14569;
  double t14570;
  double t14571;
  double t14572;
  double t14573;
  double t14574;
  double t14575;
  double t14576;
  double t14577;
  double t14580;
  double t14581;
  double t14582;
  double t14583;
  double t14584;
  double t14585;
  double t14586;
  double t14587;
  double t14588;
  double t14589;
  double t14590;
  double t14591;
  double t14592;
  double t14593;
  double t14594;
  double t14595;
  double t14596;
  double t14597;
  double t14604;
  double t14645;
  double t14654;
  double t14655;
  double t14656;
  double t14647;
  double t14648;
  double t14649;
  double t14621;
  double t14384;
  double t14385;
  double t14392;
  double t14393;
  double t14402;
  double t14403;
  double t14408;
  double t14411;
  double t14412;
  double t14413;
  double t14415;
  double t14417;
  double t14419;
  double t14420;
  double t14421;
  double t14422;
  double t14423;
  double t14424;
  double t14661;
  double t14689;
  double t14690;
  double t14691;
  double t14662;
  double t14429;
  double t14430;
  double t14431;
  double t14663;
  double t14425;
  double t14426;
  double t14427;
  double t14664;
  double t14667;
  double t14668;
  double t14669;
  double t14670;
  double t14671;
  double t14674;
  double t14675;
  double t14676;
  double t14677;
  double t14678;
  double t14679;
  double t14680;
  double t14683;
  double t14441;
  double t14444;
  double t14445;
  double t14685;
  double t14688;
  double t14694;
  double t14447;
  double t14448;
  double t14449;
  double t14699;
  double t14722;
  double t14723;
  double t14703;
  double t14495;
  double t14496;
  double t14742;
  double t14743;
  double t14744;
  double t14745;
  double t14746;
  double t14756;
  double t14757;
  double t14758;
  double t14759;
  double t14760;
  double t14749;
  double t14750;
  double t14751;
  double t14428;
  double t14432;
  double t14433;
  double t14434;
  double t14435;
  double t14436;
  double t14437;
  double t14438;
  double t14446;
  double t14450;
  double t14451;
  double t14452;
  double t14453;
  double t14454;
  double t14710;
  double t14711;
  double t14712;
  double t14713;
  double t14714;
  double t14715;
  double t14716;
  double t14717;
  double t14718;
  double t14719;
  double t14720;
  double t14721;
  double t14724;
  double t14725;
  double t14726;
  double t14727;
  double t14728;
  double t14729;
  double t14730;
  double t14731;
  double t14732;
  double t14733;
  double t14734;
  double t14735;
  double t14736;
  double t14737;
  double t14738;
  double t14739;
  double t14740;
  double t14741;
  double t14748;
  double t14789;
  double t14798;
  double t14799;
  double t14800;
  double t14791;
  double t14792;
  double t14793;
  double t14765;
  t3867 = Cos(var1[3]);
  t2268 = Cos(var1[4]);
  t2879 = Sin(var1[3]);
  t3904 = Sin(var1[4]);
  t4274 = Sin(var1[2]);
  t141 = Cos(var1[2]);
  t4285 = t3867*t2268;
  t4486 = -1.*t2879*t3904;
  t4494 = t4285 + t4486;
  t5527 = -1.*t2268;
  t5572 = 1. + t5527;
  t5573 = 0.4*t5572;
  t5574 = 0.64*t2268;
  t5635 = t5573 + t5574;
  t3598 = -1.*t2268*t2879;
  t4047 = -1.*t3867*t3904;
  t4059 = t3598 + t4047;
  t4247 = -1.*t141*t4059;
  t4496 = t4274*t4494;
  t4505 = t4247 + t4496;
  t5733 = Cos(var1[5]);
  t5728 = Cos(var1[6]);
  t5730 = Sin(var1[5]);
  t5734 = Sin(var1[6]);
  t5759 = t5733*t5728;
  t5776 = -1.*t5730*t5734;
  t5780 = t5759 + t5776;
  t9141 = -1.*t5728;
  t9182 = 1. + t9141;
  t9377 = 0.4*t9182;
  t9421 = 0.64*t5728;
  t9424 = t9377 + t9421;
  t5732 = -1.*t5728*t5730;
  t5735 = -1.*t5733*t5734;
  t5736 = t5732 + t5735;
  t5752 = -1.*t141*t5736;
  t5782 = t4274*t5780;
  t5783 = t5752 + t5782;
  t10526 = -1.*t3867*t4274;
  t10527 = -1.*t141*t2879;
  t10536 = t10526 + t10527;
  t4675 = t3867*t4274;
  t4725 = t141*t2879;
  t4770 = t4675 + t4725;
  t10568 = -1.*t141*t3867;
  t10569 = t4274*t2879;
  t10570 = t10568 + t10569;
  t5690 = -1.*t141*t4494;
  t5647 = t2268*t2879;
  t5652 = t3867*t3904;
  t5679 = t5647 + t5652;
  t5685 = t4274*t5679;
  t5691 = t5685 + t5690;
  t12044 = -1.*t4274*t4494;
  t13992 = -1.*t5733*t4274;
  t13993 = -1.*t141*t5730;
  t14016 = t13992 + t13993;
  t5785 = t5733*t4274;
  t8399 = t141*t5730;
  t8882 = t5785 + t8399;
  t14038 = -1.*t141*t5733;
  t14039 = t4274*t5730;
  t14044 = t14038 + t14039;
  t10501 = -1.*t141*t5780;
  t10195 = t5728*t5730;
  t10359 = t5733*t5734;
  t10467 = t10195 + t10359;
  t10490 = t4274*t10467;
  t10502 = t10490 + t10501;
  t14078 = -1.*t4274*t5780;
  t10560 = t141*t3867;
  t10562 = -1.*t4274*t2879;
  t10563 = t10560 + t10562;
  t10579 = -1.*t4274*t4059;
  t10580 = t10579 + t5690;
  t13979 = t141*t4059;
  t13984 = t13979 + t12044;
  t11785 = -1.*t4274*t5679;
  t11793 = t141*t4494;
  t11882 = t11785 + t11793;
  t11996 = -1.*t141*t5679;
  t13955 = t11996 + t12044;
  t14035 = t141*t5733;
  t14036 = -1.*t4274*t5730;
  t14037 = t14035 + t14036;
  t14062 = -1.*t4274*t5736;
  t14063 = t14062 + t10501;
  t14083 = t141*t5736;
  t14085 = t14083 + t14078;
  t14068 = -1.*t4274*t10467;
  t14073 = t141*t5780;
  t14074 = t14068 + t14073;
  t14077 = -1.*t141*t10467;
  t14079 = t14077 + t14078;
  t14171 = t5635*t2879;
  t14175 = 0.24*t3867*t3904;
  t14176 = t14171 + t14175;
  t14179 = t3867*t5635;
  t14183 = -0.24*t2879*t3904;
  t14184 = t14179 + t14183;
  t14220 = t9424*t5730;
  t14222 = 0.24*t5733*t5734;
  t14223 = t14220 + t14222;
  t14225 = t5733*t9424;
  t14227 = -0.24*t5730*t5734;
  t14228 = t14225 + t14227;
  t5477 = -0.748*t4770;
  t5639 = t5635*t3904;
  t5644 = -0.24*t2268*t3904;
  t5645 = t5639 + t5644;
  t5700 = t5635*t2268;
  t5701 = Power(t3904,2);
  t5702 = 0.24*t5701;
  t5712 = t5700 + t5702;
  t14289 = -1.*t3867*t2268;
  t14290 = t2879*t3904;
  t14291 = t14289 + t14290;
  t14292 = -1.*t4274*t14291;
  t14293 = t4247 + t14292;
  t10540 = Power(t10536,2);
  t10557 = -13.6*t10540;
  t10558 = -13.6*t10536*t4770;
  t10571 = -13.6*t10563*t10570;
  t10572 = Power(t10570,2);
  t10576 = -13.6*t10572;
  t14089 = -20.4*t10536*t10563;
  t14090 = -6.8*t4770*t10563;
  t14127 = -20.4*t10536*t10570;
  t14130 = -6.8*t4770*t10570;
  t14143 = t4274*t4059;
  t14144 = t14143 + t11793;
  t14146 = t141*t5679;
  t14147 = t14146 + t4496;
  t14302 = t141*t14291;
  t14303 = t10579 + t14302;
  t14165 = Power(t3867,2);
  t14166 = 0.11*t14165;
  t14167 = Power(t2879,2);
  t14168 = 0.11*t14167;
  t14169 = t14166 + t14168;
  t14170 = -6.8*t4770*t14169;
  t14177 = -1.*t14176*t4494;
  t14185 = -1.*t4059*t14184;
  t14186 = t14177 + t14185;
  t14192 = t14176*t5679;
  t14193 = t4494*t14184;
  t14200 = t14192 + t14193;
  t14322 = -1.*t5635*t2879;
  t14323 = -0.24*t3867*t3904;
  t14325 = t14322 + t14323;
  t14295 = 0.384*var2[4]*t14293;
  t14296 = -3.2*t5645*t10580;
  t14297 = -3.2*t5712*t14293;
  t14300 = -6.4*t10580*t11882;
  t14301 = -6.4*t13984*t13955;
  t14304 = -6.4*t10580*t14303;
  t14305 = -6.4*t13984*t14293;
  t14308 = -6.4*t11882*t13984;
  t14309 = -3.2*t14144*t13955;
  t14310 = -3.2*t10580*t14147;
  t14311 = -6.4*t13984*t14303;
  t14312 = -3.2*t14144*t14293;
  t14313 = t4274*t14291;
  t14314 = t13979 + t14313;
  t14315 = -3.2*t10580*t14314;
  t14321 = -3.2*t10580*t14186;
  t14330 = t14176*t4494;
  t14331 = t4059*t14184;
  t14335 = -3.2*t14200*t14293;
  t14360 = -0.24*t2268*t2879;
  t14361 = t14360 + t14323;
  t14337 = -1.*t4059*t14176;
  t14363 = 0.24*t3867*t2268;
  t14364 = t14363 + t14183;
  t14339 = -1.*t14184*t14291;
  t9030 = -0.748*t8882;
  t9503 = t9424*t5734;
  t9508 = -0.24*t5728*t5734;
  t9794 = t9503 + t9508;
  t10510 = t9424*t5728;
  t10511 = Power(t5734,2);
  t10512 = 0.24*t10511;
  t10513 = t10510 + t10512;
  t14376 = -1.*t5733*t5728;
  t14377 = t5730*t5734;
  t14378 = t14376 + t14377;
  t14379 = -1.*t4274*t14378;
  t14380 = t5752 + t14379;
  t14031 = Power(t14016,2);
  t14032 = -13.6*t14031;
  t14034 = -13.6*t14016*t8882;
  t14045 = -13.6*t14037*t14044;
  t14052 = Power(t14044,2);
  t14053 = -13.6*t14052;
  t14150 = -20.4*t14016*t14037;
  t14151 = -6.8*t8882*t14037;
  t14152 = -20.4*t14016*t14044;
  t14153 = -6.8*t8882*t14044;
  t14156 = t4274*t5736;
  t14157 = t14156 + t14073;
  t14159 = t141*t10467;
  t14160 = t14159 + t5782;
  t14388 = t141*t14378;
  t14389 = t14062 + t14388;
  t14208 = Power(t5733,2);
  t14209 = 0.11*t14208;
  t14212 = Power(t5730,2);
  t14213 = 0.11*t14212;
  t14214 = t14209 + t14213;
  t14219 = -6.8*t8882*t14214;
  t14224 = -1.*t14223*t5780;
  t14229 = -1.*t5736*t14228;
  t14231 = t14224 + t14229;
  t14233 = t14223*t10467;
  t14234 = t5780*t14228;
  t14235 = t14233 + t14234;
  t14405 = -1.*t9424*t5730;
  t14406 = -0.24*t5733*t5734;
  t14407 = t14405 + t14406;
  t14381 = 0.384*var2[6]*t14380;
  t14382 = -3.2*t9794*t14063;
  t14383 = -3.2*t10513*t14380;
  t14386 = -6.4*t14063*t14074;
  t14387 = -6.4*t14085*t14079;
  t14390 = -6.4*t14063*t14389;
  t14391 = -6.4*t14085*t14380;
  t14394 = -6.4*t14074*t14085;
  t14395 = -3.2*t14157*t14079;
  t14396 = -3.2*t14063*t14160;
  t14397 = -6.4*t14085*t14389;
  t14398 = -3.2*t14157*t14380;
  t14399 = t4274*t14378;
  t14400 = t14083 + t14399;
  t14401 = -3.2*t14063*t14400;
  t14404 = -3.2*t14063*t14231;
  t14409 = t14223*t5780;
  t14410 = t5736*t14228;
  t14414 = -3.2*t14235*t14380;
  t14439 = -0.24*t5728*t5730;
  t14440 = t14439 + t14406;
  t14416 = -1.*t5736*t14223;
  t14442 = 0.24*t5733*t5728;
  t14443 = t14442 + t14227;
  t14418 = -1.*t14228*t14378;
  t14455 = -6.8*t10540;
  t14456 = -6.8*t10536*t4770;
  t14457 = Power(t10563,2);
  t14458 = -6.8*t14457;
  t14459 = -6.8*t10563*t10570;
  t14460 = -3.2*t10580*t14144;
  t14461 = Power(t11882,2);
  t14462 = -3.2*t14461;
  t14463 = Power(t13984,2);
  t14464 = -3.2*t14463;
  t14465 = -3.2*t13955*t14147;
  t14466 = -6.8*t14031;
  t14467 = -6.8*t14016*t8882;
  t14468 = Power(t14037,2);
  t14469 = -6.8*t14468;
  t14470 = -6.8*t14037*t14044;
  t14471 = -3.2*t14063*t14157;
  t14472 = Power(t14074,2);
  t14473 = -3.2*t14472;
  t14474 = Power(t14085,2);
  t14475 = -3.2*t14474;
  t14476 = -3.2*t14079*t14160;
  t14477 = t14455 + t14456 + t14458 + t14459 + t14460 + t14462 + t14464 + t14465 + t14466 + t14467 + t14469 + t14470 + t14471 + t14473 + t14475 + t14476;
  t14502 = 2.88*t141;
  t14503 = -6.8*t10570*t14169;
  t14504 = -3.2*t13955*t14186;
  t14505 = -3.2*t10580*t14200;
  t14506 = -6.8*t14044*t14214;
  t14507 = -3.2*t14079*t14231;
  t14508 = -3.2*t14063*t14235;
  t14509 = t14502 + t14503 + t14504 + t14505 + t14506 + t14507 + t14508;
  t14480 = -0.748*t10570;
  t14481 = -3.2*t5712*t10580;
  t14482 = -3.2*t5645*t13955;
  t14483 = t14480 + t14481 + t14482;
  t14486 = -0.748*t14044;
  t14487 = -3.2*t10513*t14063;
  t14488 = -3.2*t9794*t14079;
  t14489 = t14486 + t14487 + t14488;
  t14298 = t5477 + t14296 + t14297;
  t14299 = -0.5*var2[3]*t14298;
  t14306 = t10557 + t10558 + t10571 + t10576 + t14300 + t14301 + t14304 + t14305;
  t14307 = -0.5*var2[1]*t14306;
  t14316 = t14089 + t14090 + t14127 + t14130 + t14308 + t14309 + t14310 + t14311 + t14312 + t14315;
  t14317 = -0.5*var2[0]*t14316;
  t14329 = t14325*t4494;
  t14332 = t5679*t14184;
  t14333 = t14329 + t14330 + t14331 + t14332;
  t14334 = -3.2*t10580*t14333;
  t14336 = -1.*t4059*t14325;
  t14338 = -1.*t4494*t14184;
  t14340 = t14336 + t14337 + t14338 + t14339;
  t14341 = -3.2*t13955*t14340;
  t14342 = t14170 + t14321 + t14334 + t14335 + t14341;
  t14343 = -0.5*var2[2]*t14342;
  t14344 = t14295 + t14299 + t14307 + t14317 + t14343;
  t14345 = var2[1]*t14344;
  t14517 = t14146 + t14292;
  t14545 = -1.*t3867*t5635;
  t14546 = 0.24*t2879*t3904;
  t14547 = t14545 + t14546;
  t14518 = 0.384*var2[4]*t14517;
  t14350 = Power(t2268,2);
  t14351 = -0.24*t14350;
  t14352 = t5700 + t14351;
  t14519 = -3.2*t5645*t14303;
  t14346 = -1.*t5635*t3904;
  t14347 = 0.24*t2268*t3904;
  t14348 = t14346 + t14347;
  t14520 = -3.2*t5712*t14517;
  t14523 = -6.4*t14463;
  t14524 = -6.4*t11882*t14303;
  t14525 = Power(t14303,2);
  t14526 = -6.4*t14525;
  t14527 = -6.4*t13984*t14517;
  t14530 = -6.4*t14144*t13984;
  t14531 = -3.2*t14147*t14303;
  t14532 = t5685 + t14302;
  t14533 = -3.2*t13984*t14532;
  t14534 = -3.2*t14144*t14517;
  t14535 = -3.2*t11882*t14314;
  t14536 = -6.4*t14303*t14314;
  t14539 = -3.2*t14186*t14303;
  t14362 = t14361*t4494;
  t14365 = t5679*t14364;
  t14366 = t14362 + t14330 + t14331 + t14365;
  t14541 = -3.2*t14200*t14517;
  t14544 = -1.*t5679*t14184;
  t14550 = -1.*t14176*t14291;
  t14368 = -1.*t4059*t14361;
  t14369 = -1.*t4494*t14364;
  t14370 = t14368 + t14337 + t14369 + t14339;
  t14555 = t4059*t14176;
  t14578 = -0.24*t3867*t2268;
  t14579 = t14578 + t14546;
  t14559 = t14184*t14291;
  t14491 = -13.6*t10536*t10563;
  t14492 = -13.6*t10536*t10570;
  t14598 = -3.2*t14144*t11882;
  t14599 = -3.2*t13984*t14147;
  t14600 = -3.2*t14144*t14303;
  t14601 = -3.2*t13984*t14314;
  t14602 = t14455 + t14456 + t14458 + t14459 + t14598 + t14599 + t14600 + t14601;
  t14612 = -3.2*t13984*t14186;
  t14613 = -3.2*t13984*t14333;
  t14614 = -3.2*t14200*t14303;
  t14615 = -3.2*t11882*t14340;
  t14616 = t14503 + t14612 + t14613 + t14614 + t14615;
  t14605 = -3.2*t5645*t13984;
  t14606 = -3.2*t5712*t14303;
  t14607 = t14480 + t14605 + t14606;
  t14349 = -3.2*t14348*t10580;
  t14353 = -3.2*t14352*t13955;
  t14354 = t14296 + t14349 + t14353 + t14297;
  t14355 = -0.5*var2[3]*t14354;
  t14356 = t14300 + t14301 + t14304 + t14305;
  t14357 = -0.5*var2[1]*t14356;
  t14358 = t14308 + t14309 + t14310 + t14311 + t14312 + t14315;
  t14359 = -0.5*var2[0]*t14358;
  t14367 = -3.2*t10580*t14366;
  t14371 = -3.2*t13955*t14370;
  t14372 = t14321 + t14367 + t14335 + t14371;
  t14373 = -0.5*var2[2]*t14372;
  t14374 = t14295 + t14355 + t14357 + t14359 + t14373;
  t14375 = var2[1]*t14374;
  t14566 = -3.2*t14352*t13984;
  t14567 = -3.2*t14348*t14303;
  t14568 = t14566 + t14519 + t14567 + t14520;
  t14569 = -0.5*var2[3]*t14568;
  t14570 = t14523 + t14524 + t14526 + t14527;
  t14571 = -0.5*var2[1]*t14570;
  t14572 = t14530 + t14531 + t14533 + t14534 + t14535 + t14536;
  t14573 = -0.5*var2[0]*t14572;
  t14574 = -3.2*t14333*t14303;
  t14575 = -3.2*t14366*t14303;
  t14576 = -1.*t14361*t4494;
  t14577 = -1.*t4059*t14364;
  t14580 = -1.*t4059*t14579;
  t14581 = -1.*t14325*t14291;
  t14582 = -1.*t14361*t14291;
  t14583 = t14576 + t14185 + t14544 + t14577 + t14580 + t14581 + t14582 + t14550;
  t14584 = -3.2*t11882*t14583;
  t14585 = -3.2*t13984*t14340;
  t14586 = -3.2*t13984*t14370;
  t14587 = t4059*t14325;
  t14588 = t4059*t14361;
  t14589 = t14361*t5679;
  t14590 = t4494*t14364;
  t14591 = t4494*t14579;
  t14592 = t14587 + t14588 + t14555 + t14589 + t14193 + t14590 + t14591 + t14559;
  t14593 = -3.2*t13984*t14592;
  t14594 = t14539 + t14574 + t14575 + t14541 + t14584 + t14585 + t14586 + t14593;
  t14595 = -0.5*var2[2]*t14594;
  t14596 = t14518 + t14569 + t14571 + t14573 + t14595;
  t14597 = var2[1]*t14596;
  t14604 = 0.384*var2[4]*t14303;
  t14645 = t14598 + t14599 + t14600 + t14601;
  t14654 = -3.2*t13984*t14366;
  t14655 = -3.2*t11882*t14370;
  t14656 = t14612 + t14654 + t14614 + t14655;
  t14647 = -3.2*t14352*t11882;
  t14648 = -3.2*t14348*t13984;
  t14649 = t14647 + t14605 + t14648 + t14606;
  t14621 = 0.384*var2[1]*t14303;
  t14384 = t9030 + t14382 + t14383;
  t14385 = -0.5*var2[5]*t14384;
  t14392 = t14032 + t14034 + t14045 + t14053 + t14386 + t14387 + t14390 + t14391;
  t14393 = -0.5*var2[1]*t14392;
  t14402 = t14150 + t14151 + t14152 + t14153 + t14394 + t14395 + t14396 + t14397 + t14398 + t14401;
  t14403 = -0.5*var2[0]*t14402;
  t14408 = t14407*t5780;
  t14411 = t10467*t14228;
  t14412 = t14408 + t14409 + t14410 + t14411;
  t14413 = -3.2*t14063*t14412;
  t14415 = -1.*t5736*t14407;
  t14417 = -1.*t5780*t14228;
  t14419 = t14415 + t14416 + t14417 + t14418;
  t14420 = -3.2*t14079*t14419;
  t14421 = t14219 + t14404 + t14413 + t14414 + t14420;
  t14422 = -0.5*var2[2]*t14421;
  t14423 = t14381 + t14385 + t14393 + t14403 + t14422;
  t14424 = var2[1]*t14423;
  t14661 = t14159 + t14379;
  t14689 = -1.*t5733*t9424;
  t14690 = 0.24*t5730*t5734;
  t14691 = t14689 + t14690;
  t14662 = 0.384*var2[6]*t14661;
  t14429 = Power(t5728,2);
  t14430 = -0.24*t14429;
  t14431 = t10510 + t14430;
  t14663 = -3.2*t9794*t14389;
  t14425 = -1.*t9424*t5734;
  t14426 = 0.24*t5728*t5734;
  t14427 = t14425 + t14426;
  t14664 = -3.2*t10513*t14661;
  t14667 = -6.4*t14474;
  t14668 = -6.4*t14074*t14389;
  t14669 = Power(t14389,2);
  t14670 = -6.4*t14669;
  t14671 = -6.4*t14085*t14661;
  t14674 = -6.4*t14157*t14085;
  t14675 = -3.2*t14160*t14389;
  t14676 = t10490 + t14388;
  t14677 = -3.2*t14085*t14676;
  t14678 = -3.2*t14157*t14661;
  t14679 = -3.2*t14074*t14400;
  t14680 = -6.4*t14389*t14400;
  t14683 = -3.2*t14231*t14389;
  t14441 = t14440*t5780;
  t14444 = t10467*t14443;
  t14445 = t14441 + t14409 + t14410 + t14444;
  t14685 = -3.2*t14235*t14661;
  t14688 = -1.*t10467*t14228;
  t14694 = -1.*t14223*t14378;
  t14447 = -1.*t5736*t14440;
  t14448 = -1.*t5780*t14443;
  t14449 = t14447 + t14416 + t14448 + t14418;
  t14699 = t5736*t14223;
  t14722 = -0.24*t5733*t5728;
  t14723 = t14722 + t14690;
  t14703 = t14228*t14378;
  t14495 = -13.6*t14016*t14037;
  t14496 = -13.6*t14016*t14044;
  t14742 = -3.2*t14157*t14074;
  t14743 = -3.2*t14085*t14160;
  t14744 = -3.2*t14157*t14389;
  t14745 = -3.2*t14085*t14400;
  t14746 = t14466 + t14467 + t14469 + t14470 + t14742 + t14743 + t14744 + t14745;
  t14756 = -3.2*t14085*t14231;
  t14757 = -3.2*t14085*t14412;
  t14758 = -3.2*t14235*t14389;
  t14759 = -3.2*t14074*t14419;
  t14760 = t14506 + t14756 + t14757 + t14758 + t14759;
  t14749 = -3.2*t9794*t14085;
  t14750 = -3.2*t10513*t14389;
  t14751 = t14486 + t14749 + t14750;
  t14428 = -3.2*t14427*t14063;
  t14432 = -3.2*t14431*t14079;
  t14433 = t14382 + t14428 + t14432 + t14383;
  t14434 = -0.5*var2[5]*t14433;
  t14435 = t14386 + t14387 + t14390 + t14391;
  t14436 = -0.5*var2[1]*t14435;
  t14437 = t14394 + t14395 + t14396 + t14397 + t14398 + t14401;
  t14438 = -0.5*var2[0]*t14437;
  t14446 = -3.2*t14063*t14445;
  t14450 = -3.2*t14079*t14449;
  t14451 = t14404 + t14446 + t14414 + t14450;
  t14452 = -0.5*var2[2]*t14451;
  t14453 = t14381 + t14434 + t14436 + t14438 + t14452;
  t14454 = var2[1]*t14453;
  t14710 = -3.2*t14431*t14085;
  t14711 = -3.2*t14427*t14389;
  t14712 = t14710 + t14663 + t14711 + t14664;
  t14713 = -0.5*var2[5]*t14712;
  t14714 = t14667 + t14668 + t14670 + t14671;
  t14715 = -0.5*var2[1]*t14714;
  t14716 = t14674 + t14675 + t14677 + t14678 + t14679 + t14680;
  t14717 = -0.5*var2[0]*t14716;
  t14718 = -3.2*t14412*t14389;
  t14719 = -3.2*t14445*t14389;
  t14720 = -1.*t14440*t5780;
  t14721 = -1.*t5736*t14443;
  t14724 = -1.*t5736*t14723;
  t14725 = -1.*t14407*t14378;
  t14726 = -1.*t14440*t14378;
  t14727 = t14720 + t14229 + t14688 + t14721 + t14724 + t14725 + t14726 + t14694;
  t14728 = -3.2*t14074*t14727;
  t14729 = -3.2*t14085*t14419;
  t14730 = -3.2*t14085*t14449;
  t14731 = t5736*t14407;
  t14732 = t5736*t14440;
  t14733 = t14440*t10467;
  t14734 = t5780*t14443;
  t14735 = t5780*t14723;
  t14736 = t14731 + t14732 + t14699 + t14733 + t14234 + t14734 + t14735 + t14703;
  t14737 = -3.2*t14085*t14736;
  t14738 = t14683 + t14718 + t14719 + t14685 + t14728 + t14729 + t14730 + t14737;
  t14739 = -0.5*var2[2]*t14738;
  t14740 = t14662 + t14713 + t14715 + t14717 + t14739;
  t14741 = var2[1]*t14740;
  t14748 = 0.384*var2[6]*t14389;
  t14789 = t14742 + t14743 + t14744 + t14745;
  t14798 = -3.2*t14085*t14445;
  t14799 = -3.2*t14074*t14449;
  t14800 = t14756 + t14798 + t14758 + t14799;
  t14791 = -3.2*t14431*t14074;
  t14792 = -3.2*t14427*t14085;
  t14793 = t14791 + t14749 + t14792 + t14750;
  t14765 = 0.384*var2[1]*t14389;
  p_output1[0]=var2[1]*(-0.5*(-9.6*t11882*t13955 - 9.6*t10580*t13984 - 9.6*t14074*t14079 - 9.6*t14063*t14085 + t14089 + t14090 + t14127 + t14130 + t14150 + t14151 + t14152 + t14153 - 3.2*t10502*t14160 - 3.2*t14144*t4505 - 3.2*t14147*t5691 - 3.2*t14157*t5783)*var2[0] - 0.5*(t10557 + t10558 + t10571 + t10576 - 6.4*Power(t10580,2) - 6.4*Power(t13955,2) + t14032 + t14034 + t14045 + t14053 - 6.4*Power(t14063,2) - 6.4*t10502*t14074 - 6.4*Power(t14079,2) - 6.4*t13984*t4505 - 6.4*t11882*t5691 - 6.4*t14085*t5783)*var2[1] - 0.5*(t14170 + t14219 - 3.2*t10502*t14231 - 2.88*t4274 - 3.2*t14200*t4505 - 3.2*t14186*t5691 - 3.2*t14235*t5783)*var2[2] - 0.5*(t5477 - 3.2*t5645*t5691 - 3.2*t4505*t5712)*var2[3] + 0.384*t4505*var2[4] - 0.5*(-3.2*t10513*t5783 + t9030 - 3.2*t10502*t9794)*var2[5] + 0.384*t5783*var2[6]);
  p_output1[1]=t14345;
  p_output1[2]=t14375;
  p_output1[3]=t14424;
  p_output1[4]=t14454;
  p_output1[5]=-0.5*t14477*var2[1];
  p_output1[6]=-0.5*t14477*var2[0] - 1.*(-6.4*t11882*t13955 - 6.4*t10580*t13984 - 6.4*t14074*t14079 - 6.4*t14063*t14085 + t14491 + t14492 + t14495 + t14496)*var2[1] - 0.5*t14509*var2[2] - 0.5*t14483*var2[3] + 0.384*t10580*var2[4] - 0.5*t14489*var2[5] + 0.384*t14063*var2[6];
  p_output1[7]=-0.5*t14509*var2[1];
  p_output1[8]=-0.5*t14483*var2[1];
  p_output1[9]=0.384*t10580*var2[1];
  p_output1[10]=-0.5*t14489*var2[1];
  p_output1[11]=0.384*t14063*var2[1];
  p_output1[12]=t14345;
  p_output1[13]=var2[1]*(t14518 - 0.5*(t14089 + t14090 + t14127 + t14130 + t14530 + t14531 + t14533 + t14534 + t14535 + t14536)*var2[0] - 0.5*(t10557 + t10558 + t10571 + t10576 + t14523 + t14524 + t14526 + t14527)*var2[1] - 0.5*(t14170 - 6.4*t14303*t14333 - 6.4*t13984*t14340 + t14539 + t14541 - 3.2*t11882*(-2.*t14291*t14325 + t14544 + t14550 - 2.*t14184*t4059 - 1.*t14547*t4059 - 1.*t14325*t4494) - 3.2*t13984*(t14555 + t14559 + 2.*t14325*t4059 + 2.*t14184*t4494 + t14547*t4494 + t14325*t5679))*var2[2] - 0.5*(t14519 + t14520 + t5477)*var2[3]);
  p_output1[14]=t14597;
  p_output1[15]=-0.5*t14602*var2[1];
  p_output1[16]=t14604 - 0.5*t14602*var2[0] - 1.*(t14308 + t14311 + t14491 + t14492)*var2[1] - 0.5*t14616*var2[2] - 0.5*t14607*var2[3];
  p_output1[17]=-0.5*t14616*var2[1];
  p_output1[18]=-0.5*t14607*var2[1];
  p_output1[19]=t14621;
  p_output1[20]=t14375;
  p_output1[21]=t14597;
  p_output1[22]=var2[1]*(t14518 + t14571 + t14573 - 0.5*(-6.4*t14303*t14366 - 6.4*t13984*t14370 + t14539 + t14541 - 3.2*t11882*(-2.*t14291*t14361 + t14544 + t14550 + t14576 + t14580 - 2.*t14364*t4059) - 3.2*t13984*(t14555 + t14559 + t14589 + t14591 + 2.*t14361*t4059 + 2.*t14364*t4494))*var2[2] - 0.5*(-3.2*t11882*t14348 - 6.4*t14303*t14348 - 6.4*t13984*t14352 + t14519 + t14520 - 3.2*t13984*(0.24*t14350 - 1.*t2268*t5635))*var2[3]);
  p_output1[23]=-0.5*t14645*var2[1];
  p_output1[24]=t14604 - 0.5*t14645*var2[0] - 1.*(t14308 + t14311)*var2[1] - 0.5*t14656*var2[2] - 0.5*t14649*var2[3];
  p_output1[25]=-0.5*t14656*var2[1];
  p_output1[26]=-0.5*t14649*var2[1];
  p_output1[27]=t14621;
  p_output1[28]=t14424;
  p_output1[29]=var2[1]*(t14662 - 0.5*(t14150 + t14151 + t14152 + t14153 + t14674 + t14675 + t14677 + t14678 + t14679 + t14680)*var2[0] - 0.5*(t14032 + t14034 + t14045 + t14053 + t14667 + t14668 + t14670 + t14671)*var2[1] - 0.5*(t14219 - 6.4*t14389*t14412 - 6.4*t14085*t14419 + t14683 + t14685 - 3.2*t14074*(-2.*t14378*t14407 + t14688 + t14694 - 2.*t14228*t5736 - 1.*t14691*t5736 - 1.*t14407*t5780) - 3.2*t14085*(t10467*t14407 + t14699 + t14703 + 2.*t14407*t5736 + 2.*t14228*t5780 + t14691*t5780))*var2[2] - 0.5*(t14663 + t14664 + t9030)*var2[5]);
  p_output1[30]=t14741;
  p_output1[31]=-0.5*t14746*var2[1];
  p_output1[32]=t14748 - 0.5*t14746*var2[0] - 1.*(t14394 + t14397 + t14495 + t14496)*var2[1] - 0.5*t14760*var2[2] - 0.5*t14751*var2[5];
  p_output1[33]=-0.5*t14760*var2[1];
  p_output1[34]=-0.5*t14751*var2[1];
  p_output1[35]=t14765;
  p_output1[36]=t14454;
  p_output1[37]=t14741;
  p_output1[38]=var2[1]*(t14662 + t14715 + t14717 - 0.5*(-6.4*t14389*t14445 - 6.4*t14085*t14449 + t14683 + t14685 - 3.2*t14074*(-2.*t14378*t14440 + t14688 + t14694 + t14720 + t14724 - 2.*t14443*t5736) - 3.2*t14085*(t14699 + t14703 + t14733 + t14735 + 2.*t14440*t5736 + 2.*t14443*t5780))*var2[2] - 0.5*(-3.2*t14074*t14427 - 6.4*t14389*t14427 - 6.4*t14085*t14431 + t14663 + t14664 - 3.2*t14085*(0.24*t14429 - 1.*t5728*t9424))*var2[5]);
  p_output1[39]=-0.5*t14789*var2[1];
  p_output1[40]=t14748 - 0.5*t14789*var2[0] - 1.*(t14394 + t14397)*var2[1] - 0.5*t14800*var2[2] - 0.5*t14793*var2[5];
  p_output1[41]=-0.5*t14800*var2[1];
  p_output1[42]=-0.5*t14793*var2[1];
  p_output1[43]=t14765;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 44, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec2_five_link_walker.hh"

namespace RightStance
{

void J_Ce3_vec2_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
