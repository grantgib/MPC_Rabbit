/*
 * Automatically Generated from Mathematica.
 * Sun 29 Mar 2020 00:48:38 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t1521;
  double t194;
  double t285;
  double t1522;
  double t1538;
  double t166;
  double t1571;
  double t1572;
  double t1573;
  double t1581;
  double t1582;
  double t1583;
  double t1574;
  double t1476;
  double t1523;
  double t1524;
  double t1591;
  double t1585;
  double t1592;
  double t1604;
  double t1594;
  double t1600;
  double t1611;
  double t1612;
  double t1613;
  double t1605;
  double t1606;
  double t1631;
  double t1632;
  double t1633;
  double t1627;
  double t1629;
  double t1630;
  double t1639;
  double t1640;
  double t1641;
  double t1643;
  double t1644;
  double t1645;
  double t1525;
  double t1580;
  double t1593;
  double t1601;
  double t1602;
  double t1603;
  double t1607;
  double t1608;
  double t1609;
  double t1610;
  double t1614;
  double t1615;
  double t1616;
  double t1617;
  double t1618;
  double t1619;
  double t1621;
  double t1622;
  double t1623;
  double t1624;
  double t1634;
  double t1642;
  double t1646;
  double t1647;
  double t1657;
  double t1659;
  double t1663;
  double t1664;
  double t1665;
  double t1658;
  double t1661;
  double t1662;
  double t1667;
  double t1668;
  double t1669;
  double t1671;
  double t1672;
  double t1673;
  double t1676;
  double t1678;
  double t1677;
  double t1679;
  double t1680;
  double t1682;
  double t1683;
  double t1684;
  double t1691;
  double t1692;
  double t1693;
  double t1688;
  double t1695;
  double t1685;
  double t1714;
  double t1694;
  double t1696;
  double t1687;
  double t1689;
  double t1704;
  double t1712;
  double t1701;
  double t1702;
  double t1681;
  double t1686;
  double t1723;
  double t1724;
  double t1713;
  double t2288;
  double t2295;
  double t2296;
  double t1666;
  double t1670;
  double t1674;
  double t1675;
  double t2271;
  double t2272;
  double t2273;
  double t2310;
  double t2325;
  double t2341;
  double t2351;
  double t2353;
  double t2354;
  double t2384;
  double t2385;
  double t2386;
  double t1648;
  double t1654;
  double t2415;
  double t2425;
  double t2426;
  double t2427;
  double t2428;
  double t2429;
  double t2431;
  double t2442;
  double t1625;
  double t2443;
  double t2444;
  double t2407;
  double t1717;
  double t2476;
  double t2477;
  double t2492;
  double t2493;
  double t2494;
  double t2498;
  double t2499;
  double t2500;
  double t2400;
  double t2502;
  double t2505;
  double t2536;
  double t2595;
  double t2619;
  double t2650;
  double t2667;
  double t2668;
  double t2671;
  double t2680;
  double t2686;
  double t2691;
  double t2718;
  double t2719;
  double t2720;
  double t2721;
  double t2722;
  double t2725;
  double t2736;
  double t2737;
  double t2738;
  double t2739;
  double t2697;
  double t2703;
  double t2707;
  double t2709;
  double t2714;
  double t2717;
  double t2726;
  double t2727;
  double t2728;
  double t2729;
  double t2730;
  double t2731;
  double t2732;
  double t2693;
  double t2651;
  double t2742;
  double t2740;
  double t2812;
  double t2891;
  double t2912;
  double t2919;
  double t2989;
  double t3000;
  double t3002;
  double t3005;
  double t3007;
  double t1655;
  double t1652;
  double t1722;
  double t1715;
  double t3155;
  double t3156;
  double t3189;
  double t3194;
  double t3198;
  double t3235;
  double t3236;
  double t3237;
  double t3253;
  double t3102;
  double t3267;
  double t3276;
  double t3284;
  double t3288;
  double t3290;
  double t2963;
  double t3291;
  double t3292;
  double t3256;
  double t3330;
  double t3331;
  double t3332;
  double t3333;
  double t3340;
  double t3254;
  double t3341;
  double t3343;
  double t3379;
  double t3381;
  double t3395;
  double t3396;
  double t3393;
  double t3394;
  double t3397;
  double t3398;
  double t3399;
  double t3382;
  double t3364;
  double t3426;
  double t3406;
  double t3520;
  double t3524;
  double t3525;
  double t3526;
  double t3545;
  double t3559;
  double t3560;
  double t3562;
  double t3566;
  double t3567;
  double t3572;
  double t3578;
  double t3580;
  double t3581;
  double t3565;
  double t3573;
  double t3575;
  double t3576;
  double t3584;
  double t3586;
  double t3614;
  double t3615;
  double t3616;
  double t3617;
  double t3626;
  double t3627;
  double t3619;
  double t3631;
  double t3633;
  double t3621;
  double t3440;
  double t3482;
  double t3496;
  double t3497;
  double t3498;
  double t3499;
  double t3693;
  double t3700;
  double t3727;
  double t3728;
  double t3734;
  double t3738;
  double t3739;
  double t3744;
  double t3755;
  double t3756;
  double t3757;
  double t3687;
  double t3688;
  double t3689;
  double t3690;
  double t3691;
  double t3692;
  double t3754;
  double t3760;
  double t3761;
  double t3767;
  double t3768;
  double t3769;
  double t3774;
  double t3775;
  double t3776;
  double t3773;
  double t3778;
  double t3779;
  double t3793;
  double t3825;
  double t3829;
  double t3796;
  double t3840;
  double t3842;
  double t3798;
  double t3582;
  double t3587;
  double t3609;
  double t3610;
  double t3618;
  double t3620;
  double t3622;
  double t3623;
  double t3624;
  double t3902;
  double t3903;
  double t3904;
  double t3885;
  double t3628;
  double t3643;
  double t3644;
  double t3887;
  double t3901;
  double t3916;
  double t3647;
  double t3648;
  double t3650;
  double t3921;
  double t3945;
  double t3947;
  double t3934;
  double t3646;
  double t3651;
  double t3652;
  double t3940;
  double t3941;
  double t3942;
  double t3943;
  double t3955;
  double t3956;
  double t3957;
  double t3958;
  double t3959;
  double t3960;
  double t3961;
  double t3962;
  double t3963;
  double t3964;
  double t3965;
  double t3966;
  double t3967;
  double t3968;
  double t3969;
  double t3777;
  double t3780;
  double t3785;
  double t3789;
  double t3794;
  double t3797;
  double t3799;
  double t3800;
  double t3802;
  double t3997;
  double t3998;
  double t3999;
  double t3990;
  double t3839;
  double t3845;
  double t3846;
  double t3992;
  double t3995;
  double t4002;
  double t3851;
  double t3852;
  double t3860;
  double t4007;
  double t4024;
  double t4025;
  double t4015;
  double t3850;
  double t3861;
  double t3862;
  double t4020;
  double t4021;
  double t4022;
  double t4023;
  double t4026;
  double t4027;
  double t4028;
  double t4029;
  double t4030;
  double t4031;
  double t4032;
  double t4033;
  double t4035;
  double t4036;
  double t4037;
  double t4041;
  double t4042;
  double t4043;
  double t4044;
  double t4066;
  double t4068;
  double t4065;
  double t4088;
  double t4104;
  double t4106;
  double t4083;
  double t4084;
  double t4085;
  double t4093;
  double t4097;
  double t4102;
  double t4067;
  double t4069;
  double t4070;
  double t4072;
  double t4077;
  double t4079;
  double t4105;
  double t4107;
  double t4108;
  double t4110;
  double t4111;
  double t4112;
  double t4120;
  double t4121;
  double t4122;
  double t4143;
  double t4148;
  double t4149;
  double t4150;
  double t4151;
  double t4168;
  double t4169;
  double t4170;
  double t4176;
  double t4177;
  double t4178;
  double t4185;
  double t4172;
  double t4173;
  double t4174;
  double t4186;
  double t4175;
  double t4179;
  double t4180;
  double t4208;
  double t4209;
  double t4210;
  double t4230;
  double t4243;
  double t4244;
  double t4231;
  double t4233;
  double t4234;
  double t4245;
  double t4248;
  double t4249;
  double t4250;
  double t4265;
  double t4266;
  double t4267;
  double t4272;
  double t4273;
  double t4297;
  double t4298;
  double t4300;
  double t4301;
  double t4302;
  double t4305;
  double t4306;
  double t4317;
  double t4318;
  double t4327;
  double t4328;
  double t4329;
  double t4336;
  double t4340;
  double t4341;
  double t4349;
  double t4331;
  double t4333;
  double t4334;
  double t4350;
  double t4335;
  double t4342;
  double t4344;
  double t4357;
  double t4358;
  double t4361;
  double t4406;
  double t5101;
  double t5249;
  double t4412;
  double t4861;
  double t4944;
  double t5336;
  double t5554;
  double t5575;
  double t5701;
  double t5848;
  double t5871;
  double t5872;
  double t6274;
  double t6706;
  double t7024;
  t1521 = Cos(var1[3]);
  t194 = Cos(var1[4]);
  t285 = Sin(var1[3]);
  t1522 = Sin(var1[4]);
  t1538 = Cos(var1[2]);
  t166 = Sin(var1[2]);
  t1571 = t1521*t194;
  t1572 = -1.*t285*t1522;
  t1573 = t1571 + t1572;
  t1581 = -1.*t194*t285;
  t1582 = -1.*t1521*t1522;
  t1583 = t1581 + t1582;
  t1574 = t1538*t1573;
  t1476 = t194*t285;
  t1523 = t1521*t1522;
  t1524 = t1476 + t1523;
  t1591 = -1.*t166*t1573;
  t1585 = t1538*t1583;
  t1592 = t1585 + t1591;
  t1604 = -1.*t166*t1583;
  t1594 = t166*t1583;
  t1600 = t1594 + t1574;
  t1611 = -1.*t1521*t194;
  t1612 = t285*t1522;
  t1613 = t1611 + t1612;
  t1605 = -1.*t1538*t1573;
  t1606 = t1604 + t1605;
  t1631 = t1538*t1521;
  t1632 = -1.*t166*t285;
  t1633 = t1631 + t1632;
  t1627 = -1.*t1521*t166;
  t1629 = -1.*t1538*t285;
  t1630 = t1627 + t1629;
  t1639 = t1521*t166;
  t1640 = t1538*t285;
  t1641 = t1639 + t1640;
  t1643 = -1.*t1538*t1521;
  t1644 = t166*t285;
  t1645 = t1643 + t1644;
  t1525 = -1.*t166*t1524;
  t1580 = t1525 + t1574;
  t1593 = 6.4*t1580*t1592;
  t1601 = -1.*t1538*t1524;
  t1602 = t1601 + t1591;
  t1603 = 3.2*t1600*t1602;
  t1607 = t1538*t1524;
  t1608 = t166*t1573;
  t1609 = t1607 + t1608;
  t1610 = 3.2*t1606*t1609;
  t1614 = t1538*t1613;
  t1615 = t1604 + t1614;
  t1616 = 6.4*t1592*t1615;
  t1617 = -1.*t1538*t1583;
  t1618 = -1.*t166*t1613;
  t1619 = t1617 + t1618;
  t1621 = 3.2*t1600*t1619;
  t1622 = t166*t1613;
  t1623 = t1585 + t1622;
  t1624 = 3.2*t1606*t1623;
  t1634 = 20.4*t1630*t1633;
  t1642 = 6.8*t1641*t1633;
  t1646 = 20.4*t1630*t1645;
  t1647 = 6.8*t1641*t1645;
  t1657 = Cos(var1[5]);
  t1659 = Sin(var1[5]);
  t1663 = t1538*t1657;
  t1664 = -1.*t166*t1659;
  t1665 = t1663 + t1664;
  t1658 = -1.*t1657*t166;
  t1661 = -1.*t1538*t1659;
  t1662 = t1658 + t1661;
  t1667 = t1657*t166;
  t1668 = t1538*t1659;
  t1669 = t1667 + t1668;
  t1671 = -1.*t1538*t1657;
  t1672 = t166*t1659;
  t1673 = t1671 + t1672;
  t1676 = Cos(var1[6]);
  t1678 = Sin(var1[6]);
  t1677 = -1.*t1676*t1659;
  t1679 = -1.*t1657*t1678;
  t1680 = t1677 + t1679;
  t1682 = t1657*t1676;
  t1683 = -1.*t1659*t1678;
  t1684 = t1682 + t1683;
  t1691 = t1676*t1659;
  t1692 = t1657*t1678;
  t1693 = t1691 + t1692;
  t1688 = -1.*t166*t1684;
  t1695 = t1538*t1684;
  t1685 = -1.*t1538*t1684;
  t1714 = t166*t1684;
  t1694 = -1.*t166*t1693;
  t1696 = t1694 + t1695;
  t1687 = t1538*t1680;
  t1689 = t1687 + t1688;
  t1704 = t166*t1680;
  t1712 = t1704 + t1695;
  t1701 = -1.*t1538*t1693;
  t1702 = t1701 + t1688;
  t1681 = -1.*t166*t1680;
  t1686 = t1681 + t1685;
  t1723 = t1538*t1693;
  t1724 = t1723 + t1714;
  t1713 = -1.*t1538*t1680;
  t2288 = -1.*t1657*t1676;
  t2295 = t1659*t1678;
  t2296 = t2288 + t2295;
  t1666 = 20.4*t1662*t1665;
  t1670 = 6.8*t1669*t1665;
  t1674 = 20.4*t1662*t1673;
  t1675 = 6.8*t1669*t1673;
  t2271 = 6.4*t1696*t1689;
  t2272 = 3.2*t1712*t1702;
  t2273 = 3.2*t1686*t1724;
  t2310 = t1538*t2296;
  t2325 = t1681 + t2310;
  t2341 = 6.4*t1689*t2325;
  t2351 = -1.*t166*t2296;
  t2353 = t1713 + t2351;
  t2354 = 3.2*t1712*t2353;
  t2384 = t166*t2296;
  t2385 = t1687 + t2384;
  t2386 = 3.2*t1686*t2385;
  t1648 = t1634 + t1642 + t1646 + t1647 + t1593 + t1603 + t1610 + t1616 + t1621 + t1624;
  t1654 = t166*t1524;
  t2415 = 6.4*t1600*t1592;
  t2425 = 3.2*t1609*t1615;
  t2426 = t1654 + t1614;
  t2427 = 3.2*t1592*t2426;
  t2428 = t1607 + t1618;
  t2429 = 3.2*t1600*t2428;
  t2431 = 3.2*t1580*t1623;
  t2442 = 6.4*t1615*t1623;
  t1625 = t1593 + t1603 + t1610 + t1616 + t1621 + t1624;
  t2443 = t2415 + t2425 + t2427 + t2429 + t2431 + t2442;
  t2444 = -0.5*var2[4]*t2443;
  t2407 = t1666 + t1670 + t1674 + t1675 + t2271 + t2272 + t2273 + t2341 + t2354 + t2386;
  t1717 = t166*t1693;
  t2476 = 6.4*t1712*t1689;
  t2477 = 3.2*t1724*t2325;
  t2492 = t1717 + t2310;
  t2493 = 3.2*t1689*t2492;
  t2494 = t1723 + t2351;
  t2498 = 3.2*t1712*t2494;
  t2499 = 3.2*t1696*t2385;
  t2500 = 6.4*t2325*t2385;
  t2400 = t2271 + t2272 + t2273 + t2341 + t2354 + t2386;
  t2502 = t2476 + t2477 + t2493 + t2498 + t2499 + t2500;
  t2505 = -0.5*var2[6]*t2502;
  t2536 = 3.2*t1600*t1580;
  t2595 = 3.2*t1592*t1609;
  t2619 = 3.2*t1600*t1615;
  t2650 = 3.2*t1592*t1623;
  t2667 = Power(t1630,2);
  t2668 = 6.8*t2667;
  t2671 = 6.8*t1630*t1641;
  t2680 = Power(t1633,2);
  t2686 = 6.8*t2680;
  t2691 = 6.8*t1633*t1645;
  t2718 = Power(t1662,2);
  t2719 = 6.8*t2718;
  t2720 = 6.8*t1662*t1669;
  t2721 = Power(t1665,2);
  t2722 = 6.8*t2721;
  t2725 = 6.8*t1665*t1673;
  t2736 = 3.2*t1712*t1696;
  t2737 = 3.2*t1689*t1724;
  t2738 = 3.2*t1712*t2325;
  t2739 = 3.2*t1689*t2385;
  t2697 = 3.2*t1606*t1600;
  t2703 = Power(t1580,2);
  t2707 = 3.2*t2703;
  t2709 = Power(t1592,2);
  t2714 = 3.2*t2709;
  t2717 = 3.2*t1602*t1609;
  t2726 = 3.2*t1686*t1712;
  t2727 = Power(t1696,2);
  t2728 = 3.2*t2727;
  t2729 = Power(t1689,2);
  t2730 = 3.2*t2729;
  t2731 = 3.2*t1702*t1724;
  t2732 = t2668 + t2671 + t2686 + t2691 + t2697 + t2707 + t2714 + t2717 + t2719 + t2720 + t2722 + t2725 + t2726 + t2728 + t2730 + t2731;
  t2693 = t2668 + t2671 + t2686 + t2691 + t2536 + t2595 + t2619 + t2650;
  t2651 = t2536 + t2595 + t2619 + t2650;
  t2742 = t2719 + t2720 + t2722 + t2725 + t2736 + t2737 + t2738 + t2739;
  t2740 = t2736 + t2737 + t2738 + t2739;
  t2812 = 6.4*t1606*t1580;
  t2891 = 6.4*t1592*t1602;
  t2912 = 6.4*t1606*t1615;
  t2919 = 6.4*t1592*t1619;
  t2989 = 13.6*t2667;
  t3000 = 13.6*t1630*t1641;
  t3002 = 13.6*t1633*t1645;
  t3005 = Power(t1645,2);
  t3007 = 13.6*t3005;
  t1655 = t1654 + t1605;
  t1652 = t1617 + t1608;
  t1722 = t1717 + t1685;
  t1715 = t1713 + t1714;
  t3155 = 13.6*t2718;
  t3156 = 13.6*t1662*t1669;
  t3189 = 13.6*t1665*t1673;
  t3194 = Power(t1673,2);
  t3198 = 13.6*t3194;
  t3235 = 6.4*t1686*t1696;
  t3236 = 6.4*t1689*t1702;
  t3237 = 6.4*t1686*t2325;
  t3253 = 6.4*t1689*t2353;
  t3102 = t2989 + t3000 + t3002 + t3007 + t2812 + t2891 + t2912 + t2919;
  t3267 = 6.4*t2709;
  t3276 = 6.4*t1580*t1615;
  t3284 = Power(t1615,2);
  t3288 = 6.4*t3284;
  t3290 = 6.4*t1592*t2428;
  t2963 = t2812 + t2891 + t2912 + t2919;
  t3291 = t3267 + t3276 + t3288 + t3290;
  t3292 = -0.5*var2[4]*t3291;
  t3256 = t3155 + t3156 + t3189 + t3198 + t3235 + t3236 + t3237 + t3253;
  t3330 = 6.4*t2729;
  t3331 = 6.4*t1696*t2325;
  t3332 = Power(t2325,2);
  t3333 = 6.4*t3332;
  t3340 = 6.4*t1689*t2494;
  t3254 = t3235 + t3236 + t3237 + t3253;
  t3341 = t3330 + t3331 + t3333 + t3340;
  t3343 = -0.5*var2[6]*t3341;
  t3379 = 13.6*t1630*t1633;
  t3381 = 13.6*t1630*t1645;
  t3395 = 13.6*t1662*t1665;
  t3396 = 13.6*t1662*t1673;
  t3393 = 6.4*t1606*t1592;
  t3394 = 6.4*t1580*t1602;
  t3397 = 6.4*t1686*t1689;
  t3398 = 6.4*t1696*t1702;
  t3399 = t3379 + t3381 + t3393 + t3394 + t3395 + t3396 + t3397 + t3398;
  t3382 = t3379 + t3381 + t1593 + t1616;
  t3364 = t1593 + t1616;
  t3426 = t3395 + t3396 + t2271 + t2341;
  t3406 = t2271 + t2341;
  t3520 = -1.*t194;
  t3524 = 1. + t3520;
  t3525 = 0.4*t3524;
  t3526 = 0.64*t194;
  t3545 = t3525 + t3526;
  t3559 = t3545*t285;
  t3560 = 0.24*t1521*t1522;
  t3562 = t3559 + t3560;
  t3566 = t1521*t3545;
  t3567 = -0.24*t285*t1522;
  t3572 = t3566 + t3567;
  t3578 = -1.*t3545*t285;
  t3580 = -0.24*t1521*t1522;
  t3581 = t3578 + t3580;
  t3565 = -1.*t3562*t1573;
  t3573 = -1.*t1583*t3572;
  t3575 = t3565 + t3573;
  t3576 = 3.2*t1606*t3575;
  t3584 = t3562*t1573;
  t3586 = t1583*t3572;
  t3614 = t3562*t1524;
  t3615 = t1573*t3572;
  t3616 = t3614 + t3615;
  t3617 = 3.2*t3616*t1619;
  t3626 = -0.24*t194*t285;
  t3627 = t3626 + t3580;
  t3619 = -1.*t1583*t3562;
  t3631 = 0.24*t1521*t194;
  t3633 = t3631 + t3567;
  t3621 = -1.*t3572*t1613;
  t3440 = Power(t1521,2);
  t3482 = 0.11*t3440;
  t3496 = Power(t285,2);
  t3497 = 0.11*t3496;
  t3498 = t3482 + t3497;
  t3499 = 6.8*t1641*t3498;
  t3693 = -1.*t1676;
  t3700 = 1. + t3693;
  t3727 = 0.4*t3700;
  t3728 = 0.64*t1676;
  t3734 = t3727 + t3728;
  t3738 = t3734*t1659;
  t3739 = 0.24*t1657*t1678;
  t3744 = t3738 + t3739;
  t3755 = t1657*t3734;
  t3756 = -0.24*t1659*t1678;
  t3757 = t3755 + t3756;
  t3687 = Power(t1657,2);
  t3688 = 0.11*t3687;
  t3689 = Power(t1659,2);
  t3690 = 0.11*t3689;
  t3691 = t3688 + t3690;
  t3692 = 6.8*t1669*t3691;
  t3754 = -1.*t3744*t1684;
  t3760 = -1.*t1680*t3757;
  t3761 = t3754 + t3760;
  t3767 = t3744*t1693;
  t3768 = t1684*t3757;
  t3769 = t3767 + t3768;
  t3774 = -1.*t3734*t1659;
  t3775 = -0.24*t1657*t1678;
  t3776 = t3774 + t3775;
  t3773 = 3.2*t1686*t3761;
  t3778 = t3744*t1684;
  t3779 = t1680*t3757;
  t3793 = 3.2*t3769*t2353;
  t3825 = -0.24*t1676*t1659;
  t3829 = t3825 + t3775;
  t3796 = -1.*t1680*t3744;
  t3840 = 0.24*t1657*t1676;
  t3842 = t3840 + t3756;
  t3798 = -1.*t3757*t2296;
  t3582 = t3581*t1573;
  t3587 = t1524*t3572;
  t3609 = t3582 + t3584 + t3586 + t3587;
  t3610 = 3.2*t1606*t3609;
  t3618 = -1.*t1583*t3581;
  t3620 = -1.*t1573*t3572;
  t3622 = t3618 + t3619 + t3620 + t3621;
  t3623 = 3.2*t1602*t3622;
  t3624 = t3499 + t3576 + t3610 + t3617 + t3623;
  t3902 = -1.*t1521*t3545;
  t3903 = 0.24*t285*t1522;
  t3904 = t3902 + t3903;
  t3885 = 3.2*t3575*t1615;
  t3628 = t3627*t1573;
  t3643 = t1524*t3633;
  t3644 = t3628 + t3584 + t3586 + t3643;
  t3887 = 3.2*t3616*t2428;
  t3901 = -1.*t1524*t3572;
  t3916 = -1.*t3562*t1613;
  t3647 = -1.*t1583*t3627;
  t3648 = -1.*t1573*t3633;
  t3650 = t3647 + t3619 + t3648 + t3621;
  t3921 = t1583*t3562;
  t3945 = -0.24*t1521*t194;
  t3947 = t3945 + t3903;
  t3934 = t3572*t1613;
  t3646 = 3.2*t1606*t3644;
  t3651 = 3.2*t1602*t3650;
  t3652 = t3576 + t3646 + t3617 + t3651;
  t3940 = 3.2*t3609*t1615;
  t3941 = 3.2*t3644*t1615;
  t3942 = -1.*t3627*t1573;
  t3943 = -1.*t1583*t3633;
  t3955 = -1.*t1583*t3947;
  t3956 = -1.*t3581*t1613;
  t3957 = -1.*t3627*t1613;
  t3958 = t3942 + t3573 + t3901 + t3943 + t3955 + t3956 + t3957 + t3916;
  t3959 = 3.2*t1580*t3958;
  t3960 = 3.2*t1592*t3622;
  t3961 = 3.2*t1592*t3650;
  t3962 = t1583*t3581;
  t3963 = t1583*t3627;
  t3964 = t3627*t1524;
  t3965 = t1573*t3633;
  t3966 = t1573*t3947;
  t3967 = t3962 + t3963 + t3921 + t3964 + t3615 + t3965 + t3966 + t3934;
  t3968 = 3.2*t1592*t3967;
  t3969 = t3885 + t3940 + t3941 + t3887 + t3959 + t3960 + t3961 + t3968;
  t3777 = t3776*t1684;
  t3780 = t1693*t3757;
  t3785 = t3777 + t3778 + t3779 + t3780;
  t3789 = 3.2*t1686*t3785;
  t3794 = -1.*t1680*t3776;
  t3797 = -1.*t1684*t3757;
  t3799 = t3794 + t3796 + t3797 + t3798;
  t3800 = 3.2*t1702*t3799;
  t3802 = t3692 + t3773 + t3789 + t3793 + t3800;
  t3997 = -1.*t1657*t3734;
  t3998 = 0.24*t1659*t1678;
  t3999 = t3997 + t3998;
  t3990 = 3.2*t3761*t2325;
  t3839 = t3829*t1684;
  t3845 = t1693*t3842;
  t3846 = t3839 + t3778 + t3779 + t3845;
  t3992 = 3.2*t3769*t2494;
  t3995 = -1.*t1693*t3757;
  t4002 = -1.*t3744*t2296;
  t3851 = -1.*t1680*t3829;
  t3852 = -1.*t1684*t3842;
  t3860 = t3851 + t3796 + t3852 + t3798;
  t4007 = t1680*t3744;
  t4024 = -0.24*t1657*t1676;
  t4025 = t4024 + t3998;
  t4015 = t3757*t2296;
  t3850 = 3.2*t1686*t3846;
  t3861 = 3.2*t1702*t3860;
  t3862 = t3773 + t3850 + t3793 + t3861;
  t4020 = 3.2*t3785*t2325;
  t4021 = 3.2*t3846*t2325;
  t4022 = -1.*t3829*t1684;
  t4023 = -1.*t1680*t3842;
  t4026 = -1.*t1680*t4025;
  t4027 = -1.*t3776*t2296;
  t4028 = -1.*t3829*t2296;
  t4029 = t4022 + t3760 + t3995 + t4023 + t4026 + t4027 + t4028 + t4002;
  t4030 = 3.2*t1696*t4029;
  t4031 = 3.2*t1689*t3799;
  t4032 = 3.2*t1689*t3860;
  t4033 = t1680*t3776;
  t4035 = t1680*t3829;
  t4036 = t3829*t1693;
  t4037 = t1684*t3842;
  t4041 = t1684*t4025;
  t4042 = t4033 + t4035 + t4007 + t4036 + t3768 + t4037 + t4041 + t4015;
  t4043 = 3.2*t1689*t4042;
  t4044 = t3990 + t4020 + t4021 + t3992 + t4030 + t4031 + t4032 + t4043;
  t4066 = 3.2*t1592*t3575;
  t4068 = 3.2*t3616*t1615;
  t4065 = 6.8*t1645*t3498;
  t4088 = 6.8*t1673*t3691;
  t4104 = 3.2*t1689*t3761;
  t4106 = 3.2*t3769*t2325;
  t4083 = -2.88*t1538;
  t4084 = 3.2*t1602*t3575;
  t4085 = 3.2*t1606*t3616;
  t4093 = 3.2*t1702*t3761;
  t4097 = 3.2*t1686*t3769;
  t4102 = t4083 + t4065 + t4084 + t4085 + t4088 + t4093 + t4097;
  t4067 = 3.2*t1592*t3609;
  t4069 = 3.2*t1580*t3622;
  t4070 = t4065 + t4066 + t4067 + t4068 + t4069;
  t4072 = 3.2*t1592*t3644;
  t4077 = 3.2*t1580*t3650;
  t4079 = t4066 + t4072 + t4068 + t4077;
  t4105 = 3.2*t1689*t3785;
  t4107 = 3.2*t1696*t3799;
  t4108 = t4088 + t4104 + t4105 + t4106 + t4107;
  t4110 = 3.2*t1689*t3846;
  t4111 = 3.2*t1696*t3860;
  t4112 = t4104 + t4110 + t4106 + t4111;
  t4120 = 0.748*t1641;
  t4121 = t3545*t1522;
  t4122 = -0.24*t194*t1522;
  t4143 = t4121 + t4122;
  t4148 = t3545*t194;
  t4149 = Power(t1522,2);
  t4150 = 0.24*t4149;
  t4151 = t4148 + t4150;
  t4168 = 3.2*t4143*t1606;
  t4169 = 3.2*t4151*t1619;
  t4170 = t4120 + t4168 + t4169;
  t4176 = Power(t194,2);
  t4177 = -0.24*t4176;
  t4178 = t4148 + t4177;
  t4185 = 3.2*t4143*t1615;
  t4172 = -1.*t3545*t1522;
  t4173 = 0.24*t194*t1522;
  t4174 = t4172 + t4173;
  t4186 = 3.2*t4151*t2428;
  t4175 = 3.2*t4174*t1606;
  t4179 = 3.2*t4178*t1602;
  t4180 = t4168 + t4175 + t4179 + t4169;
  t4208 = 3.2*t4178*t1592;
  t4209 = 3.2*t4174*t1615;
  t4210 = t4208 + t4185 + t4209 + t4186;
  t4230 = 0.748*t1645;
  t4243 = 3.2*t4143*t1592;
  t4244 = 3.2*t4151*t1615;
  t4231 = 3.2*t4151*t1606;
  t4233 = 3.2*t4143*t1602;
  t4234 = t4230 + t4231 + t4233;
  t4245 = t4230 + t4243 + t4244;
  t4248 = 3.2*t4178*t1580;
  t4249 = 3.2*t4174*t1592;
  t4250 = t4248 + t4243 + t4249 + t4244;
  t4265 = -0.384*var2[2]*t1619;
  t4266 = -0.384*var2[3]*t2428;
  t4267 = -0.384*var2[4]*t2428;
  t4272 = t4265 + t4266 + t4267;
  t4273 = var2[1]*t4272;
  t4297 = -0.384*var2[1]*t1615;
  t4298 = 0.748*t1669;
  t4300 = t3734*t1678;
  t4301 = -0.24*t1676*t1678;
  t4302 = t4300 + t4301;
  t4305 = t3734*t1676;
  t4306 = Power(t1678,2);
  t4317 = 0.24*t4306;
  t4318 = t4305 + t4317;
  t4327 = 3.2*t4302*t1686;
  t4328 = 3.2*t4318*t2353;
  t4329 = t4298 + t4327 + t4328;
  t4336 = Power(t1676,2);
  t4340 = -0.24*t4336;
  t4341 = t4305 + t4340;
  t4349 = 3.2*t4302*t2325;
  t4331 = -1.*t3734*t1678;
  t4333 = 0.24*t1676*t1678;
  t4334 = t4331 + t4333;
  t4350 = 3.2*t4318*t2494;
  t4335 = 3.2*t4334*t1686;
  t4342 = 3.2*t4341*t1702;
  t4344 = t4327 + t4335 + t4342 + t4328;
  t4357 = 3.2*t4341*t1689;
  t4358 = 3.2*t4334*t2325;
  t4361 = t4357 + t4349 + t4358 + t4350;
  t4406 = 0.748*t1673;
  t5101 = 3.2*t4302*t1689;
  t5249 = 3.2*t4318*t2325;
  t4412 = 3.2*t4318*t1686;
  t4861 = 3.2*t4302*t1702;
  t4944 = t4406 + t4412 + t4861;
  t5336 = t4406 + t5101 + t5249;
  t5554 = 3.2*t4341*t1696;
  t5575 = 3.2*t4334*t1689;
  t5701 = t5554 + t5101 + t5575 + t5249;
  t5848 = -0.384*var2[2]*t2353;
  t5871 = -0.384*var2[5]*t2494;
  t5872 = -0.384*var2[6]*t2494;
  t6274 = t5848 + t5871 + t5872;
  t6706 = var2[1]*t6274;
  t7024 = -0.384*var2[1]*t2325;
  p_output1[0]=var2[1]*(-0.5*(9.6*t1580*t1602 + 9.6*t1592*t1606 + t1634 + t1642 + t1646 + t1647 + 3.2*t1600*t1652 + 3.2*t1609*t1655 + t1666 + t1670 + t1674 + t1675 + 9.6*t1686*t1689 + 9.6*t1696*t1702 + 3.2*t1712*t1715 + 3.2*t1722*t1724)*var2[2] - 0.5*t1648*var2[3] - 0.5*t1625*var2[4] - 0.5*t2407*var2[5] - 0.5*t2400*var2[6]);
  p_output1[1]=var2[1]*(t2444 - 0.5*t1648*var2[2] - 0.5*(t1634 + t1642 + t1646 + t1647 + t2415 + t2425 + t2427 + t2429 + t2431 + t2442)*var2[3]);
  p_output1[2]=var2[1]*(t2444 - 0.5*t1625*var2[2] - 0.5*t2443*var2[3]);
  p_output1[3]=var2[1]*(t2505 - 0.5*t2407*var2[2] - 0.5*(t1666 + t1670 + t1674 + t1675 + t2476 + t2477 + t2493 + t2498 + t2499 + t2500)*var2[5]);
  p_output1[4]=var2[1]*(t2505 - 0.5*t2400*var2[2] - 0.5*t2502*var2[5]);
  p_output1[5]=-0.5*t2732*var2[2] - 0.5*t2693*var2[3] - 0.5*t2651*var2[4] - 0.5*t2742*var2[5] - 0.5*t2740*var2[6];
  p_output1[6]=-0.5*t2732*var2[1];
  p_output1[7]=-0.5*t2693*var2[1];
  p_output1[8]=-0.5*t2651*var2[1];
  p_output1[9]=-0.5*t2742*var2[1];
  p_output1[10]=-0.5*t2740*var2[1];
  p_output1[11]=var2[1]*(-0.5*(6.4*Power(t1602,2) + 6.4*Power(t1606,2) + 6.4*t1592*t1652 + 6.4*t1580*t1655 + 6.4*Power(t1686,2) + 6.4*Power(t1702,2) + 6.4*t1689*t1715 + 6.4*t1696*t1722 + t2989 + t3000 + t3002 + t3007 + t3155 + t3156 + t3189 + t3198)*var2[2] - 0.5*t3102*var2[3] - 0.5*t2963*var2[4] - 0.5*t3256*var2[5] - 0.5*t3254*var2[6]);
  p_output1[12]=var2[1]*(t3292 - 0.5*t3102*var2[2] - 0.5*(t2989 + t3000 + t3002 + t3007 + t3267 + t3276 + t3288 + t3290)*var2[3]);
  p_output1[13]=var2[1]*(t3292 - 0.5*t2963*var2[2] - 0.5*t3291*var2[3]);
  p_output1[14]=var2[1]*(t3343 - 0.5*t3256*var2[2] - 0.5*(t3155 + t3156 + t3189 + t3198 + t3330 + t3331 + t3333 + t3340)*var2[5]);
  p_output1[15]=var2[1]*(t3343 - 0.5*t3254*var2[2] - 0.5*t3341*var2[5]);
  p_output1[16]=-0.5*t3399*var2[2] - 0.5*t3382*var2[3] - 0.5*t3364*var2[4] - 0.5*t3426*var2[5] - 0.5*t3406*var2[6];
  p_output1[17]=-0.5*t3399*var2[1];
  p_output1[18]=-0.5*t3382*var2[1];
  p_output1[19]=-0.5*t3364*var2[1];
  p_output1[20]=-0.5*t3426*var2[1];
  p_output1[21]=-0.5*t3406*var2[1];
  p_output1[22]=var2[1]*(-0.5*(2.88*t166 + t3499 + 3.2*t1655*t3575 + 3.2*t1652*t3616 + t3692 + 3.2*t1722*t3761 + 3.2*t1715*t3769)*var2[2] - 0.5*t3624*var2[3] - 0.5*t3652*var2[4] - 0.5*t3802*var2[5] - 0.5*t3862*var2[6]);
  p_output1[23]=var2[1]*(-0.5*t3624*var2[2] - 0.5*(t3499 + 6.4*t1615*t3609 + 6.4*t1592*t3622 + t3885 + t3887 + 3.2*t1580*(-2.*t1583*t3572 - 1.*t1573*t3581 - 2.*t1613*t3581 + t3901 - 1.*t1583*t3904 + t3916) + 3.2*t1592*(2.*t1573*t3572 + t1524*t3581 + 2.*t1583*t3581 + t1573*t3904 + t3921 + t3934))*var2[3] - 0.5*t3969*var2[4]);
  p_output1[24]=var2[1]*(-0.5*t3652*var2[2] - 0.5*t3969*var2[3] - 0.5*(6.4*t1615*t3644 + 6.4*t1592*t3650 + t3885 + t3887 + 3.2*t1580*(-2.*t1613*t3627 - 2.*t1583*t3633 + t3901 + t3916 + t3942 + t3955) + 3.2*t1592*(2.*t1583*t3627 + 2.*t1573*t3633 + t3921 + t3934 + t3964 + t3966))*var2[4]);
  p_output1[25]=var2[1]*(-0.5*t3802*var2[2] - 0.5*(t3692 + 6.4*t2325*t3785 + 6.4*t1689*t3799 + t3990 + t3992 + 3.2*t1696*(-2.*t1680*t3757 - 1.*t1684*t3776 - 2.*t2296*t3776 + t3995 - 1.*t1680*t3999 + t4002) + 3.2*t1689*(2.*t1684*t3757 + 2.*t1680*t3776 + t1693*t3776 + t1684*t3999 + t4007 + t4015))*var2[5] - 0.5*t4044*var2[6]);
  p_output1[26]=var2[1]*(-0.5*t3862*var2[2] - 0.5*t4044*var2[5] - 0.5*(6.4*t2325*t3846 + 6.4*t1689*t3860 + t3990 + t3992 + 3.2*t1696*(-2.*t2296*t3829 - 2.*t1680*t3842 + t3995 + t4002 + t4022 + t4026) + 3.2*t1689*(2.*t1680*t3829 + 2.*t1684*t3842 + t4007 + t4015 + t4036 + t4041))*var2[6]);
  p_output1[27]=-0.5*t4102*var2[2] - 0.5*t4070*var2[3] - 0.5*t4079*var2[4] - 0.5*t4108*var2[5] - 0.5*t4112*var2[6];
  p_output1[28]=-0.5*t4102*var2[1];
  p_output1[29]=-0.5*t4070*var2[1];
  p_output1[30]=-0.5*t4079*var2[1];
  p_output1[31]=-0.5*t4108*var2[1];
  p_output1[32]=-0.5*t4112*var2[1];
  p_output1[33]=var2[1]*(-0.5*(t4120 + 3.2*t1655*t4143 + 3.2*t1652*t4151)*var2[2] - 0.5*t4170*var2[3] - 0.5*t4180*var2[4]);
  p_output1[34]=var2[1]*(-0.5*t4170*var2[2] - 0.5*(t4120 + t4185 + t4186)*var2[3] - 0.5*t4210*var2[4]);
  p_output1[35]=var2[1]*(-0.5*t4180*var2[2] - 0.5*t4210*var2[3] - 0.5*(3.2*t1580*t4174 + 6.4*t1615*t4174 + 3.2*t1592*(-1.*t194*t3545 + 0.24*t4176) + 6.4*t1592*t4178 + t4185 + t4186)*var2[4]);
  p_output1[36]=-0.5*t4234*var2[2] - 0.5*t4245*var2[3] - 0.5*t4250*var2[4];
  p_output1[37]=-0.5*t4234*var2[1];
  p_output1[38]=-0.5*t4245*var2[1];
  p_output1[39]=-0.5*t4250*var2[1];
  p_output1[40]=var2[1]*(-0.384*t1652*var2[2] - 0.384*t1619*var2[3] - 0.384*t1619*var2[4]);
  p_output1[41]=t4273;
  p_output1[42]=t4273;
  p_output1[43]=-0.384*t1606*var2[2] - 0.384*t1615*var2[3] - 0.384*t1615*var2[4];
  p_output1[44]=-0.384*t1606*var2[1];
  p_output1[45]=t4297;
  p_output1[46]=t4297;
  p_output1[47]=var2[1]*(-0.5*(t4298 + 3.2*t1722*t4302 + 3.2*t1715*t4318)*var2[2] - 0.5*t4329*var2[5] - 0.5*t4344*var2[6]);
  p_output1[48]=var2[1]*(-0.5*t4329*var2[2] - 0.5*(t4298 + t4349 + t4350)*var2[5] - 0.5*t4361*var2[6]);
  p_output1[49]=var2[1]*(-0.5*t4344*var2[2] - 0.5*t4361*var2[5] - 0.5*(3.2*t1696*t4334 + 6.4*t2325*t4334 + 3.2*t1689*(-1.*t1676*t3734 + 0.24*t4336) + 6.4*t1689*t4341 + t4349 + t4350)*var2[6]);
  p_output1[50]=-0.5*t4944*var2[2] - 0.5*t5336*var2[5] - 0.5*t5701*var2[6];
  p_output1[51]=-0.5*t4944*var2[1];
  p_output1[52]=-0.5*t5336*var2[1];
  p_output1[53]=-0.5*t5701*var2[1];
  p_output1[54]=var2[1]*(-0.384*t1715*var2[2] - 0.384*t2353*var2[5] - 0.384*t2353*var2[6]);
  p_output1[55]=t6706;
  p_output1[56]=t6706;
  p_output1[57]=-0.384*t1686*var2[2] - 0.384*t2325*var2[5] - 0.384*t2325*var2[6];
  p_output1[58]=-0.384*t1686*var2[1];
  p_output1[59]=t7024;
  p_output1[60]=t7024;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 61, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce1_vec2_five_link_walker.hh"

namespace RightStance
{

void J_Ce1_vec2_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
