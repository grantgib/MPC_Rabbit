/*
 * Automatically Generated from Mathematica.
 * Wed 25 Mar 2020 22:48:39 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t171;
  double t134;
  double t150;
  double t176;
  double t219;
  double t133;
  double t220;
  double t222;
  double t224;
  double t270;
  double t273;
  double t275;
  double t230;
  double t161;
  double t187;
  double t202;
  double t292;
  double t288;
  double t294;
  double t352;
  double t329;
  double t332;
  double t384;
  double t386;
  double t387;
  double t353;
  double t355;
  double t481;
  double t485;
  double t489;
  double t460;
  double t477;
  double t480;
  double t494;
  double t499;
  double t504;
  double t506;
  double t507;
  double t514;
  double t216;
  double t260;
  double t316;
  double t337;
  double t340;
  double t348;
  double t362;
  double t368;
  double t369;
  double t371;
  double t390;
  double t391;
  double t392;
  double t411;
  double t420;
  double t423;
  double t424;
  double t429;
  double t431;
  double t432;
  double t492;
  double t505;
  double t518;
  double t539;
  double t2826;
  double t2832;
  double t3191;
  double t3870;
  double t3889;
  double t2828;
  double t2895;
  double t2919;
  double t4160;
  double t4198;
  double t4249;
  double t4292;
  double t4326;
  double t4332;
  double t4381;
  double t4422;
  double t4390;
  double t4429;
  double t4443;
  double t4450;
  double t4454;
  double t4456;
  double t4677;
  double t4679;
  double t4689;
  double t4586;
  double t4704;
  double t4488;
  double t4750;
  double t4690;
  double t4708;
  double t4528;
  double t4587;
  double t4720;
  double t4731;
  double t4713;
  double t4715;
  double t4446;
  double t4526;
  double t4770;
  double t4781;
  double t4743;
  double t6454;
  double t6506;
  double t6572;
  double t4155;
  double t4274;
  double t4336;
  double t4358;
  double t4851;
  double t4975;
  double t5019;
  double t6574;
  double t6583;
  double t6595;
  double t6597;
  double t6621;
  double t6622;
  double t6623;
  double t6626;
  double t6632;
  double t540;
  double t2684;
  double t6654;
  double t6673;
  double t6675;
  double t6681;
  double t6687;
  double t6689;
  double t6694;
  double t6695;
  double t434;
  double t6697;
  double t6698;
  double t6636;
  double t4759;
  double t6716;
  double t6717;
  double t6718;
  double t6719;
  double t6729;
  double t6732;
  double t6734;
  double t6737;
  double t6633;
  double t6738;
  double t6739;
  double t6763;
  double t6765;
  double t6766;
  double t6768;
  double t6772;
  double t6773;
  double t6774;
  double t6776;
  double t6778;
  double t6782;
  double t6791;
  double t6792;
  double t6795;
  double t6796;
  double t6802;
  double t6803;
  double t6815;
  double t6816;
  double t6817;
  double t6818;
  double t6785;
  double t6786;
  double t6787;
  double t6788;
  double t6789;
  double t6790;
  double t6805;
  double t6806;
  double t6809;
  double t6810;
  double t6811;
  double t6812;
  double t6813;
  double t6783;
  double t6769;
  double t6821;
  double t6819;
  double t6831;
  double t6832;
  double t6833;
  double t6834;
  double t6838;
  double t6839;
  double t6840;
  double t6841;
  double t6842;
  double t2823;
  double t577;
  double t4763;
  double t4754;
  double t6853;
  double t6855;
  double t6856;
  double t6858;
  double t6860;
  double t6870;
  double t6871;
  double t6872;
  double t6873;
  double t6844;
  double t6881;
  double t6882;
  double t6883;
  double t6884;
  double t6885;
  double t6835;
  double t6887;
  double t6888;
  double t6876;
  double t6898;
  double t6899;
  double t6902;
  double t6903;
  double t6904;
  double t6874;
  double t6905;
  double t6906;
  double t6917;
  double t6918;
  double t6923;
  double t6926;
  double t6921;
  double t6922;
  double t6927;
  double t6928;
  double t6929;
  double t6919;
  double t6915;
  double t6933;
  double t6931;
  double t6951;
  double t6953;
  double t6954;
  double t6955;
  double t6956;
  double t6957;
  double t6958;
  double t6959;
  double t6961;
  double t6962;
  double t6963;
  double t6968;
  double t6969;
  double t6971;
  double t6960;
  double t6964;
  double t6966;
  double t6967;
  double t6974;
  double t6975;
  double t6981;
  double t6982;
  double t6986;
  double t6987;
  double t6997;
  double t6999;
  double t6990;
  double t7002;
  double t7003;
  double t6992;
  double t6943;
  double t6944;
  double t6945;
  double t6946;
  double t6947;
  double t6948;
  double t7022;
  double t7024;
  double t7026;
  double t7027;
  double t7028;
  double t7029;
  double t7030;
  double t7032;
  double t7035;
  double t7036;
  double t7037;
  double t7016;
  double t7017;
  double t7018;
  double t7019;
  double t7020;
  double t7021;
  double t7034;
  double t7039;
  double t7040;
  double t7042;
  double t7043;
  double t7044;
  double t7049;
  double t7050;
  double t7051;
  double t7048;
  double t7054;
  double t7055;
  double t7059;
  double t7077;
  double t7078;
  double t7062;
  double t7080;
  double t7081;
  double t7071;
  double t6973;
  double t6976;
  double t6979;
  double t6980;
  double t6988;
  double t6991;
  double t6993;
  double t6994;
  double t6995;
  double t7103;
  double t7104;
  double t7105;
  double t7097;
  double t7000;
  double t7004;
  double t7005;
  double t7099;
  double t7102;
  double t7109;
  double t7007;
  double t7008;
  double t7009;
  double t7115;
  double t7129;
  double t7130;
  double t7120;
  double t7006;
  double t7010;
  double t7011;
  double t7125;
  double t7126;
  double t7127;
  double t7128;
  double t7133;
  double t7134;
  double t7136;
  double t7137;
  double t7138;
  double t7139;
  double t7140;
  double t7141;
  double t7142;
  double t7143;
  double t7144;
  double t7145;
  double t7146;
  double t7147;
  double t7148;
  double t7053;
  double t7056;
  double t7057;
  double t7058;
  double t7060;
  double t7063;
  double t7072;
  double t7074;
  double t7075;
  double t7179;
  double t7181;
  double t7182;
  double t7172;
  double t7079;
  double t7083;
  double t7084;
  double t7175;
  double t7178;
  double t7185;
  double t7086;
  double t7087;
  double t7088;
  double t7191;
  double t7208;
  double t7209;
  double t7198;
  double t7085;
  double t7089;
  double t7091;
  double t7204;
  double t7205;
  double t7206;
  double t7207;
  double t7210;
  double t7211;
  double t7212;
  double t7213;
  double t7214;
  double t7215;
  double t7220;
  double t7223;
  double t7227;
  double t7229;
  double t7233;
  double t7235;
  double t7239;
  double t7240;
  double t7241;
  double t7275;
  double t7277;
  double t7274;
  double t7290;
  double t7295;
  double t7297;
  double t7285;
  double t7286;
  double t7288;
  double t7291;
  double t7292;
  double t7293;
  double t7276;
  double t7278;
  double t7279;
  double t7281;
  double t7282;
  double t7283;
  double t7296;
  double t7299;
  double t7300;
  double t7302;
  double t7303;
  double t7304;
  double t7312;
  double t7313;
  double t7314;
  double t7315;
  double t7318;
  double t7319;
  double t7320;
  double t7321;
  double t7327;
  double t7328;
  double t7329;
  double t7336;
  double t7337;
  double t7338;
  double t7346;
  double t7331;
  double t7332;
  double t7333;
  double t7347;
  double t7334;
  double t7339;
  double t7341;
  double t7351;
  double t7353;
  double t7354;
  double t7379;
  double t7390;
  double t7391;
  double t7382;
  double t7383;
  double t7385;
  double t7392;
  double t7394;
  double t7395;
  double t7396;
  double t7408;
  double t7409;
  double t7410;
  double t7411;
  double t7415;
  double t7437;
  double t7438;
  double t7439;
  double t7440;
  double t7441;
  double t7443;
  double t7452;
  double t7460;
  double t7467;
  double t7502;
  double t7503;
  double t7504;
  double t7513;
  double t7514;
  double t7516;
  double t7523;
  double t7507;
  double t7509;
  double t7510;
  double t7525;
  double t7512;
  double t7517;
  double t7518;
  double t7529;
  double t7530;
  double t7531;
  double t7624;
  double t7648;
  double t7649;
  double t7625;
  double t7645;
  double t7646;
  double t7651;
  double t7654;
  double t7656;
  double t7657;
  double t7671;
  double t7672;
  double t7673;
  double t7674;
  double t7675;
  double t7685;
  t171 = Cos(var1[3]);
  t134 = Cos(var1[4]);
  t150 = Sin(var1[3]);
  t176 = Sin(var1[4]);
  t219 = Cos(var1[2]);
  t133 = Sin(var1[2]);
  t220 = t171*t134;
  t222 = -1.*t150*t176;
  t224 = t220 + t222;
  t270 = -1.*t134*t150;
  t273 = -1.*t171*t176;
  t275 = t270 + t273;
  t230 = t219*t224;
  t161 = t134*t150;
  t187 = t171*t176;
  t202 = t161 + t187;
  t292 = -1.*t133*t224;
  t288 = t219*t275;
  t294 = t288 + t292;
  t352 = -1.*t133*t275;
  t329 = t133*t275;
  t332 = t329 + t230;
  t384 = -1.*t171*t134;
  t386 = t150*t176;
  t387 = t384 + t386;
  t353 = -1.*t219*t224;
  t355 = t352 + t353;
  t481 = t219*t171;
  t485 = -1.*t133*t150;
  t489 = t481 + t485;
  t460 = -1.*t171*t133;
  t477 = -1.*t219*t150;
  t480 = t460 + t477;
  t494 = t171*t133;
  t499 = t219*t150;
  t504 = t494 + t499;
  t506 = -1.*t219*t171;
  t507 = t133*t150;
  t514 = t506 + t507;
  t216 = -1.*t133*t202;
  t260 = t216 + t230;
  t316 = 6.4*t260*t294;
  t337 = -1.*t219*t202;
  t340 = t337 + t292;
  t348 = 3.2*t332*t340;
  t362 = t219*t202;
  t368 = t133*t224;
  t369 = t362 + t368;
  t371 = 3.2*t355*t369;
  t390 = t219*t387;
  t391 = t352 + t390;
  t392 = 6.4*t294*t391;
  t411 = -1.*t219*t275;
  t420 = -1.*t133*t387;
  t423 = t411 + t420;
  t424 = 3.2*t332*t423;
  t429 = t133*t387;
  t431 = t288 + t429;
  t432 = 3.2*t355*t431;
  t492 = 20.4*t480*t489;
  t505 = 6.8*t504*t489;
  t518 = 20.4*t480*t514;
  t539 = 6.8*t504*t514;
  t2826 = Cos(var1[5]);
  t2832 = Sin(var1[5]);
  t3191 = t219*t2826;
  t3870 = -1.*t133*t2832;
  t3889 = t3191 + t3870;
  t2828 = -1.*t2826*t133;
  t2895 = -1.*t219*t2832;
  t2919 = t2828 + t2895;
  t4160 = t2826*t133;
  t4198 = t219*t2832;
  t4249 = t4160 + t4198;
  t4292 = -1.*t219*t2826;
  t4326 = t133*t2832;
  t4332 = t4292 + t4326;
  t4381 = Cos(var1[6]);
  t4422 = Sin(var1[6]);
  t4390 = -1.*t4381*t2832;
  t4429 = -1.*t2826*t4422;
  t4443 = t4390 + t4429;
  t4450 = t2826*t4381;
  t4454 = -1.*t2832*t4422;
  t4456 = t4450 + t4454;
  t4677 = t4381*t2832;
  t4679 = t2826*t4422;
  t4689 = t4677 + t4679;
  t4586 = -1.*t133*t4456;
  t4704 = t219*t4456;
  t4488 = -1.*t219*t4456;
  t4750 = t133*t4456;
  t4690 = -1.*t133*t4689;
  t4708 = t4690 + t4704;
  t4528 = t219*t4443;
  t4587 = t4528 + t4586;
  t4720 = t133*t4443;
  t4731 = t4720 + t4704;
  t4713 = -1.*t219*t4689;
  t4715 = t4713 + t4586;
  t4446 = -1.*t133*t4443;
  t4526 = t4446 + t4488;
  t4770 = t219*t4689;
  t4781 = t4770 + t4750;
  t4743 = -1.*t219*t4443;
  t6454 = -1.*t2826*t4381;
  t6506 = t2832*t4422;
  t6572 = t6454 + t6506;
  t4155 = 20.4*t2919*t3889;
  t4274 = 6.8*t4249*t3889;
  t4336 = 20.4*t2919*t4332;
  t4358 = 6.8*t4249*t4332;
  t4851 = 6.4*t4708*t4587;
  t4975 = 3.2*t4731*t4715;
  t5019 = 3.2*t4526*t4781;
  t6574 = t219*t6572;
  t6583 = t4446 + t6574;
  t6595 = 6.4*t4587*t6583;
  t6597 = -1.*t133*t6572;
  t6621 = t4743 + t6597;
  t6622 = 3.2*t4731*t6621;
  t6623 = t133*t6572;
  t6626 = t4528 + t6623;
  t6632 = 3.2*t4526*t6626;
  t540 = t492 + t505 + t518 + t539 + t316 + t348 + t371 + t392 + t424 + t432;
  t2684 = t133*t202;
  t6654 = 6.4*t332*t294;
  t6673 = 3.2*t369*t391;
  t6675 = t2684 + t390;
  t6681 = 3.2*t294*t6675;
  t6687 = t362 + t420;
  t6689 = 3.2*t332*t6687;
  t6694 = 3.2*t260*t431;
  t6695 = 6.4*t391*t431;
  t434 = t316 + t348 + t371 + t392 + t424 + t432;
  t6697 = t6654 + t6673 + t6681 + t6689 + t6694 + t6695;
  t6698 = -0.5*var2[4]*t6697;
  t6636 = t4155 + t4274 + t4336 + t4358 + t4851 + t4975 + t5019 + t6595 + t6622 + t6632;
  t4759 = t133*t4689;
  t6716 = 6.4*t4731*t4587;
  t6717 = 3.2*t4781*t6583;
  t6718 = t4759 + t6574;
  t6719 = 3.2*t4587*t6718;
  t6729 = t4770 + t6597;
  t6732 = 3.2*t4731*t6729;
  t6734 = 3.2*t4708*t6626;
  t6737 = 6.4*t6583*t6626;
  t6633 = t4851 + t4975 + t5019 + t6595 + t6622 + t6632;
  t6738 = t6716 + t6717 + t6719 + t6732 + t6734 + t6737;
  t6739 = -0.5*var2[6]*t6738;
  t6763 = 3.2*t332*t260;
  t6765 = 3.2*t294*t369;
  t6766 = 3.2*t332*t391;
  t6768 = 3.2*t294*t431;
  t6772 = Power(t480,2);
  t6773 = 6.8*t6772;
  t6774 = 6.8*t480*t504;
  t6776 = Power(t489,2);
  t6778 = 6.8*t6776;
  t6782 = 6.8*t489*t514;
  t6791 = Power(t2919,2);
  t6792 = 6.8*t6791;
  t6795 = 6.8*t2919*t4249;
  t6796 = Power(t3889,2);
  t6802 = 6.8*t6796;
  t6803 = 6.8*t3889*t4332;
  t6815 = 3.2*t4731*t4708;
  t6816 = 3.2*t4587*t4781;
  t6817 = 3.2*t4731*t6583;
  t6818 = 3.2*t4587*t6626;
  t6785 = 3.2*t355*t332;
  t6786 = Power(t260,2);
  t6787 = 3.2*t6786;
  t6788 = Power(t294,2);
  t6789 = 3.2*t6788;
  t6790 = 3.2*t340*t369;
  t6805 = 3.2*t4526*t4731;
  t6806 = Power(t4708,2);
  t6809 = 3.2*t6806;
  t6810 = Power(t4587,2);
  t6811 = 3.2*t6810;
  t6812 = 3.2*t4715*t4781;
  t6813 = t6773 + t6774 + t6778 + t6782 + t6785 + t6787 + t6789 + t6790 + t6792 + t6795 + t6802 + t6803 + t6805 + t6809 + t6811 + t6812;
  t6783 = t6773 + t6774 + t6778 + t6782 + t6763 + t6765 + t6766 + t6768;
  t6769 = t6763 + t6765 + t6766 + t6768;
  t6821 = t6792 + t6795 + t6802 + t6803 + t6815 + t6816 + t6817 + t6818;
  t6819 = t6815 + t6816 + t6817 + t6818;
  t6831 = 6.4*t355*t260;
  t6832 = 6.4*t294*t340;
  t6833 = 6.4*t355*t391;
  t6834 = 6.4*t294*t423;
  t6838 = 13.6*t6772;
  t6839 = 13.6*t480*t504;
  t6840 = 13.6*t489*t514;
  t6841 = Power(t514,2);
  t6842 = 13.6*t6841;
  t2823 = t2684 + t353;
  t577 = t411 + t368;
  t4763 = t4759 + t4488;
  t4754 = t4743 + t4750;
  t6853 = 13.6*t6791;
  t6855 = 13.6*t2919*t4249;
  t6856 = 13.6*t3889*t4332;
  t6858 = Power(t4332,2);
  t6860 = 13.6*t6858;
  t6870 = 6.4*t4526*t4708;
  t6871 = 6.4*t4587*t4715;
  t6872 = 6.4*t4526*t6583;
  t6873 = 6.4*t4587*t6621;
  t6844 = t6838 + t6839 + t6840 + t6842 + t6831 + t6832 + t6833 + t6834;
  t6881 = 6.4*t6788;
  t6882 = 6.4*t260*t391;
  t6883 = Power(t391,2);
  t6884 = 6.4*t6883;
  t6885 = 6.4*t294*t6687;
  t6835 = t6831 + t6832 + t6833 + t6834;
  t6887 = t6881 + t6882 + t6884 + t6885;
  t6888 = -0.5*var2[4]*t6887;
  t6876 = t6853 + t6855 + t6856 + t6860 + t6870 + t6871 + t6872 + t6873;
  t6898 = 6.4*t6810;
  t6899 = 6.4*t4708*t6583;
  t6902 = Power(t6583,2);
  t6903 = 6.4*t6902;
  t6904 = 6.4*t4587*t6729;
  t6874 = t6870 + t6871 + t6872 + t6873;
  t6905 = t6898 + t6899 + t6903 + t6904;
  t6906 = -0.5*var2[6]*t6905;
  t6917 = 13.6*t480*t489;
  t6918 = 13.6*t480*t514;
  t6923 = 13.6*t2919*t3889;
  t6926 = 13.6*t2919*t4332;
  t6921 = 6.4*t355*t294;
  t6922 = 6.4*t260*t340;
  t6927 = 6.4*t4526*t4587;
  t6928 = 6.4*t4708*t4715;
  t6929 = t6917 + t6918 + t6921 + t6922 + t6923 + t6926 + t6927 + t6928;
  t6919 = t6917 + t6918 + t316 + t392;
  t6915 = t316 + t392;
  t6933 = t6923 + t6926 + t4851 + t6595;
  t6931 = t4851 + t6595;
  t6951 = -1.*t134;
  t6953 = 1. + t6951;
  t6954 = 0.4*t6953;
  t6955 = 0.64*t134;
  t6956 = t6954 + t6955;
  t6957 = t6956*t150;
  t6958 = 0.24*t171*t176;
  t6959 = t6957 + t6958;
  t6961 = t171*t6956;
  t6962 = -0.24*t150*t176;
  t6963 = t6961 + t6962;
  t6968 = -1.*t6956*t150;
  t6969 = -0.24*t171*t176;
  t6971 = t6968 + t6969;
  t6960 = -1.*t6959*t224;
  t6964 = -1.*t275*t6963;
  t6966 = t6960 + t6964;
  t6967 = 3.2*t355*t6966;
  t6974 = t6959*t224;
  t6975 = t275*t6963;
  t6981 = t6959*t202;
  t6982 = t224*t6963;
  t6986 = t6981 + t6982;
  t6987 = 3.2*t6986*t423;
  t6997 = -0.24*t134*t150;
  t6999 = t6997 + t6969;
  t6990 = -1.*t275*t6959;
  t7002 = 0.24*t171*t134;
  t7003 = t7002 + t6962;
  t6992 = -1.*t6963*t387;
  t6943 = Power(t171,2);
  t6944 = 0.11*t6943;
  t6945 = Power(t150,2);
  t6946 = 0.11*t6945;
  t6947 = t6944 + t6946;
  t6948 = 6.8*t504*t6947;
  t7022 = -1.*t4381;
  t7024 = 1. + t7022;
  t7026 = 0.4*t7024;
  t7027 = 0.64*t4381;
  t7028 = t7026 + t7027;
  t7029 = t7028*t2832;
  t7030 = 0.24*t2826*t4422;
  t7032 = t7029 + t7030;
  t7035 = t2826*t7028;
  t7036 = -0.24*t2832*t4422;
  t7037 = t7035 + t7036;
  t7016 = Power(t2826,2);
  t7017 = 0.11*t7016;
  t7018 = Power(t2832,2);
  t7019 = 0.11*t7018;
  t7020 = t7017 + t7019;
  t7021 = 6.8*t4249*t7020;
  t7034 = -1.*t7032*t4456;
  t7039 = -1.*t4443*t7037;
  t7040 = t7034 + t7039;
  t7042 = t7032*t4689;
  t7043 = t4456*t7037;
  t7044 = t7042 + t7043;
  t7049 = -1.*t7028*t2832;
  t7050 = -0.24*t2826*t4422;
  t7051 = t7049 + t7050;
  t7048 = 3.2*t4526*t7040;
  t7054 = t7032*t4456;
  t7055 = t4443*t7037;
  t7059 = 3.2*t7044*t6621;
  t7077 = -0.24*t4381*t2832;
  t7078 = t7077 + t7050;
  t7062 = -1.*t4443*t7032;
  t7080 = 0.24*t2826*t4381;
  t7081 = t7080 + t7036;
  t7071 = -1.*t7037*t6572;
  t6973 = t6971*t224;
  t6976 = t202*t6963;
  t6979 = t6973 + t6974 + t6975 + t6976;
  t6980 = 3.2*t355*t6979;
  t6988 = -1.*t275*t6971;
  t6991 = -1.*t224*t6963;
  t6993 = t6988 + t6990 + t6991 + t6992;
  t6994 = 3.2*t340*t6993;
  t6995 = t6948 + t6967 + t6980 + t6987 + t6994;
  t7103 = -1.*t171*t6956;
  t7104 = 0.24*t150*t176;
  t7105 = t7103 + t7104;
  t7097 = 3.2*t6966*t391;
  t7000 = t6999*t224;
  t7004 = t202*t7003;
  t7005 = t7000 + t6974 + t6975 + t7004;
  t7099 = 3.2*t6986*t6687;
  t7102 = -1.*t202*t6963;
  t7109 = -1.*t6959*t387;
  t7007 = -1.*t275*t6999;
  t7008 = -1.*t224*t7003;
  t7009 = t7007 + t6990 + t7008 + t6992;
  t7115 = t275*t6959;
  t7129 = -0.24*t171*t134;
  t7130 = t7129 + t7104;
  t7120 = t6963*t387;
  t7006 = 3.2*t355*t7005;
  t7010 = 3.2*t340*t7009;
  t7011 = t6967 + t7006 + t6987 + t7010;
  t7125 = 3.2*t6979*t391;
  t7126 = 3.2*t7005*t391;
  t7127 = -1.*t6999*t224;
  t7128 = -1.*t275*t7003;
  t7133 = -1.*t275*t7130;
  t7134 = -1.*t6971*t387;
  t7136 = -1.*t6999*t387;
  t7137 = t7127 + t6964 + t7102 + t7128 + t7133 + t7134 + t7136 + t7109;
  t7138 = 3.2*t260*t7137;
  t7139 = 3.2*t294*t6993;
  t7140 = 3.2*t294*t7009;
  t7141 = t275*t6971;
  t7142 = t275*t6999;
  t7143 = t6999*t202;
  t7144 = t224*t7003;
  t7145 = t224*t7130;
  t7146 = t7141 + t7142 + t7115 + t7143 + t6982 + t7144 + t7145 + t7120;
  t7147 = 3.2*t294*t7146;
  t7148 = t7097 + t7125 + t7126 + t7099 + t7138 + t7139 + t7140 + t7147;
  t7053 = t7051*t4456;
  t7056 = t4689*t7037;
  t7057 = t7053 + t7054 + t7055 + t7056;
  t7058 = 3.2*t4526*t7057;
  t7060 = -1.*t4443*t7051;
  t7063 = -1.*t4456*t7037;
  t7072 = t7060 + t7062 + t7063 + t7071;
  t7074 = 3.2*t4715*t7072;
  t7075 = t7021 + t7048 + t7058 + t7059 + t7074;
  t7179 = -1.*t2826*t7028;
  t7181 = 0.24*t2832*t4422;
  t7182 = t7179 + t7181;
  t7172 = 3.2*t7040*t6583;
  t7079 = t7078*t4456;
  t7083 = t4689*t7081;
  t7084 = t7079 + t7054 + t7055 + t7083;
  t7175 = 3.2*t7044*t6729;
  t7178 = -1.*t4689*t7037;
  t7185 = -1.*t7032*t6572;
  t7086 = -1.*t4443*t7078;
  t7087 = -1.*t4456*t7081;
  t7088 = t7086 + t7062 + t7087 + t7071;
  t7191 = t4443*t7032;
  t7208 = -0.24*t2826*t4381;
  t7209 = t7208 + t7181;
  t7198 = t7037*t6572;
  t7085 = 3.2*t4526*t7084;
  t7089 = 3.2*t4715*t7088;
  t7091 = t7048 + t7085 + t7059 + t7089;
  t7204 = 3.2*t7057*t6583;
  t7205 = 3.2*t7084*t6583;
  t7206 = -1.*t7078*t4456;
  t7207 = -1.*t4443*t7081;
  t7210 = -1.*t4443*t7209;
  t7211 = -1.*t7051*t6572;
  t7212 = -1.*t7078*t6572;
  t7213 = t7206 + t7039 + t7178 + t7207 + t7210 + t7211 + t7212 + t7185;
  t7214 = 3.2*t4708*t7213;
  t7215 = 3.2*t4587*t7072;
  t7220 = 3.2*t4587*t7088;
  t7223 = t4443*t7051;
  t7227 = t4443*t7078;
  t7229 = t7078*t4689;
  t7233 = t4456*t7081;
  t7235 = t4456*t7209;
  t7239 = t7223 + t7227 + t7191 + t7229 + t7043 + t7233 + t7235 + t7198;
  t7240 = 3.2*t4587*t7239;
  t7241 = t7172 + t7204 + t7205 + t7175 + t7214 + t7215 + t7220 + t7240;
  t7275 = 3.2*t294*t6966;
  t7277 = 3.2*t6986*t391;
  t7274 = 6.8*t514*t6947;
  t7290 = 6.8*t4332*t7020;
  t7295 = 3.2*t4587*t7040;
  t7297 = 3.2*t7044*t6583;
  t7285 = -2.88*t219;
  t7286 = 3.2*t340*t6966;
  t7288 = 3.2*t355*t6986;
  t7291 = 3.2*t4715*t7040;
  t7292 = 3.2*t4526*t7044;
  t7293 = t7285 + t7274 + t7286 + t7288 + t7290 + t7291 + t7292;
  t7276 = 3.2*t294*t6979;
  t7278 = 3.2*t260*t6993;
  t7279 = t7274 + t7275 + t7276 + t7277 + t7278;
  t7281 = 3.2*t294*t7005;
  t7282 = 3.2*t260*t7009;
  t7283 = t7275 + t7281 + t7277 + t7282;
  t7296 = 3.2*t4587*t7057;
  t7299 = 3.2*t4708*t7072;
  t7300 = t7290 + t7295 + t7296 + t7297 + t7299;
  t7302 = 3.2*t4587*t7084;
  t7303 = 3.2*t4708*t7088;
  t7304 = t7295 + t7302 + t7297 + t7303;
  t7312 = 0.748*t504;
  t7313 = t6956*t176;
  t7314 = -0.24*t134*t176;
  t7315 = t7313 + t7314;
  t7318 = t6956*t134;
  t7319 = Power(t176,2);
  t7320 = 0.24*t7319;
  t7321 = t7318 + t7320;
  t7327 = 3.2*t7315*t355;
  t7328 = 3.2*t7321*t423;
  t7329 = t7312 + t7327 + t7328;
  t7336 = Power(t134,2);
  t7337 = -0.24*t7336;
  t7338 = t7318 + t7337;
  t7346 = 3.2*t7315*t391;
  t7331 = -1.*t6956*t176;
  t7332 = 0.24*t134*t176;
  t7333 = t7331 + t7332;
  t7347 = 3.2*t7321*t6687;
  t7334 = 3.2*t7333*t355;
  t7339 = 3.2*t7338*t340;
  t7341 = t7327 + t7334 + t7339 + t7328;
  t7351 = 3.2*t7338*t294;
  t7353 = 3.2*t7333*t391;
  t7354 = t7351 + t7346 + t7353 + t7347;
  t7379 = 0.748*t514;
  t7390 = 3.2*t7315*t294;
  t7391 = 3.2*t7321*t391;
  t7382 = 3.2*t7321*t355;
  t7383 = 3.2*t7315*t340;
  t7385 = t7379 + t7382 + t7383;
  t7392 = t7379 + t7390 + t7391;
  t7394 = 3.2*t7338*t260;
  t7395 = 3.2*t7333*t294;
  t7396 = t7394 + t7390 + t7395 + t7391;
  t7408 = -0.384*var2[2]*t423;
  t7409 = -0.384*var2[3]*t6687;
  t7410 = -0.384*var2[4]*t6687;
  t7411 = t7408 + t7409 + t7410;
  t7415 = var2[1]*t7411;
  t7437 = -0.384*var2[1]*t391;
  t7438 = 0.748*t4249;
  t7439 = t7028*t4422;
  t7440 = -0.24*t4381*t4422;
  t7441 = t7439 + t7440;
  t7443 = t7028*t4381;
  t7452 = Power(t4422,2);
  t7460 = 0.24*t7452;
  t7467 = t7443 + t7460;
  t7502 = 3.2*t7441*t4526;
  t7503 = 3.2*t7467*t6621;
  t7504 = t7438 + t7502 + t7503;
  t7513 = Power(t4381,2);
  t7514 = -0.24*t7513;
  t7516 = t7443 + t7514;
  t7523 = 3.2*t7441*t6583;
  t7507 = -1.*t7028*t4422;
  t7509 = 0.24*t4381*t4422;
  t7510 = t7507 + t7509;
  t7525 = 3.2*t7467*t6729;
  t7512 = 3.2*t7510*t4526;
  t7517 = 3.2*t7516*t4715;
  t7518 = t7502 + t7512 + t7517 + t7503;
  t7529 = 3.2*t7516*t4587;
  t7530 = 3.2*t7510*t6583;
  t7531 = t7529 + t7523 + t7530 + t7525;
  t7624 = 0.748*t4332;
  t7648 = 3.2*t7441*t4587;
  t7649 = 3.2*t7467*t6583;
  t7625 = 3.2*t7467*t4526;
  t7645 = 3.2*t7441*t4715;
  t7646 = t7624 + t7625 + t7645;
  t7651 = t7624 + t7648 + t7649;
  t7654 = 3.2*t7516*t4708;
  t7656 = 3.2*t7510*t4587;
  t7657 = t7654 + t7648 + t7656 + t7649;
  t7671 = -0.384*var2[2]*t6621;
  t7672 = -0.384*var2[5]*t6729;
  t7673 = -0.384*var2[6]*t6729;
  t7674 = t7671 + t7672 + t7673;
  t7675 = var2[1]*t7674;
  t7685 = -0.384*var2[1]*t6583;
  p_output1[0]=var2[1]*(-0.5*(9.6*t260*t340 + 9.6*t294*t355 + 3.2*t2823*t369 + t4155 + t4274 + t4336 + t4358 + 9.6*t4526*t4587 + 9.6*t4708*t4715 + 3.2*t4731*t4754 + 3.2*t4763*t4781 + t492 + t505 + t518 + t539 + 3.2*t332*t577)*var2[2] - 0.5*t540*var2[3] - 0.5*t434*var2[4] - 0.5*t6636*var2[5] - 0.5*t6633*var2[6]);
  p_output1[1]=var2[1]*(t6698 - 0.5*t540*var2[2] - 0.5*(t492 + t505 + t518 + t539 + t6654 + t6673 + t6681 + t6689 + t6694 + t6695)*var2[3]);
  p_output1[2]=var2[1]*(t6698 - 0.5*t434*var2[2] - 0.5*t6697*var2[3]);
  p_output1[3]=var2[1]*(t6739 - 0.5*t6636*var2[2] - 0.5*(t4155 + t4274 + t4336 + t4358 + t6716 + t6717 + t6719 + t6732 + t6734 + t6737)*var2[5]);
  p_output1[4]=var2[1]*(t6739 - 0.5*t6633*var2[2] - 0.5*t6738*var2[5]);
  p_output1[5]=-0.5*t6813*var2[2] - 0.5*t6783*var2[3] - 0.5*t6769*var2[4] - 0.5*t6821*var2[5] - 0.5*t6819*var2[6];
  p_output1[6]=-0.5*t6813*var2[1];
  p_output1[7]=-0.5*t6783*var2[1];
  p_output1[8]=-0.5*t6769*var2[1];
  p_output1[9]=-0.5*t6821*var2[1];
  p_output1[10]=-0.5*t6819*var2[1];
  p_output1[11]=var2[1]*(-0.5*(6.4*t260*t2823 + 6.4*Power(t340,2) + 6.4*Power(t355,2) + 6.4*Power(t4526,2) + 6.4*Power(t4715,2) + 6.4*t4587*t4754 + 6.4*t4708*t4763 + 6.4*t294*t577 + t6838 + t6839 + t6840 + t6842 + t6853 + t6855 + t6856 + t6860)*var2[2] - 0.5*t6844*var2[3] - 0.5*t6835*var2[4] - 0.5*t6876*var2[5] - 0.5*t6874*var2[6]);
  p_output1[12]=var2[1]*(t6888 - 0.5*t6844*var2[2] - 0.5*(t6838 + t6839 + t6840 + t6842 + t6881 + t6882 + t6884 + t6885)*var2[3]);
  p_output1[13]=var2[1]*(t6888 - 0.5*t6835*var2[2] - 0.5*t6887*var2[3]);
  p_output1[14]=var2[1]*(t6906 - 0.5*t6876*var2[2] - 0.5*(t6853 + t6855 + t6856 + t6860 + t6898 + t6899 + t6903 + t6904)*var2[5]);
  p_output1[15]=var2[1]*(t6906 - 0.5*t6874*var2[2] - 0.5*t6905*var2[5]);
  p_output1[16]=-0.5*t6929*var2[2] - 0.5*t6919*var2[3] - 0.5*t6915*var2[4] - 0.5*t6933*var2[5] - 0.5*t6931*var2[6];
  p_output1[17]=-0.5*t6929*var2[1];
  p_output1[18]=-0.5*t6919*var2[1];
  p_output1[19]=-0.5*t6915*var2[1];
  p_output1[20]=-0.5*t6933*var2[1];
  p_output1[21]=-0.5*t6931*var2[1];
  p_output1[22]=var2[1]*(-0.5*(2.88*t133 + t6948 + 3.2*t2823*t6966 + 3.2*t577*t6986 + t7021 + 3.2*t4763*t7040 + 3.2*t4754*t7044)*var2[2] - 0.5*t6995*var2[3] - 0.5*t7011*var2[4] - 0.5*t7075*var2[5] - 0.5*t7091*var2[6]);
  p_output1[23]=var2[1]*(-0.5*t6995*var2[2] - 0.5*(t6948 + 6.4*t391*t6979 + 6.4*t294*t6993 + t7097 + t7099 + 3.2*t260*(-2.*t275*t6963 - 1.*t224*t6971 - 2.*t387*t6971 + t7102 - 1.*t275*t7105 + t7109) + 3.2*t294*(2.*t224*t6963 + t202*t6971 + 2.*t275*t6971 + t224*t7105 + t7115 + t7120))*var2[3] - 0.5*t7148*var2[4]);
  p_output1[24]=var2[1]*(-0.5*t7011*var2[2] - 0.5*t7148*var2[3] - 0.5*(6.4*t391*t7005 + 6.4*t294*t7009 + t7097 + t7099 + 3.2*t260*(-2.*t387*t6999 - 2.*t275*t7003 + t7102 + t7109 + t7127 + t7133) + 3.2*t294*(2.*t275*t6999 + 2.*t224*t7003 + t7115 + t7120 + t7143 + t7145))*var2[4]);
  p_output1[25]=var2[1]*(-0.5*t7075*var2[2] - 0.5*(t7021 + 6.4*t6583*t7057 + 6.4*t4587*t7072 + t7172 + t7175 + 3.2*t4708*(-2.*t4443*t7037 - 1.*t4456*t7051 - 2.*t6572*t7051 + t7178 - 1.*t4443*t7182 + t7185) + 3.2*t4587*(2.*t4456*t7037 + 2.*t4443*t7051 + t4689*t7051 + t4456*t7182 + t7191 + t7198))*var2[5] - 0.5*t7241*var2[6]);
  p_output1[26]=var2[1]*(-0.5*t7091*var2[2] - 0.5*t7241*var2[5] - 0.5*(6.4*t6583*t7084 + 6.4*t4587*t7088 + t7172 + t7175 + 3.2*t4708*(-2.*t6572*t7078 - 2.*t4443*t7081 + t7178 + t7185 + t7206 + t7210) + 3.2*t4587*(2.*t4443*t7078 + 2.*t4456*t7081 + t7191 + t7198 + t7229 + t7235))*var2[6]);
  p_output1[27]=-0.5*t7293*var2[2] - 0.5*t7279*var2[3] - 0.5*t7283*var2[4] - 0.5*t7300*var2[5] - 0.5*t7304*var2[6];
  p_output1[28]=-0.5*t7293*var2[1];
  p_output1[29]=-0.5*t7279*var2[1];
  p_output1[30]=-0.5*t7283*var2[1];
  p_output1[31]=-0.5*t7300*var2[1];
  p_output1[32]=-0.5*t7304*var2[1];
  p_output1[33]=var2[1]*(-0.5*(t7312 + 3.2*t2823*t7315 + 3.2*t577*t7321)*var2[2] - 0.5*t7329*var2[3] - 0.5*t7341*var2[4]);
  p_output1[34]=var2[1]*(-0.5*t7329*var2[2] - 0.5*(t7312 + t7346 + t7347)*var2[3] - 0.5*t7354*var2[4]);
  p_output1[35]=var2[1]*(-0.5*t7341*var2[2] - 0.5*t7354*var2[3] - 0.5*(3.2*t260*t7333 + 6.4*t391*t7333 + 3.2*t294*(-1.*t134*t6956 + 0.24*t7336) + 6.4*t294*t7338 + t7346 + t7347)*var2[4]);
  p_output1[36]=-0.5*t7385*var2[2] - 0.5*t7392*var2[3] - 0.5*t7396*var2[4];
  p_output1[37]=-0.5*t7385*var2[1];
  p_output1[38]=-0.5*t7392*var2[1];
  p_output1[39]=-0.5*t7396*var2[1];
  p_output1[40]=var2[1]*(-0.384*t577*var2[2] - 0.384*t423*var2[3] - 0.384*t423*var2[4]);
  p_output1[41]=t7415;
  p_output1[42]=t7415;
  p_output1[43]=-0.384*t355*var2[2] - 0.384*t391*var2[3] - 0.384*t391*var2[4];
  p_output1[44]=-0.384*t355*var2[1];
  p_output1[45]=t7437;
  p_output1[46]=t7437;
  p_output1[47]=var2[1]*(-0.5*(t7438 + 3.2*t4763*t7441 + 3.2*t4754*t7467)*var2[2] - 0.5*t7504*var2[5] - 0.5*t7518*var2[6]);
  p_output1[48]=var2[1]*(-0.5*t7504*var2[2] - 0.5*(t7438 + t7523 + t7525)*var2[5] - 0.5*t7531*var2[6]);
  p_output1[49]=var2[1]*(-0.5*t7518*var2[2] - 0.5*t7531*var2[5] - 0.5*(3.2*t4708*t7510 + 6.4*t6583*t7510 + 3.2*t4587*(-1.*t4381*t7028 + 0.24*t7513) + 6.4*t4587*t7516 + t7523 + t7525)*var2[6]);
  p_output1[50]=-0.5*t7646*var2[2] - 0.5*t7651*var2[5] - 0.5*t7657*var2[6];
  p_output1[51]=-0.5*t7646*var2[1];
  p_output1[52]=-0.5*t7651*var2[1];
  p_output1[53]=-0.5*t7657*var2[1];
  p_output1[54]=var2[1]*(-0.384*t4754*var2[2] - 0.384*t6621*var2[5] - 0.384*t6621*var2[6]);
  p_output1[55]=t7675;
  p_output1[56]=t7675;
  p_output1[57]=-0.384*t4526*var2[2] - 0.384*t6583*var2[5] - 0.384*t6583*var2[6];
  p_output1[58]=-0.384*t4526*var2[1];
  p_output1[59]=t7685;
  p_output1[60]=t7685;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 61, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce1_vec2_five_link_walker.hh"

namespace RightStance
{

void J_Ce1_vec2_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
