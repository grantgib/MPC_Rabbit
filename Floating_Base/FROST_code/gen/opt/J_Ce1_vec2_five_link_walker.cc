/*
 * Automatically Generated from Mathematica.
 * Tue 17 Mar 2020 21:35:19 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t1025;
  double t265;
  double t577;
  double t1059;
  double t1086;
  double t180;
  double t1918;
  double t2112;
  double t2131;
  double t2211;
  double t2218;
  double t2237;
  double t2198;
  double t584;
  double t1070;
  double t1072;
  double t2284;
  double t2244;
  double t2288;
  double t2310;
  double t2296;
  double t2297;
  double t2338;
  double t2343;
  double t2355;
  double t2322;
  double t2325;
  double t2408;
  double t2409;
  double t2410;
  double t2392;
  double t2393;
  double t2394;
  double t2412;
  double t2413;
  double t2414;
  double t2418;
  double t2419;
  double t2420;
  double t1082;
  double t2206;
  double t2289;
  double t2298;
  double t2299;
  double t2307;
  double t2326;
  double t2327;
  double t2328;
  double t2329;
  double t2357;
  double t2359;
  double t2363;
  double t2364;
  double t2365;
  double t2369;
  double t2376;
  double t2377;
  double t2378;
  double t2379;
  double t2411;
  double t2417;
  double t2421;
  double t2430;
  double t2471;
  double t2484;
  double t2497;
  double t2498;
  double t2500;
  double t2472;
  double t2486;
  double t2493;
  double t2502;
  double t2526;
  double t2527;
  double t2530;
  double t2765;
  double t2826;
  double t2888;
  double t2977;
  double t2889;
  double t3120;
  double t3127;
  double t3152;
  double t3203;
  double t3232;
  double t3771;
  double t3857;
  double t3870;
  double t3601;
  double t4115;
  double t3321;
  double t4516;
  double t3889;
  double t4155;
  double t3336;
  double t3636;
  double t4292;
  double t4348;
  double t4160;
  double t4235;
  double t3150;
  double t3322;
  double t4804;
  double t4952;
  double t4397;
  double t5091;
  double t5092;
  double t5093;
  double t2501;
  double t2529;
  double t2856;
  double t2857;
  double t5014;
  double t5044;
  double t5062;
  double t5114;
  double t5117;
  double t5118;
  double t5119;
  double t5122;
  double t5130;
  double t5136;
  double t5137;
  double t5138;
  double t2448;
  double t2468;
  double t5156;
  double t5157;
  double t5158;
  double t5159;
  double t5160;
  double t5161;
  double t5162;
  double t5163;
  double t2383;
  double t5164;
  double t5165;
  double t5141;
  double t4671;
  double t5195;
  double t5196;
  double t5197;
  double t5208;
  double t5215;
  double t5216;
  double t5217;
  double t5218;
  double t5139;
  double t5219;
  double t5220;
  double t5244;
  double t5253;
  double t5255;
  double t5257;
  double t5260;
  double t5270;
  double t5271;
  double t5272;
  double t5273;
  double t5275;
  double t5294;
  double t5296;
  double t5297;
  double t5298;
  double t5299;
  double t5301;
  double t5345;
  double t5349;
  double t5350;
  double t5401;
  double t5278;
  double t5279;
  double t5282;
  double t5291;
  double t5292;
  double t5293;
  double t5306;
  double t5315;
  double t5329;
  double t5338;
  double t5340;
  double t5341;
  double t5342;
  double t5276;
  double t5258;
  double t5421;
  double t5419;
  double t5486;
  double t5493;
  double t5504;
  double t5507;
  double t5521;
  double t5531;
  double t5532;
  double t5537;
  double t5538;
  double t2469;
  double t2457;
  double t4680;
  double t4531;
  double t5557;
  double t5558;
  double t5562;
  double t5563;
  double t5604;
  double t5621;
  double t5622;
  double t5623;
  double t5667;
  double t5543;
  double t7947;
  double t7965;
  double t7977;
  double t8030;
  double t8040;
  double t5508;
  double t8119;
  double t8120;
  double t5670;
  double t8320;
  double t8345;
  double t8356;
  double t8374;
  double t8376;
  double t5668;
  double t8377;
  double t8389;
  double t9133;
  double t9181;
  double t9482;
  double t9554;
  double t9333;
  double t9480;
  double t9615;
  double t9628;
  double t9693;
  double t9192;
  double t9120;
  double t11712;
  double t9820;
  double t11737;
  double t11738;
  double t11745;
  double t11765;
  double t11812;
  double t11824;
  double t11845;
  double t11865;
  double t11879;
  double t11880;
  double t11883;
  double t11909;
  double t11922;
  double t11923;
  double t11878;
  double t11886;
  double t11894;
  double t11895;
  double t11947;
  double t11972;
  double t11978;
  double t11979;
  double t11983;
  double t11992;
  double t12025;
  double t12027;
  double t12004;
  double t12029;
  double t12030;
  double t12011;
  double t11727;
  double t11730;
  double t11732;
  double t11733;
  double t11734;
  double t11736;
  double t12115;
  double t12124;
  double t12125;
  double t12126;
  double t12130;
  double t12143;
  double t12144;
  double t12150;
  double t12154;
  double t12155;
  double t12159;
  double t12087;
  double t12099;
  double t12100;
  double t12103;
  double t12104;
  double t12105;
  double t12151;
  double t12160;
  double t12161;
  double t12163;
  double t12164;
  double t12165;
  double t12170;
  double t12183;
  double t12184;
  double t12169;
  double t12186;
  double t12191;
  double t12201;
  double t12219;
  double t12220;
  double t12203;
  double t12222;
  double t12224;
  double t12207;
  double t11924;
  double t11973;
  double t11974;
  double t11975;
  double t12000;
  double t12009;
  double t12016;
  double t12017;
  double t12022;
  double t12247;
  double t12248;
  double t12249;
  double t12239;
  double t12028;
  double t12031;
  double t12049;
  double t12241;
  double t12246;
  double t12252;
  double t12065;
  double t12069;
  double t12070;
  double t12257;
  double t12270;
  double t12271;
  double t12261;
  double t12058;
  double t12074;
  double t12075;
  double t12266;
  double t12267;
  double t12268;
  double t12269;
  double t12272;
  double t12273;
  double t12274;
  double t12275;
  double t12276;
  double t12277;
  double t12278;
  double t12279;
  double t12280;
  double t12281;
  double t12282;
  double t12283;
  double t12284;
  double t12285;
  double t12286;
  double t12185;
  double t12195;
  double t12199;
  double t12200;
  double t12202;
  double t12206;
  double t12208;
  double t12209;
  double t12212;
  double t12313;
  double t12314;
  double t12315;
  double t12307;
  double t12221;
  double t12225;
  double t12226;
  double t12309;
  double t12312;
  double t12318;
  double t12228;
  double t12229;
  double t12230;
  double t12323;
  double t12336;
  double t12337;
  double t12327;
  double t12227;
  double t12231;
  double t12232;
  double t12332;
  double t12333;
  double t12334;
  double t12335;
  double t12338;
  double t12339;
  double t12340;
  double t12341;
  double t12342;
  double t12343;
  double t12344;
  double t12345;
  double t12346;
  double t12347;
  double t12348;
  double t12349;
  double t12350;
  double t12351;
  double t12352;
  double t12373;
  double t12375;
  double t12372;
  double t12386;
  double t12391;
  double t12393;
  double t12383;
  double t12384;
  double t12385;
  double t12387;
  double t12388;
  double t12389;
  double t12374;
  double t12376;
  double t12377;
  double t12379;
  double t12380;
  double t12381;
  double t12392;
  double t12394;
  double t12395;
  double t12397;
  double t12398;
  double t12399;
  double t12407;
  double t12408;
  double t12409;
  double t12410;
  double t12412;
  double t12413;
  double t12414;
  double t12415;
  double t12419;
  double t12420;
  double t12421;
  double t12427;
  double t12428;
  double t12429;
  double t12436;
  double t12423;
  double t12424;
  double t12425;
  double t12437;
  double t12426;
  double t12430;
  double t12431;
  double t12440;
  double t12441;
  double t12442;
  double t12459;
  double t12464;
  double t12465;
  double t12460;
  double t12461;
  double t12462;
  double t12466;
  double t12468;
  double t12469;
  double t12470;
  double t12481;
  double t12482;
  double t12483;
  double t12484;
  double t12485;
  double t12491;
  double t12492;
  double t12493;
  double t12494;
  double t12495;
  double t12497;
  double t12498;
  double t12499;
  double t12500;
  double t12504;
  double t12505;
  double t12506;
  double t12512;
  double t12513;
  double t12514;
  double t12521;
  double t12508;
  double t12509;
  double t12510;
  double t12522;
  double t12511;
  double t12515;
  double t12516;
  double t12525;
  double t12526;
  double t12527;
  double t12544;
  double t12549;
  double t12550;
  double t12545;
  double t12546;
  double t12547;
  double t12551;
  double t12553;
  double t12554;
  double t12555;
  double t12566;
  double t12567;
  double t12568;
  double t12569;
  double t12570;
  double t12576;
  t1025 = Cos(var1[3]);
  t265 = Cos(var1[4]);
  t577 = Sin(var1[3]);
  t1059 = Sin(var1[4]);
  t1086 = Cos(var1[2]);
  t180 = Sin(var1[2]);
  t1918 = t1025*t265;
  t2112 = -1.*t577*t1059;
  t2131 = t1918 + t2112;
  t2211 = -1.*t265*t577;
  t2218 = -1.*t1025*t1059;
  t2237 = t2211 + t2218;
  t2198 = t1086*t2131;
  t584 = t265*t577;
  t1070 = t1025*t1059;
  t1072 = t584 + t1070;
  t2284 = -1.*t180*t2131;
  t2244 = t1086*t2237;
  t2288 = t2244 + t2284;
  t2310 = -1.*t180*t2237;
  t2296 = t180*t2237;
  t2297 = t2296 + t2198;
  t2338 = -1.*t1025*t265;
  t2343 = t577*t1059;
  t2355 = t2338 + t2343;
  t2322 = -1.*t1086*t2131;
  t2325 = t2310 + t2322;
  t2408 = t1086*t1025;
  t2409 = -1.*t180*t577;
  t2410 = t2408 + t2409;
  t2392 = -1.*t1025*t180;
  t2393 = -1.*t1086*t577;
  t2394 = t2392 + t2393;
  t2412 = t1025*t180;
  t2413 = t1086*t577;
  t2414 = t2412 + t2413;
  t2418 = -1.*t1086*t1025;
  t2419 = t180*t577;
  t2420 = t2418 + t2419;
  t1082 = -1.*t180*t1072;
  t2206 = t1082 + t2198;
  t2289 = 6.4*t2206*t2288;
  t2298 = -1.*t1086*t1072;
  t2299 = t2298 + t2284;
  t2307 = 3.2*t2297*t2299;
  t2326 = t1086*t1072;
  t2327 = t180*t2131;
  t2328 = t2326 + t2327;
  t2329 = 3.2*t2325*t2328;
  t2357 = t1086*t2355;
  t2359 = t2310 + t2357;
  t2363 = 6.4*t2288*t2359;
  t2364 = -1.*t1086*t2237;
  t2365 = -1.*t180*t2355;
  t2369 = t2364 + t2365;
  t2376 = 3.2*t2297*t2369;
  t2377 = t180*t2355;
  t2378 = t2244 + t2377;
  t2379 = 3.2*t2325*t2378;
  t2411 = 20.4*t2394*t2410;
  t2417 = 6.8*t2414*t2410;
  t2421 = 20.4*t2394*t2420;
  t2430 = 6.8*t2414*t2420;
  t2471 = Cos(var1[5]);
  t2484 = Sin(var1[5]);
  t2497 = t1086*t2471;
  t2498 = -1.*t180*t2484;
  t2500 = t2497 + t2498;
  t2472 = -1.*t2471*t180;
  t2486 = -1.*t1086*t2484;
  t2493 = t2472 + t2486;
  t2502 = t2471*t180;
  t2526 = t1086*t2484;
  t2527 = t2502 + t2526;
  t2530 = -1.*t1086*t2471;
  t2765 = t180*t2484;
  t2826 = t2530 + t2765;
  t2888 = Cos(var1[6]);
  t2977 = Sin(var1[6]);
  t2889 = -1.*t2888*t2484;
  t3120 = -1.*t2471*t2977;
  t3127 = t2889 + t3120;
  t3152 = t2471*t2888;
  t3203 = -1.*t2484*t2977;
  t3232 = t3152 + t3203;
  t3771 = t2888*t2484;
  t3857 = t2471*t2977;
  t3870 = t3771 + t3857;
  t3601 = -1.*t180*t3232;
  t4115 = t1086*t3232;
  t3321 = -1.*t1086*t3232;
  t4516 = t180*t3232;
  t3889 = -1.*t180*t3870;
  t4155 = t3889 + t4115;
  t3336 = t1086*t3127;
  t3636 = t3336 + t3601;
  t4292 = t180*t3127;
  t4348 = t4292 + t4115;
  t4160 = -1.*t1086*t3870;
  t4235 = t4160 + t3601;
  t3150 = -1.*t180*t3127;
  t3322 = t3150 + t3321;
  t4804 = t1086*t3870;
  t4952 = t4804 + t4516;
  t4397 = -1.*t1086*t3127;
  t5091 = -1.*t2471*t2888;
  t5092 = t2484*t2977;
  t5093 = t5091 + t5092;
  t2501 = 20.4*t2493*t2500;
  t2529 = 6.8*t2527*t2500;
  t2856 = 20.4*t2493*t2826;
  t2857 = 6.8*t2527*t2826;
  t5014 = 6.4*t4155*t3636;
  t5044 = 3.2*t4348*t4235;
  t5062 = 3.2*t3322*t4952;
  t5114 = t1086*t5093;
  t5117 = t3150 + t5114;
  t5118 = 6.4*t3636*t5117;
  t5119 = -1.*t180*t5093;
  t5122 = t4397 + t5119;
  t5130 = 3.2*t4348*t5122;
  t5136 = t180*t5093;
  t5137 = t3336 + t5136;
  t5138 = 3.2*t3322*t5137;
  t2448 = t2411 + t2417 + t2421 + t2430 + t2289 + t2307 + t2329 + t2363 + t2376 + t2379;
  t2468 = t180*t1072;
  t5156 = 6.4*t2297*t2288;
  t5157 = 3.2*t2328*t2359;
  t5158 = t2468 + t2357;
  t5159 = 3.2*t2288*t5158;
  t5160 = t2326 + t2365;
  t5161 = 3.2*t2297*t5160;
  t5162 = 3.2*t2206*t2378;
  t5163 = 6.4*t2359*t2378;
  t2383 = t2289 + t2307 + t2329 + t2363 + t2376 + t2379;
  t5164 = t5156 + t5157 + t5159 + t5161 + t5162 + t5163;
  t5165 = -0.5*var2[4]*t5164;
  t5141 = t2501 + t2529 + t2856 + t2857 + t5014 + t5044 + t5062 + t5118 + t5130 + t5138;
  t4671 = t180*t3870;
  t5195 = 6.4*t4348*t3636;
  t5196 = 3.2*t4952*t5117;
  t5197 = t4671 + t5114;
  t5208 = 3.2*t3636*t5197;
  t5215 = t4804 + t5119;
  t5216 = 3.2*t4348*t5215;
  t5217 = 3.2*t4155*t5137;
  t5218 = 6.4*t5117*t5137;
  t5139 = t5014 + t5044 + t5062 + t5118 + t5130 + t5138;
  t5219 = t5195 + t5196 + t5208 + t5216 + t5217 + t5218;
  t5220 = -0.5*var2[6]*t5219;
  t5244 = 3.2*t2297*t2206;
  t5253 = 3.2*t2288*t2328;
  t5255 = 3.2*t2297*t2359;
  t5257 = 3.2*t2288*t2378;
  t5260 = Power(t2394,2);
  t5270 = 6.8*t5260;
  t5271 = 6.8*t2394*t2414;
  t5272 = Power(t2410,2);
  t5273 = 6.8*t5272;
  t5275 = 6.8*t2410*t2420;
  t5294 = Power(t2493,2);
  t5296 = 6.8*t5294;
  t5297 = 6.8*t2493*t2527;
  t5298 = Power(t2500,2);
  t5299 = 6.8*t5298;
  t5301 = 6.8*t2500*t2826;
  t5345 = 3.2*t4348*t4155;
  t5349 = 3.2*t3636*t4952;
  t5350 = 3.2*t4348*t5117;
  t5401 = 3.2*t3636*t5137;
  t5278 = 3.2*t2325*t2297;
  t5279 = Power(t2206,2);
  t5282 = 3.2*t5279;
  t5291 = Power(t2288,2);
  t5292 = 3.2*t5291;
  t5293 = 3.2*t2299*t2328;
  t5306 = 3.2*t3322*t4348;
  t5315 = Power(t4155,2);
  t5329 = 3.2*t5315;
  t5338 = Power(t3636,2);
  t5340 = 3.2*t5338;
  t5341 = 3.2*t4235*t4952;
  t5342 = t5270 + t5271 + t5273 + t5275 + t5278 + t5282 + t5292 + t5293 + t5296 + t5297 + t5299 + t5301 + t5306 + t5329 + t5340 + t5341;
  t5276 = t5270 + t5271 + t5273 + t5275 + t5244 + t5253 + t5255 + t5257;
  t5258 = t5244 + t5253 + t5255 + t5257;
  t5421 = t5296 + t5297 + t5299 + t5301 + t5345 + t5349 + t5350 + t5401;
  t5419 = t5345 + t5349 + t5350 + t5401;
  t5486 = 6.4*t2325*t2206;
  t5493 = 6.4*t2288*t2299;
  t5504 = 6.4*t2325*t2359;
  t5507 = 6.4*t2288*t2369;
  t5521 = 13.6*t5260;
  t5531 = 13.6*t2394*t2414;
  t5532 = 13.6*t2410*t2420;
  t5537 = Power(t2420,2);
  t5538 = 13.6*t5537;
  t2469 = t2468 + t2322;
  t2457 = t2364 + t2327;
  t4680 = t4671 + t3321;
  t4531 = t4397 + t4516;
  t5557 = 13.6*t5294;
  t5558 = 13.6*t2493*t2527;
  t5562 = 13.6*t2500*t2826;
  t5563 = Power(t2826,2);
  t5604 = 13.6*t5563;
  t5621 = 6.4*t3322*t4155;
  t5622 = 6.4*t3636*t4235;
  t5623 = 6.4*t3322*t5117;
  t5667 = 6.4*t3636*t5122;
  t5543 = t5521 + t5531 + t5532 + t5538 + t5486 + t5493 + t5504 + t5507;
  t7947 = 6.4*t5291;
  t7965 = 6.4*t2206*t2359;
  t7977 = Power(t2359,2);
  t8030 = 6.4*t7977;
  t8040 = 6.4*t2288*t5160;
  t5508 = t5486 + t5493 + t5504 + t5507;
  t8119 = t7947 + t7965 + t8030 + t8040;
  t8120 = -0.5*var2[4]*t8119;
  t5670 = t5557 + t5558 + t5562 + t5604 + t5621 + t5622 + t5623 + t5667;
  t8320 = 6.4*t5338;
  t8345 = 6.4*t4155*t5117;
  t8356 = Power(t5117,2);
  t8374 = 6.4*t8356;
  t8376 = 6.4*t3636*t5215;
  t5668 = t5621 + t5622 + t5623 + t5667;
  t8377 = t8320 + t8345 + t8374 + t8376;
  t8389 = -0.5*var2[6]*t8377;
  t9133 = 13.6*t2394*t2410;
  t9181 = 13.6*t2394*t2420;
  t9482 = 13.6*t2493*t2500;
  t9554 = 13.6*t2493*t2826;
  t9333 = 6.4*t2325*t2288;
  t9480 = 6.4*t2206*t2299;
  t9615 = 6.4*t3322*t3636;
  t9628 = 6.4*t4155*t4235;
  t9693 = t9133 + t9181 + t9333 + t9480 + t9482 + t9554 + t9615 + t9628;
  t9192 = t9133 + t9181 + t2289 + t2363;
  t9120 = t2289 + t2363;
  t11712 = t9482 + t9554 + t5014 + t5118;
  t9820 = t5014 + t5118;
  t11737 = -1.*t265;
  t11738 = 1. + t11737;
  t11745 = 0.4*t11738;
  t11765 = 0.64*t265;
  t11812 = t11745 + t11765;
  t11824 = t11812*t577;
  t11845 = 0.24*t1025*t1059;
  t11865 = t11824 + t11845;
  t11879 = t1025*t11812;
  t11880 = -0.24*t577*t1059;
  t11883 = t11879 + t11880;
  t11909 = -1.*t11812*t577;
  t11922 = -0.24*t1025*t1059;
  t11923 = t11909 + t11922;
  t11878 = -1.*t11865*t2131;
  t11886 = -1.*t2237*t11883;
  t11894 = t11878 + t11886;
  t11895 = 3.2*t2325*t11894;
  t11947 = t11865*t2131;
  t11972 = t2237*t11883;
  t11978 = t11865*t1072;
  t11979 = t2131*t11883;
  t11983 = t11978 + t11979;
  t11992 = 3.2*t11983*t2369;
  t12025 = -0.24*t265*t577;
  t12027 = t12025 + t11922;
  t12004 = -1.*t2237*t11865;
  t12029 = 0.24*t1025*t265;
  t12030 = t12029 + t11880;
  t12011 = -1.*t11883*t2355;
  t11727 = Power(t1025,2);
  t11730 = 0.11*t11727;
  t11732 = Power(t577,2);
  t11733 = 0.11*t11732;
  t11734 = t11730 + t11733;
  t11736 = 6.8*t2414*t11734;
  t12115 = -1.*t2888;
  t12124 = 1. + t12115;
  t12125 = 0.4*t12124;
  t12126 = 0.64*t2888;
  t12130 = t12125 + t12126;
  t12143 = t12130*t2484;
  t12144 = 0.24*t2471*t2977;
  t12150 = t12143 + t12144;
  t12154 = t2471*t12130;
  t12155 = -0.24*t2484*t2977;
  t12159 = t12154 + t12155;
  t12087 = Power(t2471,2);
  t12099 = 0.11*t12087;
  t12100 = Power(t2484,2);
  t12103 = 0.11*t12100;
  t12104 = t12099 + t12103;
  t12105 = 6.8*t2527*t12104;
  t12151 = -1.*t12150*t3232;
  t12160 = -1.*t3127*t12159;
  t12161 = t12151 + t12160;
  t12163 = t12150*t3870;
  t12164 = t3232*t12159;
  t12165 = t12163 + t12164;
  t12170 = -1.*t12130*t2484;
  t12183 = -0.24*t2471*t2977;
  t12184 = t12170 + t12183;
  t12169 = 3.2*t3322*t12161;
  t12186 = t12150*t3232;
  t12191 = t3127*t12159;
  t12201 = 3.2*t12165*t5122;
  t12219 = -0.24*t2888*t2484;
  t12220 = t12219 + t12183;
  t12203 = -1.*t3127*t12150;
  t12222 = 0.24*t2471*t2888;
  t12224 = t12222 + t12155;
  t12207 = -1.*t12159*t5093;
  t11924 = t11923*t2131;
  t11973 = t1072*t11883;
  t11974 = t11924 + t11947 + t11972 + t11973;
  t11975 = 3.2*t2325*t11974;
  t12000 = -1.*t2237*t11923;
  t12009 = -1.*t2131*t11883;
  t12016 = t12000 + t12004 + t12009 + t12011;
  t12017 = 3.2*t2299*t12016;
  t12022 = t11736 + t11895 + t11975 + t11992 + t12017;
  t12247 = -1.*t1025*t11812;
  t12248 = 0.24*t577*t1059;
  t12249 = t12247 + t12248;
  t12239 = 3.2*t11894*t2359;
  t12028 = t12027*t2131;
  t12031 = t1072*t12030;
  t12049 = t12028 + t11947 + t11972 + t12031;
  t12241 = 3.2*t11983*t5160;
  t12246 = -1.*t1072*t11883;
  t12252 = -1.*t11865*t2355;
  t12065 = -1.*t2237*t12027;
  t12069 = -1.*t2131*t12030;
  t12070 = t12065 + t12004 + t12069 + t12011;
  t12257 = t2237*t11865;
  t12270 = -0.24*t1025*t265;
  t12271 = t12270 + t12248;
  t12261 = t11883*t2355;
  t12058 = 3.2*t2325*t12049;
  t12074 = 3.2*t2299*t12070;
  t12075 = t11895 + t12058 + t11992 + t12074;
  t12266 = 3.2*t11974*t2359;
  t12267 = 3.2*t12049*t2359;
  t12268 = -1.*t12027*t2131;
  t12269 = -1.*t2237*t12030;
  t12272 = -1.*t2237*t12271;
  t12273 = -1.*t11923*t2355;
  t12274 = -1.*t12027*t2355;
  t12275 = t12268 + t11886 + t12246 + t12269 + t12272 + t12273 + t12274 + t12252;
  t12276 = 3.2*t2206*t12275;
  t12277 = 3.2*t2288*t12016;
  t12278 = 3.2*t2288*t12070;
  t12279 = t2237*t11923;
  t12280 = t2237*t12027;
  t12281 = t12027*t1072;
  t12282 = t2131*t12030;
  t12283 = t2131*t12271;
  t12284 = t12279 + t12280 + t12257 + t12281 + t11979 + t12282 + t12283 + t12261;
  t12285 = 3.2*t2288*t12284;
  t12286 = t12239 + t12266 + t12267 + t12241 + t12276 + t12277 + t12278 + t12285;
  t12185 = t12184*t3232;
  t12195 = t3870*t12159;
  t12199 = t12185 + t12186 + t12191 + t12195;
  t12200 = 3.2*t3322*t12199;
  t12202 = -1.*t3127*t12184;
  t12206 = -1.*t3232*t12159;
  t12208 = t12202 + t12203 + t12206 + t12207;
  t12209 = 3.2*t4235*t12208;
  t12212 = t12105 + t12169 + t12200 + t12201 + t12209;
  t12313 = -1.*t2471*t12130;
  t12314 = 0.24*t2484*t2977;
  t12315 = t12313 + t12314;
  t12307 = 3.2*t12161*t5117;
  t12221 = t12220*t3232;
  t12225 = t3870*t12224;
  t12226 = t12221 + t12186 + t12191 + t12225;
  t12309 = 3.2*t12165*t5215;
  t12312 = -1.*t3870*t12159;
  t12318 = -1.*t12150*t5093;
  t12228 = -1.*t3127*t12220;
  t12229 = -1.*t3232*t12224;
  t12230 = t12228 + t12203 + t12229 + t12207;
  t12323 = t3127*t12150;
  t12336 = -0.24*t2471*t2888;
  t12337 = t12336 + t12314;
  t12327 = t12159*t5093;
  t12227 = 3.2*t3322*t12226;
  t12231 = 3.2*t4235*t12230;
  t12232 = t12169 + t12227 + t12201 + t12231;
  t12332 = 3.2*t12199*t5117;
  t12333 = 3.2*t12226*t5117;
  t12334 = -1.*t12220*t3232;
  t12335 = -1.*t3127*t12224;
  t12338 = -1.*t3127*t12337;
  t12339 = -1.*t12184*t5093;
  t12340 = -1.*t12220*t5093;
  t12341 = t12334 + t12160 + t12312 + t12335 + t12338 + t12339 + t12340 + t12318;
  t12342 = 3.2*t4155*t12341;
  t12343 = 3.2*t3636*t12208;
  t12344 = 3.2*t3636*t12230;
  t12345 = t3127*t12184;
  t12346 = t3127*t12220;
  t12347 = t12220*t3870;
  t12348 = t3232*t12224;
  t12349 = t3232*t12337;
  t12350 = t12345 + t12346 + t12323 + t12347 + t12164 + t12348 + t12349 + t12327;
  t12351 = 3.2*t3636*t12350;
  t12352 = t12307 + t12332 + t12333 + t12309 + t12342 + t12343 + t12344 + t12351;
  t12373 = 3.2*t2288*t11894;
  t12375 = 3.2*t11983*t2359;
  t12372 = 6.8*t2420*t11734;
  t12386 = 6.8*t2826*t12104;
  t12391 = 3.2*t3636*t12161;
  t12393 = 3.2*t12165*t5117;
  t12383 = -2.88*t1086;
  t12384 = 3.2*t2299*t11894;
  t12385 = 3.2*t2325*t11983;
  t12387 = 3.2*t4235*t12161;
  t12388 = 3.2*t3322*t12165;
  t12389 = t12383 + t12372 + t12384 + t12385 + t12386 + t12387 + t12388;
  t12374 = 3.2*t2288*t11974;
  t12376 = 3.2*t2206*t12016;
  t12377 = t12372 + t12373 + t12374 + t12375 + t12376;
  t12379 = 3.2*t2288*t12049;
  t12380 = 3.2*t2206*t12070;
  t12381 = t12373 + t12379 + t12375 + t12380;
  t12392 = 3.2*t3636*t12199;
  t12394 = 3.2*t4155*t12208;
  t12395 = t12386 + t12391 + t12392 + t12393 + t12394;
  t12397 = 3.2*t3636*t12226;
  t12398 = 3.2*t4155*t12230;
  t12399 = t12391 + t12397 + t12393 + t12398;
  t12407 = 0.748*t2414;
  t12408 = t11812*t1059;
  t12409 = -0.24*t265*t1059;
  t12410 = t12408 + t12409;
  t12412 = t11812*t265;
  t12413 = Power(t1059,2);
  t12414 = 0.24*t12413;
  t12415 = t12412 + t12414;
  t12419 = 3.2*t12410*t2325;
  t12420 = 3.2*t12415*t2369;
  t12421 = t12407 + t12419 + t12420;
  t12427 = Power(t265,2);
  t12428 = -0.24*t12427;
  t12429 = t12412 + t12428;
  t12436 = 3.2*t12410*t2359;
  t12423 = -1.*t11812*t1059;
  t12424 = 0.24*t265*t1059;
  t12425 = t12423 + t12424;
  t12437 = 3.2*t12415*t5160;
  t12426 = 3.2*t12425*t2325;
  t12430 = 3.2*t12429*t2299;
  t12431 = t12419 + t12426 + t12430 + t12420;
  t12440 = 3.2*t12429*t2288;
  t12441 = 3.2*t12425*t2359;
  t12442 = t12440 + t12436 + t12441 + t12437;
  t12459 = 0.748*t2420;
  t12464 = 3.2*t12410*t2288;
  t12465 = 3.2*t12415*t2359;
  t12460 = 3.2*t12415*t2325;
  t12461 = 3.2*t12410*t2299;
  t12462 = t12459 + t12460 + t12461;
  t12466 = t12459 + t12464 + t12465;
  t12468 = 3.2*t12429*t2206;
  t12469 = 3.2*t12425*t2288;
  t12470 = t12468 + t12464 + t12469 + t12465;
  t12481 = -0.384*var2[2]*t2369;
  t12482 = -0.384*var2[3]*t5160;
  t12483 = -0.384*var2[4]*t5160;
  t12484 = t12481 + t12482 + t12483;
  t12485 = var2[1]*t12484;
  t12491 = -0.384*var2[1]*t2359;
  t12492 = 0.748*t2527;
  t12493 = t12130*t2977;
  t12494 = -0.24*t2888*t2977;
  t12495 = t12493 + t12494;
  t12497 = t12130*t2888;
  t12498 = Power(t2977,2);
  t12499 = 0.24*t12498;
  t12500 = t12497 + t12499;
  t12504 = 3.2*t12495*t3322;
  t12505 = 3.2*t12500*t5122;
  t12506 = t12492 + t12504 + t12505;
  t12512 = Power(t2888,2);
  t12513 = -0.24*t12512;
  t12514 = t12497 + t12513;
  t12521 = 3.2*t12495*t5117;
  t12508 = -1.*t12130*t2977;
  t12509 = 0.24*t2888*t2977;
  t12510 = t12508 + t12509;
  t12522 = 3.2*t12500*t5215;
  t12511 = 3.2*t12510*t3322;
  t12515 = 3.2*t12514*t4235;
  t12516 = t12504 + t12511 + t12515 + t12505;
  t12525 = 3.2*t12514*t3636;
  t12526 = 3.2*t12510*t5117;
  t12527 = t12525 + t12521 + t12526 + t12522;
  t12544 = 0.748*t2826;
  t12549 = 3.2*t12495*t3636;
  t12550 = 3.2*t12500*t5117;
  t12545 = 3.2*t12500*t3322;
  t12546 = 3.2*t12495*t4235;
  t12547 = t12544 + t12545 + t12546;
  t12551 = t12544 + t12549 + t12550;
  t12553 = 3.2*t12514*t4155;
  t12554 = 3.2*t12510*t3636;
  t12555 = t12553 + t12549 + t12554 + t12550;
  t12566 = -0.384*var2[2]*t5122;
  t12567 = -0.384*var2[5]*t5215;
  t12568 = -0.384*var2[6]*t5215;
  t12569 = t12566 + t12567 + t12568;
  t12570 = var2[1]*t12569;
  t12576 = -0.384*var2[1]*t5117;
  p_output1[0]=var2[1]*(-0.5*(9.6*t2206*t2299 + 9.6*t2288*t2325 + t2411 + t2417 + t2421 + t2430 + 3.2*t2297*t2457 + 3.2*t2328*t2469 + t2501 + t2529 + t2856 + t2857 + 9.6*t3322*t3636 + 9.6*t4155*t4235 + 3.2*t4348*t4531 + 3.2*t4680*t4952)*var2[2] - 0.5*t2448*var2[3] - 0.5*t2383*var2[4] - 0.5*t5141*var2[5] - 0.5*t5139*var2[6]);
  p_output1[1]=var2[1]*(t5165 - 0.5*t2448*var2[2] - 0.5*(t2411 + t2417 + t2421 + t2430 + t5156 + t5157 + t5159 + t5161 + t5162 + t5163)*var2[3]);
  p_output1[2]=var2[1]*(t5165 - 0.5*t2383*var2[2] - 0.5*t5164*var2[3]);
  p_output1[3]=var2[1]*(t5220 - 0.5*t5141*var2[2] - 0.5*(t2501 + t2529 + t2856 + t2857 + t5195 + t5196 + t5208 + t5216 + t5217 + t5218)*var2[5]);
  p_output1[4]=var2[1]*(t5220 - 0.5*t5139*var2[2] - 0.5*t5219*var2[5]);
  p_output1[5]=-0.5*t5342*var2[2] - 0.5*t5276*var2[3] - 0.5*t5258*var2[4] - 0.5*t5421*var2[5] - 0.5*t5419*var2[6];
  p_output1[6]=-0.5*t5342*var2[1];
  p_output1[7]=-0.5*t5276*var2[1];
  p_output1[8]=-0.5*t5258*var2[1];
  p_output1[9]=-0.5*t5421*var2[1];
  p_output1[10]=-0.5*t5419*var2[1];
  p_output1[11]=var2[1]*(-0.5*(6.4*Power(t2299,2) + 6.4*Power(t2325,2) + 6.4*t2288*t2457 + 6.4*t2206*t2469 + 6.4*Power(t3322,2) + 6.4*Power(t4235,2) + 6.4*t3636*t4531 + 6.4*t4155*t4680 + t5521 + t5531 + t5532 + t5538 + t5557 + t5558 + t5562 + t5604)*var2[2] - 0.5*t5543*var2[3] - 0.5*t5508*var2[4] - 0.5*t5670*var2[5] - 0.5*t5668*var2[6]);
  p_output1[12]=var2[1]*(t8120 - 0.5*t5543*var2[2] - 0.5*(t5521 + t5531 + t5532 + t5538 + t7947 + t7965 + t8030 + t8040)*var2[3]);
  p_output1[13]=var2[1]*(t8120 - 0.5*t5508*var2[2] - 0.5*t8119*var2[3]);
  p_output1[14]=var2[1]*(t8389 - 0.5*t5670*var2[2] - 0.5*(t5557 + t5558 + t5562 + t5604 + t8320 + t8345 + t8374 + t8376)*var2[5]);
  p_output1[15]=var2[1]*(t8389 - 0.5*t5668*var2[2] - 0.5*t8377*var2[5]);
  p_output1[16]=-0.5*t9693*var2[2] - 0.5*t9192*var2[3] - 0.5*t9120*var2[4] - 0.5*t11712*var2[5] - 0.5*t9820*var2[6];
  p_output1[17]=-0.5*t9693*var2[1];
  p_output1[18]=-0.5*t9192*var2[1];
  p_output1[19]=-0.5*t9120*var2[1];
  p_output1[20]=-0.5*t11712*var2[1];
  p_output1[21]=-0.5*t9820*var2[1];
  p_output1[22]=var2[1]*(-0.5*(t11736 + t12105 + 2.88*t180 + 3.2*t11983*t2457 + 3.2*t11894*t2469 + 3.2*t12165*t4531 + 3.2*t12161*t4680)*var2[2] - 0.5*t12022*var2[3] - 0.5*t12075*var2[4] - 0.5*t12212*var2[5] - 0.5*t12232*var2[6]);
  p_output1[23]=var2[1]*(-0.5*t12022*var2[2] - 0.5*(t11736 + t12239 + t12241 + 6.4*t12016*t2288 + 3.2*(t1072*t11923 + t12257 + t12261 + 2.*t11883*t2131 + t12249*t2131 + 2.*t11923*t2237)*t2288 + 3.2*t2206*(t12246 + t12252 - 1.*t11923*t2131 - 2.*t11883*t2237 - 1.*t12249*t2237 - 2.*t11923*t2355) + 6.4*t11974*t2359)*var2[3] - 0.5*t12286*var2[4]);
  p_output1[24]=var2[1]*(-0.5*t12075*var2[2] - 0.5*t12286*var2[3] - 0.5*(t12239 + t12241 + 6.4*t12070*t2288 + 3.2*(t12257 + t12261 + t12281 + t12283 + 2.*t12030*t2131 + 2.*t12027*t2237)*t2288 + 3.2*t2206*(t12246 + t12252 + t12268 + t12272 - 2.*t12030*t2237 - 2.*t12027*t2355) + 6.4*t12049*t2359)*var2[4]);
  p_output1[25]=var2[1]*(-0.5*t12212*var2[2] - 0.5*(t12105 + t12307 + t12309 + 6.4*t12208*t3636 + 3.2*t3636*(t12323 + t12327 + 2.*t12184*t3127 + 2.*t12159*t3232 + t12315*t3232 + t12184*t3870) + 3.2*t4155*(t12312 + t12318 - 2.*t12159*t3127 - 1.*t12315*t3127 - 1.*t12184*t3232 - 2.*t12184*t5093) + 6.4*t12199*t5117)*var2[5] - 0.5*t12352*var2[6]);
  p_output1[26]=var2[1]*(-0.5*t12232*var2[2] - 0.5*t12352*var2[5] - 0.5*(t12307 + t12309 + 6.4*t12230*t3636 + 3.2*(t12323 + t12327 + t12347 + t12349 + 2.*t12220*t3127 + 2.*t12224*t3232)*t3636 + 3.2*t4155*(t12312 + t12318 + t12334 + t12338 - 2.*t12224*t3127 - 2.*t12220*t5093) + 6.4*t12226*t5117)*var2[6]);
  p_output1[27]=-0.5*t12389*var2[2] - 0.5*t12377*var2[3] - 0.5*t12381*var2[4] - 0.5*t12395*var2[5] - 0.5*t12399*var2[6];
  p_output1[28]=-0.5*t12389*var2[1];
  p_output1[29]=-0.5*t12377*var2[1];
  p_output1[30]=-0.5*t12381*var2[1];
  p_output1[31]=-0.5*t12395*var2[1];
  p_output1[32]=-0.5*t12399*var2[1];
  p_output1[33]=var2[1]*(-0.5*(t12407 + 3.2*t12415*t2457 + 3.2*t12410*t2469)*var2[2] - 0.5*t12421*var2[3] - 0.5*t12431*var2[4]);
  p_output1[34]=var2[1]*(-0.5*t12421*var2[2] - 0.5*(t12407 + t12436 + t12437)*var2[3] - 0.5*t12442*var2[4]);
  p_output1[35]=var2[1]*(-0.5*t12431*var2[2] - 0.5*t12442*var2[3] - 0.5*(t12436 + t12437 + 3.2*t12425*t2206 + 6.4*t12429*t2288 + 6.4*t12425*t2359 + 3.2*t2288*(0.24*t12427 - 1.*t11812*t265))*var2[4]);
  p_output1[36]=-0.5*t12462*var2[2] - 0.5*t12466*var2[3] - 0.5*t12470*var2[4];
  p_output1[37]=-0.5*t12462*var2[1];
  p_output1[38]=-0.5*t12466*var2[1];
  p_output1[39]=-0.5*t12470*var2[1];
  p_output1[40]=var2[1]*(-0.384*t2457*var2[2] - 0.384*t2369*var2[3] - 0.384*t2369*var2[4]);
  p_output1[41]=t12485;
  p_output1[42]=t12485;
  p_output1[43]=-0.384*t2325*var2[2] - 0.384*t2359*var2[3] - 0.384*t2359*var2[4];
  p_output1[44]=-0.384*t2325*var2[1];
  p_output1[45]=t12491;
  p_output1[46]=t12491;
  p_output1[47]=var2[1]*(-0.5*(t12492 + 3.2*t12500*t4531 + 3.2*t12495*t4680)*var2[2] - 0.5*t12506*var2[5] - 0.5*t12516*var2[6]);
  p_output1[48]=var2[1]*(-0.5*t12506*var2[2] - 0.5*(t12492 + t12521 + t12522)*var2[5] - 0.5*t12527*var2[6]);
  p_output1[49]=var2[1]*(-0.5*t12516*var2[2] - 0.5*t12527*var2[5] - 0.5*(t12521 + t12522 + 6.4*t12514*t3636 + 3.2*(0.24*t12512 - 1.*t12130*t2888)*t3636 + 3.2*t12510*t4155 + 6.4*t12510*t5117)*var2[6]);
  p_output1[50]=-0.5*t12547*var2[2] - 0.5*t12551*var2[5] - 0.5*t12555*var2[6];
  p_output1[51]=-0.5*t12547*var2[1];
  p_output1[52]=-0.5*t12551*var2[1];
  p_output1[53]=-0.5*t12555*var2[1];
  p_output1[54]=var2[1]*(-0.384*t4531*var2[2] - 0.384*t5122*var2[5] - 0.384*t5122*var2[6]);
  p_output1[55]=t12570;
  p_output1[56]=t12570;
  p_output1[57]=-0.384*t3322*var2[2] - 0.384*t5117*var2[5] - 0.384*t5117*var2[6];
  p_output1[58]=-0.384*t3322*var2[1];
  p_output1[59]=t12576;
  p_output1[60]=t12576;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 61, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce1_vec2_five_link_walker.hh"

namespace RightStance
{

void J_Ce1_vec2_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
