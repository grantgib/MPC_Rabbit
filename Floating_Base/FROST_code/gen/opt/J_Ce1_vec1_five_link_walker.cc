/*
 * Automatically Generated from Mathematica.
 * Wed 25 Mar 2020 22:48:32 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t2118;
  double t206;
  double t225;
  double t2158;
  double t172;
  double t2212;
  double t2221;
  double t2725;
  double t2866;
  double t2867;
  double t2102;
  double t2192;
  double t2200;
  double t3027;
  double t3598;
  double t3678;
  double t2201;
  double t3026;
  double t4124;
  double t4161;
  double t4166;
  double t4352;
  double t4376;
  double t4378;
  double t4780;
  double t8046;
  double t8106;
  double t8226;
  double t8247;
  double t8249;
  double t4047;
  double t4060;
  double t4090;
  double t4218;
  double t4235;
  double t4246;
  double t4269;
  double t4339;
  double t4394;
  double t4402;
  double t4404;
  double t4411;
  double t4437;
  double t4460;
  double t8207;
  double t8208;
  double t8219;
  double t8221;
  double t8222;
  double t8225;
  double t8261;
  double t8330;
  double t8334;
  double t8354;
  double t8355;
  double t8356;
  double t9402;
  double t9452;
  double t9564;
  double t9709;
  double t11319;
  double t11388;
  double t11397;
  double t11402;
  double t11446;
  double t11450;
  double t11448;
  double t11468;
  double t11526;
  double t11582;
  double t11597;
  double t11613;
  double t11654;
  double t11663;
  double t11665;
  double t11667;
  double t11692;
  double t11643;
  double t11655;
  double t11677;
  double t11678;
  double t11688;
  double t11693;
  double t11717;
  double t11718;
  double t11740;
  double t11568;
  double t11750;
  double t11760;
  double t11763;
  double t11330;
  double t11370;
  double t11371;
  double t11380;
  double t11384;
  double t11385;
  double t11416;
  double t11417;
  double t11429;
  double t11431;
  double t11434;
  double t11437;
  double t11744;
  double t11747;
  double t11765;
  double t11767;
  double t11772;
  double t11773;
  double t11776;
  double t11777;
  double t8357;
  double t11808;
  double t11809;
  double t11819;
  double t11820;
  double t11821;
  double t11822;
  double t11823;
  double t11826;
  double t4602;
  double t11829;
  double t11837;
  double t11785;
  double t11851;
  double t11852;
  double t11853;
  double t11854;
  double t11855;
  double t11864;
  double t11872;
  double t11876;
  double t11780;
  double t11881;
  double t11883;
  double t11902;
  double t11903;
  double t11917;
  double t11918;
  double t11930;
  double t11934;
  double t11942;
  double t11946;
  double t11923;
  double t11929;
  double t11935;
  double t11936;
  double t11937;
  double t11921;
  double t11912;
  double t11951;
  double t11947;
  double t9120;
  double t9248;
  double t8366;
  double t8376;
  double t11970;
  double t11971;
  double t11972;
  double t11975;
  double t11976;
  double t11977;
  double t11978;
  double t11982;
  double t11983;
  double t11986;
  double t11987;
  double t11988;
  double t11989;
  double t11614;
  double t11631;
  double t11705;
  double t11706;
  double t12012;
  double t12003;
  double t12004;
  double t12008;
  double t12009;
  double t12024;
  double t12025;
  double t12026;
  double t12027;
  double t12028;
  double t12029;
  double t12030;
  double t12031;
  double t11990;
  double t12039;
  double t12040;
  double t12041;
  double t12042;
  double t12055;
  double t12056;
  double t11984;
  double t12057;
  double t12058;
  double t12034;
  double t12068;
  double t12069;
  double t12070;
  double t12071;
  double t12072;
  double t12073;
  double t12032;
  double t12074;
  double t12075;
  double t12088;
  double t12089;
  double t12090;
  double t12091;
  double t12094;
  double t12095;
  double t12096;
  double t12097;
  double t8437;
  double t8459;
  double t11681;
  double t11703;
  double t12104;
  double t12105;
  double t12106;
  double t12107;
  double t12118;
  double t12119;
  double t12120;
  double t12121;
  double t12100;
  double t12101;
  double t12102;
  double t12103;
  double t12108;
  double t12111;
  double t12112;
  double t12113;
  double t12114;
  double t12098;
  double t12092;
  double t12124;
  double t12122;
  double t12138;
  double t12139;
  double t12140;
  double t12141;
  double t12142;
  double t12143;
  double t12144;
  double t12145;
  double t12147;
  double t12148;
  double t12149;
  double t12153;
  double t12154;
  double t12155;
  double t12146;
  double t12150;
  double t12151;
  double t12152;
  double t12157;
  double t12158;
  double t12162;
  double t12163;
  double t12164;
  double t12165;
  double t12174;
  double t12175;
  double t12167;
  double t12177;
  double t12178;
  double t12169;
  double t12132;
  double t12133;
  double t12134;
  double t12135;
  double t12136;
  double t12137;
  double t12197;
  double t12198;
  double t12199;
  double t12200;
  double t12201;
  double t12202;
  double t12203;
  double t12204;
  double t12206;
  double t12207;
  double t12208;
  double t12191;
  double t12192;
  double t12193;
  double t12194;
  double t12195;
  double t12196;
  double t12205;
  double t12209;
  double t12210;
  double t12212;
  double t12213;
  double t12214;
  double t12219;
  double t12220;
  double t12221;
  double t12218;
  double t12223;
  double t12224;
  double t12228;
  double t12237;
  double t12238;
  double t12230;
  double t12240;
  double t12241;
  double t12232;
  double t12156;
  double t12159;
  double t12160;
  double t12161;
  double t12166;
  double t12168;
  double t12170;
  double t12171;
  double t12172;
  double t12260;
  double t12261;
  double t12262;
  double t12254;
  double t12255;
  double t12176;
  double t12179;
  double t12180;
  double t12259;
  double t12265;
  double t12182;
  double t12183;
  double t12184;
  double t12270;
  double t12283;
  double t12284;
  double t12274;
  double t12181;
  double t12185;
  double t12186;
  double t12279;
  double t12280;
  double t12281;
  double t12282;
  double t12285;
  double t12286;
  double t12287;
  double t12288;
  double t12289;
  double t12290;
  double t12291;
  double t12292;
  double t12293;
  double t12294;
  double t12295;
  double t12296;
  double t12297;
  double t12298;
  double t12299;
  double t12222;
  double t12225;
  double t12226;
  double t12227;
  double t12229;
  double t12231;
  double t12233;
  double t12234;
  double t12235;
  double t12326;
  double t12327;
  double t12328;
  double t12320;
  double t12321;
  double t12239;
  double t12242;
  double t12243;
  double t12325;
  double t12331;
  double t12245;
  double t12246;
  double t12247;
  double t12336;
  double t12349;
  double t12350;
  double t12340;
  double t12244;
  double t12248;
  double t12249;
  double t12345;
  double t12346;
  double t12347;
  double t12348;
  double t12351;
  double t12352;
  double t12353;
  double t12354;
  double t12355;
  double t12356;
  double t12357;
  double t12358;
  double t12359;
  double t12360;
  double t12361;
  double t12362;
  double t12363;
  double t12364;
  double t12365;
  double t12386;
  double t12388;
  double t12385;
  double t12399;
  double t12404;
  double t12406;
  double t12396;
  double t12397;
  double t12398;
  double t12400;
  double t12401;
  double t12402;
  double t12387;
  double t12389;
  double t12390;
  double t12392;
  double t12393;
  double t12394;
  double t12405;
  double t12407;
  double t12408;
  double t12410;
  double t12411;
  double t12412;
  double t12420;
  double t12426;
  double t12427;
  double t12428;
  double t12421;
  double t12422;
  double t12423;
  double t12424;
  double t12432;
  double t12433;
  double t12434;
  double t12436;
  double t12437;
  double t12438;
  double t12449;
  double t12450;
  double t12440;
  double t12441;
  double t12442;
  double t12439;
  double t12443;
  double t12444;
  double t12453;
  double t12454;
  double t12455;
  double t12472;
  double t12477;
  double t12478;
  double t12473;
  double t12474;
  double t12475;
  double t12479;
  double t12481;
  double t12482;
  double t12483;
  double t12494;
  double t12495;
  double t12496;
  double t12497;
  double t12498;
  double t12504;
  double t12505;
  double t12511;
  double t12512;
  double t12513;
  double t12506;
  double t12507;
  double t12508;
  double t12509;
  double t12517;
  double t12518;
  double t12519;
  double t12521;
  double t12522;
  double t12523;
  double t12534;
  double t12535;
  double t12525;
  double t12526;
  double t12527;
  double t12524;
  double t12528;
  double t12529;
  double t12538;
  double t12539;
  double t12540;
  double t12557;
  double t12562;
  double t12563;
  double t12558;
  double t12559;
  double t12560;
  double t12564;
  double t12566;
  double t12567;
  double t12568;
  double t12579;
  double t12580;
  double t12581;
  double t12582;
  double t12583;
  double t12589;
  t2118 = Cos(var1[3]);
  t206 = Cos(var1[4]);
  t225 = Sin(var1[3]);
  t2158 = Sin(var1[4]);
  t172 = Sin(var1[2]);
  t2212 = Cos(var1[2]);
  t2221 = t2118*t206;
  t2725 = -1.*t225*t2158;
  t2866 = t2221 + t2725;
  t2867 = t2212*t2866;
  t2102 = -1.*t206*t225;
  t2192 = -1.*t2118*t2158;
  t2200 = t2102 + t2192;
  t3027 = t206*t225;
  t3598 = t2118*t2158;
  t3678 = t3027 + t3598;
  t2201 = t172*t2200;
  t3026 = t2201 + t2867;
  t4124 = t2212*t2200;
  t4161 = -1.*t172*t2866;
  t4166 = t4124 + t4161;
  t4352 = -1.*t2118*t206;
  t4376 = t225*t2158;
  t4378 = t4352 + t4376;
  t4780 = -1.*t2118*t172;
  t8046 = -1.*t2212*t225;
  t8106 = t4780 + t8046;
  t8226 = t2212*t2118;
  t8247 = -1.*t172*t225;
  t8249 = t8226 + t8247;
  t4047 = -1.*t172*t3678;
  t4060 = t4047 + t2867;
  t4090 = 6.4*t3026*t4060;
  t4218 = t2212*t3678;
  t4235 = t172*t2866;
  t4246 = t4218 + t4235;
  t4269 = 6.4*t4166*t4246;
  t4339 = -1.*t172*t2200;
  t4394 = t2212*t4378;
  t4402 = t4339 + t4394;
  t4404 = 6.4*t3026*t4402;
  t4411 = t172*t4378;
  t4437 = t4124 + t4411;
  t4460 = 6.4*t4166*t4437;
  t8207 = Power(t8106,2);
  t8208 = 13.6*t8207;
  t8219 = t2118*t172;
  t8221 = t2212*t225;
  t8222 = t8219 + t8221;
  t8225 = 13.6*t8106*t8222;
  t8261 = Power(t8249,2);
  t8330 = 13.6*t8261;
  t8334 = -1.*t2212*t2118;
  t8354 = t172*t225;
  t8355 = t8334 + t8354;
  t8356 = 13.6*t8249*t8355;
  t9402 = Cos(var1[5]);
  t9452 = -1.*t9402*t172;
  t9564 = Sin(var1[5]);
  t9709 = -1.*t2212*t9564;
  t11319 = t9452 + t9709;
  t11388 = t2212*t9402;
  t11397 = -1.*t172*t9564;
  t11402 = t11388 + t11397;
  t11446 = Cos(var1[6]);
  t11450 = Sin(var1[6]);
  t11448 = -1.*t11446*t9564;
  t11468 = -1.*t9402*t11450;
  t11526 = t11448 + t11468;
  t11582 = t9402*t11446;
  t11597 = -1.*t9564*t11450;
  t11613 = t11582 + t11597;
  t11654 = t2212*t11613;
  t11663 = t11446*t9564;
  t11665 = t9402*t11450;
  t11667 = t11663 + t11665;
  t11692 = -1.*t172*t11613;
  t11643 = t172*t11526;
  t11655 = t11643 + t11654;
  t11677 = -1.*t172*t11667;
  t11678 = t11677 + t11654;
  t11688 = t2212*t11526;
  t11693 = t11688 + t11692;
  t11717 = t2212*t11667;
  t11718 = t172*t11613;
  t11740 = t11717 + t11718;
  t11568 = -1.*t172*t11526;
  t11750 = -1.*t9402*t11446;
  t11760 = t9564*t11450;
  t11763 = t11750 + t11760;
  t11330 = Power(t11319,2);
  t11370 = 13.6*t11330;
  t11371 = t9402*t172;
  t11380 = t2212*t9564;
  t11384 = t11371 + t11380;
  t11385 = 13.6*t11319*t11384;
  t11416 = Power(t11402,2);
  t11417 = 13.6*t11416;
  t11429 = -1.*t2212*t9402;
  t11431 = t172*t9564;
  t11434 = t11429 + t11431;
  t11437 = 13.6*t11402*t11434;
  t11744 = 6.4*t11655*t11678;
  t11747 = 6.4*t11693*t11740;
  t11765 = t2212*t11763;
  t11767 = t11568 + t11765;
  t11772 = 6.4*t11655*t11767;
  t11773 = t172*t11763;
  t11776 = t11688 + t11773;
  t11777 = 6.4*t11693*t11776;
  t8357 = t8208 + t8225 + t8330 + t8356 + t4090 + t4269 + t4404 + t4460;
  t11808 = Power(t3026,2);
  t11809 = 6.4*t11808;
  t11819 = t172*t3678;
  t11820 = t11819 + t4394;
  t11821 = 6.4*t3026*t11820;
  t11822 = 6.4*t4246*t4437;
  t11823 = Power(t4437,2);
  t11826 = 6.4*t11823;
  t4602 = t4090 + t4269 + t4404 + t4460;
  t11829 = t11809 + t11821 + t11822 + t11826;
  t11837 = -0.5*var2[4]*t11829;
  t11785 = t11370 + t11385 + t11417 + t11437 + t11744 + t11747 + t11772 + t11777;
  t11851 = Power(t11655,2);
  t11852 = 6.4*t11851;
  t11853 = t172*t11667;
  t11854 = t11853 + t11765;
  t11855 = 6.4*t11655*t11854;
  t11864 = 6.4*t11740*t11776;
  t11872 = Power(t11776,2);
  t11876 = 6.4*t11872;
  t11780 = t11744 + t11747 + t11772 + t11777;
  t11881 = t11852 + t11855 + t11864 + t11876;
  t11883 = -0.5*var2[6]*t11881;
  t11902 = 6.4*t3026*t4246;
  t11903 = 6.4*t3026*t4437;
  t11917 = 13.6*t8106*t8249;
  t11918 = 13.6*t8222*t8249;
  t11930 = 13.6*t11319*t11402;
  t11934 = 13.6*t11384*t11402;
  t11942 = 6.4*t11655*t11740;
  t11946 = 6.4*t11655*t11776;
  t11923 = 6.4*t3026*t4166;
  t11929 = 6.4*t4060*t4246;
  t11935 = 6.4*t11655*t11693;
  t11936 = 6.4*t11678*t11740;
  t11937 = t11917 + t11918 + t11923 + t11929 + t11930 + t11934 + t11935 + t11936;
  t11921 = t11917 + t11918 + t11902 + t11903;
  t11912 = t11902 + t11903;
  t11951 = t11930 + t11934 + t11942 + t11946;
  t11947 = t11942 + t11946;
  t9120 = -1.*t2212*t3678;
  t9248 = t9120 + t4161;
  t8366 = -1.*t2212*t2866;
  t8376 = t4339 + t8366;
  t11970 = 6.4*t4060*t4166;
  t11971 = 3.2*t3026*t9248;
  t11972 = 3.2*t8376*t4246;
  t11975 = 6.4*t4166*t4402;
  t11976 = -1.*t2212*t2200;
  t11977 = -1.*t172*t4378;
  t11978 = t11976 + t11977;
  t11982 = 3.2*t3026*t11978;
  t11983 = 3.2*t8376*t4437;
  t11986 = 20.4*t8106*t8249;
  t11987 = 6.8*t8222*t8249;
  t11988 = 20.4*t8106*t8355;
  t11989 = 6.8*t8222*t8355;
  t11614 = -1.*t2212*t11613;
  t11631 = t11568 + t11614;
  t11705 = -1.*t2212*t11667;
  t11706 = t11705 + t11692;
  t12012 = -1.*t2212*t11526;
  t12003 = 20.4*t11319*t11402;
  t12004 = 6.8*t11384*t11402;
  t12008 = 20.4*t11319*t11434;
  t12009 = 6.8*t11384*t11434;
  t12024 = 6.4*t11678*t11693;
  t12025 = 3.2*t11655*t11706;
  t12026 = 3.2*t11631*t11740;
  t12027 = 6.4*t11693*t11767;
  t12028 = -1.*t172*t11763;
  t12029 = t12012 + t12028;
  t12030 = 3.2*t11655*t12029;
  t12031 = 3.2*t11631*t11776;
  t11990 = t11986 + t11987 + t11988 + t11989 + t11970 + t11971 + t11972 + t11975 + t11982 + t11983;
  t12039 = 3.2*t4246*t4402;
  t12040 = 3.2*t4166*t11820;
  t12041 = t4218 + t11977;
  t12042 = 3.2*t3026*t12041;
  t12055 = 3.2*t4060*t4437;
  t12056 = 6.4*t4402*t4437;
  t11984 = t11970 + t11971 + t11972 + t11975 + t11982 + t11983;
  t12057 = t11923 + t12039 + t12040 + t12042 + t12055 + t12056;
  t12058 = -0.5*var2[4]*t12057;
  t12034 = t12003 + t12004 + t12008 + t12009 + t12024 + t12025 + t12026 + t12027 + t12030 + t12031;
  t12068 = 3.2*t11740*t11767;
  t12069 = 3.2*t11693*t11854;
  t12070 = t11717 + t12028;
  t12071 = 3.2*t11655*t12070;
  t12072 = 3.2*t11678*t11776;
  t12073 = 6.4*t11767*t11776;
  t12032 = t12024 + t12025 + t12026 + t12027 + t12030 + t12031;
  t12074 = t11935 + t12068 + t12069 + t12071 + t12072 + t12073;
  t12075 = -0.5*var2[6]*t12074;
  t12088 = 3.2*t3026*t4060;
  t12089 = 3.2*t4166*t4246;
  t12090 = 3.2*t3026*t4402;
  t12091 = 3.2*t4166*t4437;
  t12094 = 6.8*t8207;
  t12095 = 6.8*t8106*t8222;
  t12096 = 6.8*t8261;
  t12097 = 6.8*t8249*t8355;
  t8437 = Power(t4060,2);
  t8459 = Power(t4166,2);
  t11681 = Power(t11678,2);
  t11703 = Power(t11693,2);
  t12104 = 6.8*t11330;
  t12105 = 6.8*t11319*t11384;
  t12106 = 6.8*t11416;
  t12107 = 6.8*t11402*t11434;
  t12118 = 3.2*t11655*t11678;
  t12119 = 3.2*t11693*t11740;
  t12120 = 3.2*t11655*t11767;
  t12121 = 3.2*t11693*t11776;
  t12100 = 3.2*t8376*t3026;
  t12101 = 3.2*t8437;
  t12102 = 3.2*t8459;
  t12103 = 3.2*t9248*t4246;
  t12108 = 3.2*t11631*t11655;
  t12111 = 3.2*t11681;
  t12112 = 3.2*t11703;
  t12113 = 3.2*t11706*t11740;
  t12114 = t12094 + t12095 + t12096 + t12097 + t12100 + t12101 + t12102 + t12103 + t12104 + t12105 + t12106 + t12107 + t12108 + t12111 + t12112 + t12113;
  t12098 = t12094 + t12095 + t12096 + t12097 + t12088 + t12089 + t12090 + t12091;
  t12092 = t12088 + t12089 + t12090 + t12091;
  t12124 = t12104 + t12105 + t12106 + t12107 + t12118 + t12119 + t12120 + t12121;
  t12122 = t12118 + t12119 + t12120 + t12121;
  t12138 = -1.*t206;
  t12139 = 1. + t12138;
  t12140 = 0.4*t12139;
  t12141 = 0.64*t206;
  t12142 = t12140 + t12141;
  t12143 = t12142*t225;
  t12144 = 0.24*t2118*t2158;
  t12145 = t12143 + t12144;
  t12147 = t2118*t12142;
  t12148 = -0.24*t225*t2158;
  t12149 = t12147 + t12148;
  t12153 = -1.*t12142*t225;
  t12154 = -0.24*t2118*t2158;
  t12155 = t12153 + t12154;
  t12146 = -1.*t12145*t2866;
  t12150 = -1.*t2200*t12149;
  t12151 = t12146 + t12150;
  t12152 = 3.2*t4166*t12151;
  t12157 = t12145*t2866;
  t12158 = t2200*t12149;
  t12162 = t12145*t3678;
  t12163 = t2866*t12149;
  t12164 = t12162 + t12163;
  t12165 = 3.2*t12164*t4402;
  t12174 = -0.24*t206*t225;
  t12175 = t12174 + t12154;
  t12167 = -1.*t2200*t12145;
  t12177 = 0.24*t2118*t206;
  t12178 = t12177 + t12148;
  t12169 = -1.*t12149*t4378;
  t12132 = Power(t2118,2);
  t12133 = 0.11*t12132;
  t12134 = Power(t225,2);
  t12135 = 0.11*t12134;
  t12136 = t12133 + t12135;
  t12137 = 6.8*t8355*t12136;
  t12197 = -1.*t11446;
  t12198 = 1. + t12197;
  t12199 = 0.4*t12198;
  t12200 = 0.64*t11446;
  t12201 = t12199 + t12200;
  t12202 = t12201*t9564;
  t12203 = 0.24*t9402*t11450;
  t12204 = t12202 + t12203;
  t12206 = t9402*t12201;
  t12207 = -0.24*t9564*t11450;
  t12208 = t12206 + t12207;
  t12191 = Power(t9402,2);
  t12192 = 0.11*t12191;
  t12193 = Power(t9564,2);
  t12194 = 0.11*t12193;
  t12195 = t12192 + t12194;
  t12196 = 6.8*t11434*t12195;
  t12205 = -1.*t12204*t11613;
  t12209 = -1.*t11526*t12208;
  t12210 = t12205 + t12209;
  t12212 = t12204*t11667;
  t12213 = t11613*t12208;
  t12214 = t12212 + t12213;
  t12219 = -1.*t12201*t9564;
  t12220 = -0.24*t9402*t11450;
  t12221 = t12219 + t12220;
  t12218 = 3.2*t11693*t12210;
  t12223 = t12204*t11613;
  t12224 = t11526*t12208;
  t12228 = 3.2*t12214*t11767;
  t12237 = -0.24*t11446*t9564;
  t12238 = t12237 + t12220;
  t12230 = -1.*t11526*t12204;
  t12240 = 0.24*t9402*t11446;
  t12241 = t12240 + t12207;
  t12232 = -1.*t12208*t11763;
  t12156 = t12155*t2866;
  t12159 = t3678*t12149;
  t12160 = t12156 + t12157 + t12158 + t12159;
  t12161 = 3.2*t4166*t12160;
  t12166 = -1.*t2200*t12155;
  t12168 = -1.*t2866*t12149;
  t12170 = t12166 + t12167 + t12168 + t12169;
  t12171 = 3.2*t4060*t12170;
  t12172 = t12137 + t12152 + t12161 + t12165 + t12171;
  t12260 = -1.*t2118*t12142;
  t12261 = 0.24*t225*t2158;
  t12262 = t12260 + t12261;
  t12254 = 3.2*t12164*t11820;
  t12255 = 3.2*t12151*t4437;
  t12176 = t12175*t2866;
  t12179 = t3678*t12178;
  t12180 = t12176 + t12157 + t12158 + t12179;
  t12259 = -1.*t3678*t12149;
  t12265 = -1.*t12145*t4378;
  t12182 = -1.*t2200*t12175;
  t12183 = -1.*t2866*t12178;
  t12184 = t12182 + t12167 + t12183 + t12169;
  t12270 = t2200*t12145;
  t12283 = -0.24*t2118*t206;
  t12284 = t12283 + t12261;
  t12274 = t12149*t4378;
  t12181 = 3.2*t4166*t12180;
  t12185 = 3.2*t4060*t12184;
  t12186 = t12152 + t12181 + t12165 + t12185;
  t12279 = 3.2*t12160*t4437;
  t12280 = 3.2*t12180*t4437;
  t12281 = -1.*t12175*t2866;
  t12282 = -1.*t2200*t12178;
  t12285 = -1.*t2200*t12284;
  t12286 = -1.*t12155*t4378;
  t12287 = -1.*t12175*t4378;
  t12288 = t12281 + t12150 + t12259 + t12282 + t12285 + t12286 + t12287 + t12265;
  t12289 = 3.2*t4246*t12288;
  t12290 = 3.2*t3026*t12170;
  t12291 = 3.2*t3026*t12184;
  t12292 = t2200*t12155;
  t12293 = t2200*t12175;
  t12294 = t12175*t3678;
  t12295 = t2866*t12178;
  t12296 = t2866*t12284;
  t12297 = t12292 + t12293 + t12270 + t12294 + t12163 + t12295 + t12296 + t12274;
  t12298 = 3.2*t3026*t12297;
  t12299 = t12254 + t12255 + t12279 + t12280 + t12289 + t12290 + t12291 + t12298;
  t12222 = t12221*t11613;
  t12225 = t11667*t12208;
  t12226 = t12222 + t12223 + t12224 + t12225;
  t12227 = 3.2*t11693*t12226;
  t12229 = -1.*t11526*t12221;
  t12231 = -1.*t11613*t12208;
  t12233 = t12229 + t12230 + t12231 + t12232;
  t12234 = 3.2*t11678*t12233;
  t12235 = t12196 + t12218 + t12227 + t12228 + t12234;
  t12326 = -1.*t9402*t12201;
  t12327 = 0.24*t9564*t11450;
  t12328 = t12326 + t12327;
  t12320 = 3.2*t12214*t11854;
  t12321 = 3.2*t12210*t11776;
  t12239 = t12238*t11613;
  t12242 = t11667*t12241;
  t12243 = t12239 + t12223 + t12224 + t12242;
  t12325 = -1.*t11667*t12208;
  t12331 = -1.*t12204*t11763;
  t12245 = -1.*t11526*t12238;
  t12246 = -1.*t11613*t12241;
  t12247 = t12245 + t12230 + t12246 + t12232;
  t12336 = t11526*t12204;
  t12349 = -0.24*t9402*t11446;
  t12350 = t12349 + t12327;
  t12340 = t12208*t11763;
  t12244 = 3.2*t11693*t12243;
  t12248 = 3.2*t11678*t12247;
  t12249 = t12218 + t12244 + t12228 + t12248;
  t12345 = 3.2*t12226*t11776;
  t12346 = 3.2*t12243*t11776;
  t12347 = -1.*t12238*t11613;
  t12348 = -1.*t11526*t12241;
  t12351 = -1.*t11526*t12350;
  t12352 = -1.*t12221*t11763;
  t12353 = -1.*t12238*t11763;
  t12354 = t12347 + t12209 + t12325 + t12348 + t12351 + t12352 + t12353 + t12331;
  t12355 = 3.2*t11740*t12354;
  t12356 = 3.2*t11655*t12233;
  t12357 = 3.2*t11655*t12247;
  t12358 = t11526*t12221;
  t12359 = t11526*t12238;
  t12360 = t12238*t11667;
  t12361 = t11613*t12241;
  t12362 = t11613*t12350;
  t12363 = t12358 + t12359 + t12336 + t12360 + t12213 + t12361 + t12362 + t12340;
  t12364 = 3.2*t11655*t12363;
  t12365 = t12320 + t12321 + t12345 + t12346 + t12355 + t12356 + t12357 + t12364;
  t12386 = 3.2*t3026*t12151;
  t12388 = 3.2*t12164*t4437;
  t12385 = 6.8*t8106*t12136;
  t12399 = 6.8*t11319*t12195;
  t12404 = 3.2*t11655*t12210;
  t12406 = 3.2*t12214*t11776;
  t12396 = -2.88*t172;
  t12397 = 3.2*t4060*t12151;
  t12398 = 3.2*t4166*t12164;
  t12400 = 3.2*t11678*t12210;
  t12401 = 3.2*t11693*t12214;
  t12402 = t12396 + t12385 + t12397 + t12398 + t12399 + t12400 + t12401;
  t12387 = 3.2*t3026*t12160;
  t12389 = 3.2*t4246*t12170;
  t12390 = t12385 + t12386 + t12387 + t12388 + t12389;
  t12392 = 3.2*t3026*t12180;
  t12393 = 3.2*t4246*t12184;
  t12394 = t12386 + t12392 + t12388 + t12393;
  t12405 = 3.2*t11655*t12226;
  t12407 = 3.2*t11740*t12233;
  t12408 = t12399 + t12404 + t12405 + t12406 + t12407;
  t12410 = 3.2*t11655*t12243;
  t12411 = 3.2*t11740*t12247;
  t12412 = t12404 + t12410 + t12406 + t12411;
  t12420 = 0.748*t8355;
  t12426 = t12142*t2158;
  t12427 = -0.24*t206*t2158;
  t12428 = t12426 + t12427;
  t12421 = t12142*t206;
  t12422 = Power(t2158,2);
  t12423 = 0.24*t12422;
  t12424 = t12421 + t12423;
  t12432 = 3.2*t12428*t4166;
  t12433 = 3.2*t12424*t4402;
  t12434 = t12420 + t12432 + t12433;
  t12436 = Power(t206,2);
  t12437 = -0.24*t12436;
  t12438 = t12421 + t12437;
  t12449 = 3.2*t12424*t11820;
  t12450 = 3.2*t12428*t4437;
  t12440 = -1.*t12142*t2158;
  t12441 = 0.24*t206*t2158;
  t12442 = t12440 + t12441;
  t12439 = 3.2*t12438*t4060;
  t12443 = 3.2*t12442*t4166;
  t12444 = t12439 + t12432 + t12443 + t12433;
  t12453 = 3.2*t12438*t3026;
  t12454 = 3.2*t12442*t4437;
  t12455 = t12453 + t12449 + t12450 + t12454;
  t12472 = 0.748*t8106;
  t12477 = 3.2*t12428*t3026;
  t12478 = 3.2*t12424*t4437;
  t12473 = 3.2*t12428*t4060;
  t12474 = 3.2*t12424*t4166;
  t12475 = t12472 + t12473 + t12474;
  t12479 = t12472 + t12477 + t12478;
  t12481 = 3.2*t12442*t3026;
  t12482 = 3.2*t12438*t4246;
  t12483 = t12477 + t12481 + t12482 + t12478;
  t12494 = -0.384*var2[2]*t4402;
  t12495 = -0.384*var2[3]*t11820;
  t12496 = -0.384*var2[4]*t11820;
  t12497 = t12494 + t12495 + t12496;
  t12498 = var2[0]*t12497;
  t12504 = -0.384*var2[0]*t4437;
  t12505 = 0.748*t11434;
  t12511 = t12201*t11450;
  t12512 = -0.24*t11446*t11450;
  t12513 = t12511 + t12512;
  t12506 = t12201*t11446;
  t12507 = Power(t11450,2);
  t12508 = 0.24*t12507;
  t12509 = t12506 + t12508;
  t12517 = 3.2*t12513*t11693;
  t12518 = 3.2*t12509*t11767;
  t12519 = t12505 + t12517 + t12518;
  t12521 = Power(t11446,2);
  t12522 = -0.24*t12521;
  t12523 = t12506 + t12522;
  t12534 = 3.2*t12509*t11854;
  t12535 = 3.2*t12513*t11776;
  t12525 = -1.*t12201*t11450;
  t12526 = 0.24*t11446*t11450;
  t12527 = t12525 + t12526;
  t12524 = 3.2*t12523*t11678;
  t12528 = 3.2*t12527*t11693;
  t12529 = t12524 + t12517 + t12528 + t12518;
  t12538 = 3.2*t12523*t11655;
  t12539 = 3.2*t12527*t11776;
  t12540 = t12538 + t12534 + t12535 + t12539;
  t12557 = 0.748*t11319;
  t12562 = 3.2*t12513*t11655;
  t12563 = 3.2*t12509*t11776;
  t12558 = 3.2*t12513*t11678;
  t12559 = 3.2*t12509*t11693;
  t12560 = t12557 + t12558 + t12559;
  t12564 = t12557 + t12562 + t12563;
  t12566 = 3.2*t12527*t11655;
  t12567 = 3.2*t12523*t11740;
  t12568 = t12562 + t12566 + t12567 + t12563;
  t12579 = -0.384*var2[2]*t11767;
  t12580 = -0.384*var2[5]*t11854;
  t12581 = -0.384*var2[6]*t11854;
  t12582 = t12579 + t12580 + t12581;
  t12583 = var2[0]*t12582;
  t12589 = -0.384*var2[0]*t11776;
  p_output1[0]=var2[0]*(-0.5*(t11370 + t11385 + t11417 + t11437 + 6.4*t11631*t11655 + 6.4*t11681 + 6.4*t11703 + 6.4*t11706*t11740 + t8208 + t8225 + t8330 + t8356 + 6.4*t3026*t8376 + 6.4*t8437 + 6.4*t8459 + 6.4*t4246*t9248)*var2[2] - 0.5*t8357*var2[3] - 0.5*t4602*var2[4] - 0.5*t11785*var2[5] - 0.5*t11780*var2[6]);
  p_output1[1]=var2[0]*(t11837 - 0.5*t8357*var2[2] - 0.5*(t11809 + t11821 + t11822 + t11826 + t8208 + t8225 + t8330 + t8356)*var2[3]);
  p_output1[2]=var2[0]*(t11837 - 0.5*t4602*var2[2] - 0.5*t11829*var2[3]);
  p_output1[3]=var2[0]*(t11883 - 0.5*t11785*var2[2] - 0.5*(t11370 + t11385 + t11417 + t11437 + t11852 + t11855 + t11864 + t11876)*var2[5]);
  p_output1[4]=var2[0]*(t11883 - 0.5*t11780*var2[2] - 0.5*t11881*var2[5]);
  p_output1[5]=-0.5*t11937*var2[2] - 0.5*t11921*var2[3] - 0.5*t11912*var2[4] - 0.5*t11951*var2[5] - 0.5*t11947*var2[6];
  p_output1[6]=-0.5*t11937*var2[0];
  p_output1[7]=-0.5*t11921*var2[0];
  p_output1[8]=-0.5*t11912*var2[0];
  p_output1[9]=-0.5*t11951*var2[0];
  p_output1[10]=-0.5*t11947*var2[0];
  p_output1[11]=var2[0]*(-0.5*(9.6*t11631*t11693 + 9.6*t11678*t11706 + 3.2*t11740*(t11614 + t11853) + t11986 + t11987 + t11988 + t11989 + t12003 + t12004 + t12008 + t12009 + 3.2*t11655*(t11718 + t12012) + 3.2*t3026*(t11976 + t4235) + 3.2*t4246*(t11819 + t8366) + 9.6*t4166*t8376 + 9.6*t4060*t9248)*var2[2] - 0.5*t11990*var2[3] - 0.5*t11984*var2[4] - 0.5*t12034*var2[5] - 0.5*t12032*var2[6]);
  p_output1[12]=var2[0]*(t12058 - 0.5*t11990*var2[2] - 0.5*(t11923 + t11986 + t11987 + t11988 + t11989 + t12039 + t12040 + t12042 + t12055 + t12056)*var2[3]);
  p_output1[13]=var2[0]*(t12058 - 0.5*t11984*var2[2] - 0.5*t12057*var2[3]);
  p_output1[14]=var2[0]*(t12075 - 0.5*t12034*var2[2] - 0.5*(t11935 + t12003 + t12004 + t12008 + t12009 + t12068 + t12069 + t12071 + t12072 + t12073)*var2[5]);
  p_output1[15]=var2[0]*(t12075 - 0.5*t12032*var2[2] - 0.5*t12074*var2[5]);
  p_output1[16]=-0.5*t12114*var2[2] - 0.5*t12098*var2[3] - 0.5*t12092*var2[4] - 0.5*t12124*var2[5] - 0.5*t12122*var2[6];
  p_output1[17]=-0.5*t12114*var2[0];
  p_output1[18]=-0.5*t12098*var2[0];
  p_output1[19]=-0.5*t12092*var2[0];
  p_output1[20]=-0.5*t12124*var2[0];
  p_output1[21]=-0.5*t12122*var2[0];
  p_output1[22]=var2[0]*(-0.5*(t12137 + t12196 + 3.2*t11706*t12210 + 3.2*t11631*t12214 - 2.88*t2212 + 3.2*t12164*t8376 + 3.2*t12151*t9248)*var2[2] - 0.5*t12172*var2[3] - 0.5*t12186*var2[4] - 0.5*t12235*var2[5] - 0.5*t12249*var2[6]);
  p_output1[23]=var2[0]*(-0.5*t12172*var2[2] - 0.5*(t12137 + t12254 + t12255 + 6.4*t12170*t3026 + 3.2*t3026*(t12270 + t12274 + 2.*t12155*t2200 + 2.*t12149*t2866 + t12262*t2866 + t12155*t3678) + 3.2*t4246*(t12259 + t12265 - 2.*t12149*t2200 - 1.*t12262*t2200 - 1.*t12155*t2866 - 2.*t12155*t4378) + 6.4*t12160*t4437)*var2[3] - 0.5*t12299*var2[4]);
  p_output1[24]=var2[0]*(-0.5*t12186*var2[2] - 0.5*t12299*var2[3] - 0.5*(t12254 + t12255 + 6.4*t12184*t3026 + 3.2*(t12270 + t12274 + t12294 + t12296 + 2.*t12175*t2200 + 2.*t12178*t2866)*t3026 + 3.2*t4246*(t12259 + t12265 + t12281 + t12285 - 2.*t12178*t2200 - 2.*t12175*t4378) + 6.4*t12180*t4437)*var2[4]);
  p_output1[25]=var2[0]*(-0.5*t12235*var2[2] - 0.5*(t12196 + 6.4*t11776*t12226 + 6.4*t11655*t12233 + t12320 + t12321 + 3.2*t11740*(-2.*t11526*t12208 - 1.*t11613*t12221 - 2.*t11763*t12221 + t12325 - 1.*t11526*t12328 + t12331) + 3.2*t11655*(2.*t11613*t12208 + 2.*t11526*t12221 + t11667*t12221 + t11613*t12328 + t12336 + t12340))*var2[5] - 0.5*t12365*var2[6]);
  p_output1[26]=var2[0]*(-0.5*t12249*var2[2] - 0.5*t12365*var2[5] - 0.5*(6.4*t11776*t12243 + 6.4*t11655*t12247 + t12320 + t12321 + 3.2*t11740*(-2.*t11763*t12238 - 2.*t11526*t12241 + t12325 + t12331 + t12347 + t12351) + 3.2*t11655*(2.*t11526*t12238 + 2.*t11613*t12241 + t12336 + t12340 + t12360 + t12362))*var2[6]);
  p_output1[27]=-0.5*t12402*var2[2] - 0.5*t12390*var2[3] - 0.5*t12394*var2[4] - 0.5*t12408*var2[5] - 0.5*t12412*var2[6];
  p_output1[28]=-0.5*t12402*var2[0];
  p_output1[29]=-0.5*t12390*var2[0];
  p_output1[30]=-0.5*t12394*var2[0];
  p_output1[31]=-0.5*t12408*var2[0];
  p_output1[32]=-0.5*t12412*var2[0];
  p_output1[33]=var2[0]*(-0.5*(t12420 + 3.2*t12424*t8376 + 3.2*t12428*t9248)*var2[2] - 0.5*t12434*var2[3] - 0.5*t12444*var2[4]);
  p_output1[34]=var2[0]*(-0.5*t12434*var2[2] - 0.5*(t12420 + t12449 + t12450)*var2[3] - 0.5*t12455*var2[4]);
  p_output1[35]=var2[0]*(-0.5*t12444*var2[2] - 0.5*t12455*var2[3] - 0.5*(t12449 + t12450 + 6.4*t12438*t3026 + 3.2*(0.24*t12436 - 1.*t12142*t206)*t3026 + 3.2*t12442*t4246 + 6.4*t12442*t4437)*var2[4]);
  p_output1[36]=-0.5*t12475*var2[2] - 0.5*t12479*var2[3] - 0.5*t12483*var2[4];
  p_output1[37]=-0.5*t12475*var2[0];
  p_output1[38]=-0.5*t12479*var2[0];
  p_output1[39]=-0.5*t12483*var2[0];
  p_output1[40]=var2[0]*(-0.384*t8376*var2[2] - 0.384*t4402*var2[3] - 0.384*t4402*var2[4]);
  p_output1[41]=t12498;
  p_output1[42]=t12498;
  p_output1[43]=-0.384*t4166*var2[2] - 0.384*t4437*var2[3] - 0.384*t4437*var2[4];
  p_output1[44]=-0.384*t4166*var2[0];
  p_output1[45]=t12504;
  p_output1[46]=t12504;
  p_output1[47]=var2[0]*(-0.5*(t12505 + 3.2*t11631*t12509 + 3.2*t11706*t12513)*var2[2] - 0.5*t12519*var2[5] - 0.5*t12529*var2[6]);
  p_output1[48]=var2[0]*(-0.5*t12519*var2[2] - 0.5*(t12505 + t12534 + t12535)*var2[5] - 0.5*t12540*var2[6]);
  p_output1[49]=var2[0]*(-0.5*t12529*var2[2] - 0.5*t12540*var2[5] - 0.5*(3.2*t11655*(-1.*t11446*t12201 + 0.24*t12521) + 6.4*t11655*t12523 + 3.2*t11740*t12527 + 6.4*t11776*t12527 + t12534 + t12535)*var2[6]);
  p_output1[50]=-0.5*t12560*var2[2] - 0.5*t12564*var2[5] - 0.5*t12568*var2[6];
  p_output1[51]=-0.5*t12560*var2[0];
  p_output1[52]=-0.5*t12564*var2[0];
  p_output1[53]=-0.5*t12568*var2[0];
  p_output1[54]=var2[0]*(-0.384*t11631*var2[2] - 0.384*t11767*var2[5] - 0.384*t11767*var2[6]);
  p_output1[55]=t12583;
  p_output1[56]=t12583;
  p_output1[57]=-0.384*t11693*var2[2] - 0.384*t11776*var2[5] - 0.384*t11776*var2[6];
  p_output1[58]=-0.384*t11693*var2[0];
  p_output1[59]=t12589;
  p_output1[60]=t12589;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 61, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce1_vec1_five_link_walker.hh"

namespace RightStance
{

void J_Ce1_vec1_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
