/*
 * Automatically Generated from Mathematica.
 * Sun 29 Mar 2020 00:48:32 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t1138;
  double t156;
  double t357;
  double t1140;
  double t120;
  double t1405;
  double t1620;
  double t2195;
  double t2905;
  double t2972;
  double t991;
  double t1346;
  double t1388;
  double t4668;
  double t4868;
  double t4959;
  double t1404;
  double t4662;
  double t6102;
  double t6126;
  double t6217;
  double t6852;
  double t6889;
  double t7036;
  double t8304;
  double t8375;
  double t8603;
  double t8632;
  double t8633;
  double t8640;
  double t5766;
  double t5884;
  double t6039;
  double t6528;
  double t6555;
  double t6620;
  double t6722;
  double t6797;
  double t7248;
  double t7679;
  double t8009;
  double t8031;
  double t8209;
  double t8239;
  double t8610;
  double t8613;
  double t8615;
  double t8623;
  double t8627;
  double t8628;
  double t8641;
  double t8950;
  double t8951;
  double t8957;
  double t8958;
  double t8962;
  double t8995;
  double t9160;
  double t9362;
  double t9575;
  double t9626;
  double t11407;
  double t12800;
  double t12815;
  double t14783;
  double t14798;
  double t14791;
  double t14799;
  double t14828;
  double t14850;
  double t14855;
  double t14861;
  double t14890;
  double t14905;
  double t14907;
  double t14913;
  double t14933;
  double t14889;
  double t14896;
  double t14914;
  double t14917;
  double t14927;
  double t14935;
  double t14941;
  double t15033;
  double t15281;
  double t14849;
  double t16393;
  double t16398;
  double t16535;
  double t10241;
  double t10250;
  double t10957;
  double t10960;
  double t10963;
  double t11066;
  double t12962;
  double t14493;
  double t14590;
  double t14633;
  double t14747;
  double t14749;
  double t16135;
  double t16266;
  double t16536;
  double t16538;
  double t16619;
  double t16657;
  double t17003;
  double t17056;
  double t8963;
  double t17635;
  double t17651;
  double t17738;
  double t17761;
  double t17762;
  double t17817;
  double t17865;
  double t17996;
  double t8261;
  double t18039;
  double t18257;
  double t17110;
  double t19099;
  double t19100;
  double t19118;
  double t19189;
  double t19195;
  double t19199;
  double t19201;
  double t19202;
  double t17079;
  double t19235;
  double t20423;
  double t20483;
  double t20488;
  double t20523;
  double t20546;
  double t20587;
  double t20592;
  double t20671;
  double t20672;
  double t20579;
  double t20581;
  double t20606;
  double t20613;
  double t20614;
  double t20554;
  double t20492;
  double t20809;
  double t20754;
  double t8979;
  double t8982;
  double t8970;
  double t8971;
  double t20820;
  double t20832;
  double t20833;
  double t20866;
  double t20872;
  double t20874;
  double t20900;
  double t20901;
  double t20904;
  double t21049;
  double t21052;
  double t21053;
  double t21059;
  double t14874;
  double t14877;
  double t14939;
  double t14940;
  double t21137;
  double t21123;
  double t21124;
  double t21127;
  double t21131;
  double t21219;
  double t21221;
  double t21236;
  double t21241;
  double t21251;
  double t21256;
  double t21259;
  double t21260;
  double t21061;
  double t21301;
  double t21304;
  double t21308;
  double t21309;
  double t21310;
  double t21315;
  double t21033;
  double t21324;
  double t21325;
  double t21265;
  double t21384;
  double t21385;
  double t21406;
  double t21410;
  double t21414;
  double t21415;
  double t21262;
  double t21416;
  double t21417;
  double t21442;
  double t21443;
  double t21444;
  double t21445;
  double t21448;
  double t21449;
  double t21476;
  double t21477;
  double t8973;
  double t8977;
  double t14918;
  double t14936;
  double t21486;
  double t21490;
  double t21491;
  double t21492;
  double t21507;
  double t21508;
  double t21509;
  double t21511;
  double t21482;
  double t21483;
  double t21484;
  double t21485;
  double t21493;
  double t21494;
  double t21495;
  double t21496;
  double t21497;
  double t21480;
  double t21446;
  double t21514;
  double t21512;
  double t21528;
  double t21545;
  double t21546;
  double t21547;
  double t21548;
  double t21549;
  double t21550;
  double t21551;
  double t21553;
  double t21554;
  double t21555;
  double t21561;
  double t21562;
  double t21565;
  double t21552;
  double t21556;
  double t21559;
  double t21560;
  double t21567;
  double t21568;
  double t21574;
  double t21575;
  double t21578;
  double t21579;
  double t21588;
  double t21589;
  double t21581;
  double t21591;
  double t21592;
  double t21583;
  double t21522;
  double t21523;
  double t21524;
  double t21525;
  double t21526;
  double t21527;
  double t21615;
  double t21616;
  double t21617;
  double t21618;
  double t21619;
  double t21620;
  double t21621;
  double t21622;
  double t21624;
  double t21625;
  double t21626;
  double t21607;
  double t21608;
  double t21611;
  double t21612;
  double t21613;
  double t21614;
  double t21623;
  double t21627;
  double t21628;
  double t21630;
  double t21631;
  double t21632;
  double t21637;
  double t21638;
  double t21639;
  double t21636;
  double t21641;
  double t21642;
  double t21646;
  double t21655;
  double t21656;
  double t21648;
  double t21658;
  double t21659;
  double t21650;
  double t21566;
  double t21569;
  double t21572;
  double t21573;
  double t21580;
  double t21582;
  double t21584;
  double t21585;
  double t21586;
  double t21678;
  double t21679;
  double t21680;
  double t21672;
  double t21673;
  double t21590;
  double t21593;
  double t21594;
  double t21677;
  double t21683;
  double t21596;
  double t21597;
  double t21598;
  double t21688;
  double t21701;
  double t21702;
  double t21692;
  double t21595;
  double t21599;
  double t21600;
  double t21697;
  double t21698;
  double t21699;
  double t21700;
  double t21703;
  double t21704;
  double t21705;
  double t21706;
  double t21707;
  double t21708;
  double t21709;
  double t21710;
  double t21711;
  double t21712;
  double t21713;
  double t21714;
  double t21715;
  double t21716;
  double t21717;
  double t21640;
  double t21643;
  double t21644;
  double t21645;
  double t21647;
  double t21649;
  double t21651;
  double t21652;
  double t21653;
  double t21744;
  double t21745;
  double t21746;
  double t21738;
  double t21739;
  double t21657;
  double t21660;
  double t21661;
  double t21743;
  double t21749;
  double t21663;
  double t21664;
  double t21665;
  double t21754;
  double t21767;
  double t21768;
  double t21758;
  double t21662;
  double t21666;
  double t21667;
  double t21763;
  double t21764;
  double t21765;
  double t21766;
  double t21769;
  double t21770;
  double t21771;
  double t21772;
  double t21773;
  double t21774;
  double t21775;
  double t21776;
  double t21777;
  double t21778;
  double t21779;
  double t21780;
  double t21781;
  double t21782;
  double t21783;
  double t21804;
  double t21806;
  double t21803;
  double t21817;
  double t21822;
  double t21824;
  double t21814;
  double t21815;
  double t21816;
  double t21818;
  double t21819;
  double t21820;
  double t21805;
  double t21807;
  double t21808;
  double t21810;
  double t21811;
  double t21812;
  double t21823;
  double t21825;
  double t21826;
  double t21828;
  double t21829;
  double t21830;
  double t21838;
  double t21844;
  double t21845;
  double t21846;
  double t21839;
  double t21840;
  double t21841;
  double t21842;
  double t21850;
  double t21851;
  double t21852;
  double t21854;
  double t21855;
  double t21856;
  double t21867;
  double t21868;
  double t21858;
  double t21859;
  double t21860;
  double t21857;
  double t21861;
  double t21862;
  double t21871;
  double t21872;
  double t21873;
  double t21890;
  double t21895;
  double t21896;
  double t21891;
  double t21892;
  double t21893;
  double t21897;
  double t21899;
  double t21900;
  double t21901;
  double t21912;
  double t21913;
  double t21914;
  double t21915;
  double t21916;
  double t21922;
  double t21923;
  double t21929;
  double t21930;
  double t21931;
  double t21924;
  double t21925;
  double t21926;
  double t21927;
  double t21935;
  double t21936;
  double t21937;
  double t21939;
  double t21940;
  double t21941;
  double t21952;
  double t21953;
  double t21943;
  double t21944;
  double t21945;
  double t21942;
  double t21946;
  double t21947;
  double t21956;
  double t21957;
  double t21958;
  double t21975;
  double t21980;
  double t21981;
  double t21976;
  double t21977;
  double t21978;
  double t21982;
  double t21984;
  double t21985;
  double t21986;
  double t21997;
  double t21998;
  double t21999;
  double t22000;
  double t22001;
  double t22007;
  t1138 = Cos(var1[3]);
  t156 = Cos(var1[4]);
  t357 = Sin(var1[3]);
  t1140 = Sin(var1[4]);
  t120 = Sin(var1[2]);
  t1405 = Cos(var1[2]);
  t1620 = t1138*t156;
  t2195 = -1.*t357*t1140;
  t2905 = t1620 + t2195;
  t2972 = t1405*t2905;
  t991 = -1.*t156*t357;
  t1346 = -1.*t1138*t1140;
  t1388 = t991 + t1346;
  t4668 = t156*t357;
  t4868 = t1138*t1140;
  t4959 = t4668 + t4868;
  t1404 = t120*t1388;
  t4662 = t1404 + t2972;
  t6102 = t1405*t1388;
  t6126 = -1.*t120*t2905;
  t6217 = t6102 + t6126;
  t6852 = -1.*t1138*t156;
  t6889 = t357*t1140;
  t7036 = t6852 + t6889;
  t8304 = -1.*t1138*t120;
  t8375 = -1.*t1405*t357;
  t8603 = t8304 + t8375;
  t8632 = t1405*t1138;
  t8633 = -1.*t120*t357;
  t8640 = t8632 + t8633;
  t5766 = -1.*t120*t4959;
  t5884 = t5766 + t2972;
  t6039 = 6.4*t4662*t5884;
  t6528 = t1405*t4959;
  t6555 = t120*t2905;
  t6620 = t6528 + t6555;
  t6722 = 6.4*t6217*t6620;
  t6797 = -1.*t120*t1388;
  t7248 = t1405*t7036;
  t7679 = t6797 + t7248;
  t8009 = 6.4*t4662*t7679;
  t8031 = t120*t7036;
  t8209 = t6102 + t8031;
  t8239 = 6.4*t6217*t8209;
  t8610 = Power(t8603,2);
  t8613 = 13.6*t8610;
  t8615 = t1138*t120;
  t8623 = t1405*t357;
  t8627 = t8615 + t8623;
  t8628 = 13.6*t8603*t8627;
  t8641 = Power(t8640,2);
  t8950 = 13.6*t8641;
  t8951 = -1.*t1405*t1138;
  t8957 = t120*t357;
  t8958 = t8951 + t8957;
  t8962 = 13.6*t8640*t8958;
  t8995 = Cos(var1[5]);
  t9160 = -1.*t8995*t120;
  t9362 = Sin(var1[5]);
  t9575 = -1.*t1405*t9362;
  t9626 = t9160 + t9575;
  t11407 = t1405*t8995;
  t12800 = -1.*t120*t9362;
  t12815 = t11407 + t12800;
  t14783 = Cos(var1[6]);
  t14798 = Sin(var1[6]);
  t14791 = -1.*t14783*t9362;
  t14799 = -1.*t8995*t14798;
  t14828 = t14791 + t14799;
  t14850 = t8995*t14783;
  t14855 = -1.*t9362*t14798;
  t14861 = t14850 + t14855;
  t14890 = t1405*t14861;
  t14905 = t14783*t9362;
  t14907 = t8995*t14798;
  t14913 = t14905 + t14907;
  t14933 = -1.*t120*t14861;
  t14889 = t120*t14828;
  t14896 = t14889 + t14890;
  t14914 = -1.*t120*t14913;
  t14917 = t14914 + t14890;
  t14927 = t1405*t14828;
  t14935 = t14927 + t14933;
  t14941 = t1405*t14913;
  t15033 = t120*t14861;
  t15281 = t14941 + t15033;
  t14849 = -1.*t120*t14828;
  t16393 = -1.*t8995*t14783;
  t16398 = t9362*t14798;
  t16535 = t16393 + t16398;
  t10241 = Power(t9626,2);
  t10250 = 13.6*t10241;
  t10957 = t8995*t120;
  t10960 = t1405*t9362;
  t10963 = t10957 + t10960;
  t11066 = 13.6*t9626*t10963;
  t12962 = Power(t12815,2);
  t14493 = 13.6*t12962;
  t14590 = -1.*t1405*t8995;
  t14633 = t120*t9362;
  t14747 = t14590 + t14633;
  t14749 = 13.6*t12815*t14747;
  t16135 = 6.4*t14896*t14917;
  t16266 = 6.4*t14935*t15281;
  t16536 = t1405*t16535;
  t16538 = t14849 + t16536;
  t16619 = 6.4*t14896*t16538;
  t16657 = t120*t16535;
  t17003 = t14927 + t16657;
  t17056 = 6.4*t14935*t17003;
  t8963 = t8613 + t8628 + t8950 + t8962 + t6039 + t6722 + t8009 + t8239;
  t17635 = Power(t4662,2);
  t17651 = 6.4*t17635;
  t17738 = t120*t4959;
  t17761 = t17738 + t7248;
  t17762 = 6.4*t4662*t17761;
  t17817 = 6.4*t6620*t8209;
  t17865 = Power(t8209,2);
  t17996 = 6.4*t17865;
  t8261 = t6039 + t6722 + t8009 + t8239;
  t18039 = t17651 + t17762 + t17817 + t17996;
  t18257 = -0.5*var2[4]*t18039;
  t17110 = t10250 + t11066 + t14493 + t14749 + t16135 + t16266 + t16619 + t17056;
  t19099 = Power(t14896,2);
  t19100 = 6.4*t19099;
  t19118 = t120*t14913;
  t19189 = t19118 + t16536;
  t19195 = 6.4*t14896*t19189;
  t19199 = 6.4*t15281*t17003;
  t19201 = Power(t17003,2);
  t19202 = 6.4*t19201;
  t17079 = t16135 + t16266 + t16619 + t17056;
  t19235 = t19100 + t19195 + t19199 + t19202;
  t20423 = -0.5*var2[6]*t19235;
  t20483 = 6.4*t4662*t6620;
  t20488 = 6.4*t4662*t8209;
  t20523 = 13.6*t8603*t8640;
  t20546 = 13.6*t8627*t8640;
  t20587 = 13.6*t9626*t12815;
  t20592 = 13.6*t10963*t12815;
  t20671 = 6.4*t14896*t15281;
  t20672 = 6.4*t14896*t17003;
  t20579 = 6.4*t4662*t6217;
  t20581 = 6.4*t5884*t6620;
  t20606 = 6.4*t14896*t14935;
  t20613 = 6.4*t14917*t15281;
  t20614 = t20523 + t20546 + t20579 + t20581 + t20587 + t20592 + t20606 + t20613;
  t20554 = t20523 + t20546 + t20483 + t20488;
  t20492 = t20483 + t20488;
  t20809 = t20587 + t20592 + t20671 + t20672;
  t20754 = t20671 + t20672;
  t8979 = -1.*t1405*t4959;
  t8982 = t8979 + t6126;
  t8970 = -1.*t1405*t2905;
  t8971 = t6797 + t8970;
  t20820 = 6.4*t5884*t6217;
  t20832 = 3.2*t4662*t8982;
  t20833 = 3.2*t8971*t6620;
  t20866 = 6.4*t6217*t7679;
  t20872 = -1.*t1405*t1388;
  t20874 = -1.*t120*t7036;
  t20900 = t20872 + t20874;
  t20901 = 3.2*t4662*t20900;
  t20904 = 3.2*t8971*t8209;
  t21049 = 20.4*t8603*t8640;
  t21052 = 6.8*t8627*t8640;
  t21053 = 20.4*t8603*t8958;
  t21059 = 6.8*t8627*t8958;
  t14874 = -1.*t1405*t14861;
  t14877 = t14849 + t14874;
  t14939 = -1.*t1405*t14913;
  t14940 = t14939 + t14933;
  t21137 = -1.*t1405*t14828;
  t21123 = 20.4*t9626*t12815;
  t21124 = 6.8*t10963*t12815;
  t21127 = 20.4*t9626*t14747;
  t21131 = 6.8*t10963*t14747;
  t21219 = 6.4*t14917*t14935;
  t21221 = 3.2*t14896*t14940;
  t21236 = 3.2*t14877*t15281;
  t21241 = 6.4*t14935*t16538;
  t21251 = -1.*t120*t16535;
  t21256 = t21137 + t21251;
  t21259 = 3.2*t14896*t21256;
  t21260 = 3.2*t14877*t17003;
  t21061 = t21049 + t21052 + t21053 + t21059 + t20820 + t20832 + t20833 + t20866 + t20901 + t20904;
  t21301 = 3.2*t6620*t7679;
  t21304 = 3.2*t6217*t17761;
  t21308 = t6528 + t20874;
  t21309 = 3.2*t4662*t21308;
  t21310 = 3.2*t5884*t8209;
  t21315 = 6.4*t7679*t8209;
  t21033 = t20820 + t20832 + t20833 + t20866 + t20901 + t20904;
  t21324 = t20579 + t21301 + t21304 + t21309 + t21310 + t21315;
  t21325 = -0.5*var2[4]*t21324;
  t21265 = t21123 + t21124 + t21127 + t21131 + t21219 + t21221 + t21236 + t21241 + t21259 + t21260;
  t21384 = 3.2*t15281*t16538;
  t21385 = 3.2*t14935*t19189;
  t21406 = t14941 + t21251;
  t21410 = 3.2*t14896*t21406;
  t21414 = 3.2*t14917*t17003;
  t21415 = 6.4*t16538*t17003;
  t21262 = t21219 + t21221 + t21236 + t21241 + t21259 + t21260;
  t21416 = t20606 + t21384 + t21385 + t21410 + t21414 + t21415;
  t21417 = -0.5*var2[6]*t21416;
  t21442 = 3.2*t4662*t5884;
  t21443 = 3.2*t6217*t6620;
  t21444 = 3.2*t4662*t7679;
  t21445 = 3.2*t6217*t8209;
  t21448 = 6.8*t8610;
  t21449 = 6.8*t8603*t8627;
  t21476 = 6.8*t8641;
  t21477 = 6.8*t8640*t8958;
  t8973 = Power(t5884,2);
  t8977 = Power(t6217,2);
  t14918 = Power(t14917,2);
  t14936 = Power(t14935,2);
  t21486 = 6.8*t10241;
  t21490 = 6.8*t9626*t10963;
  t21491 = 6.8*t12962;
  t21492 = 6.8*t12815*t14747;
  t21507 = 3.2*t14896*t14917;
  t21508 = 3.2*t14935*t15281;
  t21509 = 3.2*t14896*t16538;
  t21511 = 3.2*t14935*t17003;
  t21482 = 3.2*t8971*t4662;
  t21483 = 3.2*t8973;
  t21484 = 3.2*t8977;
  t21485 = 3.2*t8982*t6620;
  t21493 = 3.2*t14877*t14896;
  t21494 = 3.2*t14918;
  t21495 = 3.2*t14936;
  t21496 = 3.2*t14940*t15281;
  t21497 = t21448 + t21449 + t21476 + t21477 + t21482 + t21483 + t21484 + t21485 + t21486 + t21490 + t21491 + t21492 + t21493 + t21494 + t21495 + t21496;
  t21480 = t21448 + t21449 + t21476 + t21477 + t21442 + t21443 + t21444 + t21445;
  t21446 = t21442 + t21443 + t21444 + t21445;
  t21514 = t21486 + t21490 + t21491 + t21492 + t21507 + t21508 + t21509 + t21511;
  t21512 = t21507 + t21508 + t21509 + t21511;
  t21528 = -1.*t156;
  t21545 = 1. + t21528;
  t21546 = 0.4*t21545;
  t21547 = 0.64*t156;
  t21548 = t21546 + t21547;
  t21549 = t21548*t357;
  t21550 = 0.24*t1138*t1140;
  t21551 = t21549 + t21550;
  t21553 = t1138*t21548;
  t21554 = -0.24*t357*t1140;
  t21555 = t21553 + t21554;
  t21561 = -1.*t21548*t357;
  t21562 = -0.24*t1138*t1140;
  t21565 = t21561 + t21562;
  t21552 = -1.*t21551*t2905;
  t21556 = -1.*t1388*t21555;
  t21559 = t21552 + t21556;
  t21560 = 3.2*t6217*t21559;
  t21567 = t21551*t2905;
  t21568 = t1388*t21555;
  t21574 = t21551*t4959;
  t21575 = t2905*t21555;
  t21578 = t21574 + t21575;
  t21579 = 3.2*t21578*t7679;
  t21588 = -0.24*t156*t357;
  t21589 = t21588 + t21562;
  t21581 = -1.*t1388*t21551;
  t21591 = 0.24*t1138*t156;
  t21592 = t21591 + t21554;
  t21583 = -1.*t21555*t7036;
  t21522 = Power(t1138,2);
  t21523 = 0.11*t21522;
  t21524 = Power(t357,2);
  t21525 = 0.11*t21524;
  t21526 = t21523 + t21525;
  t21527 = 6.8*t8958*t21526;
  t21615 = -1.*t14783;
  t21616 = 1. + t21615;
  t21617 = 0.4*t21616;
  t21618 = 0.64*t14783;
  t21619 = t21617 + t21618;
  t21620 = t21619*t9362;
  t21621 = 0.24*t8995*t14798;
  t21622 = t21620 + t21621;
  t21624 = t8995*t21619;
  t21625 = -0.24*t9362*t14798;
  t21626 = t21624 + t21625;
  t21607 = Power(t8995,2);
  t21608 = 0.11*t21607;
  t21611 = Power(t9362,2);
  t21612 = 0.11*t21611;
  t21613 = t21608 + t21612;
  t21614 = 6.8*t14747*t21613;
  t21623 = -1.*t21622*t14861;
  t21627 = -1.*t14828*t21626;
  t21628 = t21623 + t21627;
  t21630 = t21622*t14913;
  t21631 = t14861*t21626;
  t21632 = t21630 + t21631;
  t21637 = -1.*t21619*t9362;
  t21638 = -0.24*t8995*t14798;
  t21639 = t21637 + t21638;
  t21636 = 3.2*t14935*t21628;
  t21641 = t21622*t14861;
  t21642 = t14828*t21626;
  t21646 = 3.2*t21632*t16538;
  t21655 = -0.24*t14783*t9362;
  t21656 = t21655 + t21638;
  t21648 = -1.*t14828*t21622;
  t21658 = 0.24*t8995*t14783;
  t21659 = t21658 + t21625;
  t21650 = -1.*t21626*t16535;
  t21566 = t21565*t2905;
  t21569 = t4959*t21555;
  t21572 = t21566 + t21567 + t21568 + t21569;
  t21573 = 3.2*t6217*t21572;
  t21580 = -1.*t1388*t21565;
  t21582 = -1.*t2905*t21555;
  t21584 = t21580 + t21581 + t21582 + t21583;
  t21585 = 3.2*t5884*t21584;
  t21586 = t21527 + t21560 + t21573 + t21579 + t21585;
  t21678 = -1.*t1138*t21548;
  t21679 = 0.24*t357*t1140;
  t21680 = t21678 + t21679;
  t21672 = 3.2*t21578*t17761;
  t21673 = 3.2*t21559*t8209;
  t21590 = t21589*t2905;
  t21593 = t4959*t21592;
  t21594 = t21590 + t21567 + t21568 + t21593;
  t21677 = -1.*t4959*t21555;
  t21683 = -1.*t21551*t7036;
  t21596 = -1.*t1388*t21589;
  t21597 = -1.*t2905*t21592;
  t21598 = t21596 + t21581 + t21597 + t21583;
  t21688 = t1388*t21551;
  t21701 = -0.24*t1138*t156;
  t21702 = t21701 + t21679;
  t21692 = t21555*t7036;
  t21595 = 3.2*t6217*t21594;
  t21599 = 3.2*t5884*t21598;
  t21600 = t21560 + t21595 + t21579 + t21599;
  t21697 = 3.2*t21572*t8209;
  t21698 = 3.2*t21594*t8209;
  t21699 = -1.*t21589*t2905;
  t21700 = -1.*t1388*t21592;
  t21703 = -1.*t1388*t21702;
  t21704 = -1.*t21565*t7036;
  t21705 = -1.*t21589*t7036;
  t21706 = t21699 + t21556 + t21677 + t21700 + t21703 + t21704 + t21705 + t21683;
  t21707 = 3.2*t6620*t21706;
  t21708 = 3.2*t4662*t21584;
  t21709 = 3.2*t4662*t21598;
  t21710 = t1388*t21565;
  t21711 = t1388*t21589;
  t21712 = t21589*t4959;
  t21713 = t2905*t21592;
  t21714 = t2905*t21702;
  t21715 = t21710 + t21711 + t21688 + t21712 + t21575 + t21713 + t21714 + t21692;
  t21716 = 3.2*t4662*t21715;
  t21717 = t21672 + t21673 + t21697 + t21698 + t21707 + t21708 + t21709 + t21716;
  t21640 = t21639*t14861;
  t21643 = t14913*t21626;
  t21644 = t21640 + t21641 + t21642 + t21643;
  t21645 = 3.2*t14935*t21644;
  t21647 = -1.*t14828*t21639;
  t21649 = -1.*t14861*t21626;
  t21651 = t21647 + t21648 + t21649 + t21650;
  t21652 = 3.2*t14917*t21651;
  t21653 = t21614 + t21636 + t21645 + t21646 + t21652;
  t21744 = -1.*t8995*t21619;
  t21745 = 0.24*t9362*t14798;
  t21746 = t21744 + t21745;
  t21738 = 3.2*t21632*t19189;
  t21739 = 3.2*t21628*t17003;
  t21657 = t21656*t14861;
  t21660 = t14913*t21659;
  t21661 = t21657 + t21641 + t21642 + t21660;
  t21743 = -1.*t14913*t21626;
  t21749 = -1.*t21622*t16535;
  t21663 = -1.*t14828*t21656;
  t21664 = -1.*t14861*t21659;
  t21665 = t21663 + t21648 + t21664 + t21650;
  t21754 = t14828*t21622;
  t21767 = -0.24*t8995*t14783;
  t21768 = t21767 + t21745;
  t21758 = t21626*t16535;
  t21662 = 3.2*t14935*t21661;
  t21666 = 3.2*t14917*t21665;
  t21667 = t21636 + t21662 + t21646 + t21666;
  t21763 = 3.2*t21644*t17003;
  t21764 = 3.2*t21661*t17003;
  t21765 = -1.*t21656*t14861;
  t21766 = -1.*t14828*t21659;
  t21769 = -1.*t14828*t21768;
  t21770 = -1.*t21639*t16535;
  t21771 = -1.*t21656*t16535;
  t21772 = t21765 + t21627 + t21743 + t21766 + t21769 + t21770 + t21771 + t21749;
  t21773 = 3.2*t15281*t21772;
  t21774 = 3.2*t14896*t21651;
  t21775 = 3.2*t14896*t21665;
  t21776 = t14828*t21639;
  t21777 = t14828*t21656;
  t21778 = t21656*t14913;
  t21779 = t14861*t21659;
  t21780 = t14861*t21768;
  t21781 = t21776 + t21777 + t21754 + t21778 + t21631 + t21779 + t21780 + t21758;
  t21782 = 3.2*t14896*t21781;
  t21783 = t21738 + t21739 + t21763 + t21764 + t21773 + t21774 + t21775 + t21782;
  t21804 = 3.2*t4662*t21559;
  t21806 = 3.2*t21578*t8209;
  t21803 = 6.8*t8603*t21526;
  t21817 = 6.8*t9626*t21613;
  t21822 = 3.2*t14896*t21628;
  t21824 = 3.2*t21632*t17003;
  t21814 = -2.88*t120;
  t21815 = 3.2*t5884*t21559;
  t21816 = 3.2*t6217*t21578;
  t21818 = 3.2*t14917*t21628;
  t21819 = 3.2*t14935*t21632;
  t21820 = t21814 + t21803 + t21815 + t21816 + t21817 + t21818 + t21819;
  t21805 = 3.2*t4662*t21572;
  t21807 = 3.2*t6620*t21584;
  t21808 = t21803 + t21804 + t21805 + t21806 + t21807;
  t21810 = 3.2*t4662*t21594;
  t21811 = 3.2*t6620*t21598;
  t21812 = t21804 + t21810 + t21806 + t21811;
  t21823 = 3.2*t14896*t21644;
  t21825 = 3.2*t15281*t21651;
  t21826 = t21817 + t21822 + t21823 + t21824 + t21825;
  t21828 = 3.2*t14896*t21661;
  t21829 = 3.2*t15281*t21665;
  t21830 = t21822 + t21828 + t21824 + t21829;
  t21838 = 0.748*t8958;
  t21844 = t21548*t1140;
  t21845 = -0.24*t156*t1140;
  t21846 = t21844 + t21845;
  t21839 = t21548*t156;
  t21840 = Power(t1140,2);
  t21841 = 0.24*t21840;
  t21842 = t21839 + t21841;
  t21850 = 3.2*t21846*t6217;
  t21851 = 3.2*t21842*t7679;
  t21852 = t21838 + t21850 + t21851;
  t21854 = Power(t156,2);
  t21855 = -0.24*t21854;
  t21856 = t21839 + t21855;
  t21867 = 3.2*t21842*t17761;
  t21868 = 3.2*t21846*t8209;
  t21858 = -1.*t21548*t1140;
  t21859 = 0.24*t156*t1140;
  t21860 = t21858 + t21859;
  t21857 = 3.2*t21856*t5884;
  t21861 = 3.2*t21860*t6217;
  t21862 = t21857 + t21850 + t21861 + t21851;
  t21871 = 3.2*t21856*t4662;
  t21872 = 3.2*t21860*t8209;
  t21873 = t21871 + t21867 + t21868 + t21872;
  t21890 = 0.748*t8603;
  t21895 = 3.2*t21846*t4662;
  t21896 = 3.2*t21842*t8209;
  t21891 = 3.2*t21846*t5884;
  t21892 = 3.2*t21842*t6217;
  t21893 = t21890 + t21891 + t21892;
  t21897 = t21890 + t21895 + t21896;
  t21899 = 3.2*t21860*t4662;
  t21900 = 3.2*t21856*t6620;
  t21901 = t21895 + t21899 + t21900 + t21896;
  t21912 = -0.384*var2[2]*t7679;
  t21913 = -0.384*var2[3]*t17761;
  t21914 = -0.384*var2[4]*t17761;
  t21915 = t21912 + t21913 + t21914;
  t21916 = var2[0]*t21915;
  t21922 = -0.384*var2[0]*t8209;
  t21923 = 0.748*t14747;
  t21929 = t21619*t14798;
  t21930 = -0.24*t14783*t14798;
  t21931 = t21929 + t21930;
  t21924 = t21619*t14783;
  t21925 = Power(t14798,2);
  t21926 = 0.24*t21925;
  t21927 = t21924 + t21926;
  t21935 = 3.2*t21931*t14935;
  t21936 = 3.2*t21927*t16538;
  t21937 = t21923 + t21935 + t21936;
  t21939 = Power(t14783,2);
  t21940 = -0.24*t21939;
  t21941 = t21924 + t21940;
  t21952 = 3.2*t21927*t19189;
  t21953 = 3.2*t21931*t17003;
  t21943 = -1.*t21619*t14798;
  t21944 = 0.24*t14783*t14798;
  t21945 = t21943 + t21944;
  t21942 = 3.2*t21941*t14917;
  t21946 = 3.2*t21945*t14935;
  t21947 = t21942 + t21935 + t21946 + t21936;
  t21956 = 3.2*t21941*t14896;
  t21957 = 3.2*t21945*t17003;
  t21958 = t21956 + t21952 + t21953 + t21957;
  t21975 = 0.748*t9626;
  t21980 = 3.2*t21931*t14896;
  t21981 = 3.2*t21927*t17003;
  t21976 = 3.2*t21931*t14917;
  t21977 = 3.2*t21927*t14935;
  t21978 = t21975 + t21976 + t21977;
  t21982 = t21975 + t21980 + t21981;
  t21984 = 3.2*t21945*t14896;
  t21985 = 3.2*t21941*t15281;
  t21986 = t21980 + t21984 + t21985 + t21981;
  t21997 = -0.384*var2[2]*t16538;
  t21998 = -0.384*var2[5]*t19189;
  t21999 = -0.384*var2[6]*t19189;
  t22000 = t21997 + t21998 + t21999;
  t22001 = var2[0]*t22000;
  t22007 = -0.384*var2[0]*t17003;
  p_output1[0]=var2[0]*(-0.5*(t10250 + t11066 + t14493 + t14749 + 6.4*t14877*t14896 + 6.4*t14918 + 6.4*t14936 + 6.4*t14940*t15281 + t8613 + t8628 + t8950 + t8962 + 6.4*t4662*t8971 + 6.4*t8973 + 6.4*t8977 + 6.4*t6620*t8982)*var2[2] - 0.5*t8963*var2[3] - 0.5*t8261*var2[4] - 0.5*t17110*var2[5] - 0.5*t17079*var2[6]);
  p_output1[1]=var2[0]*(t18257 - 0.5*t8963*var2[2] - 0.5*(t17651 + t17762 + t17817 + t17996 + t8613 + t8628 + t8950 + t8962)*var2[3]);
  p_output1[2]=var2[0]*(t18257 - 0.5*t8261*var2[2] - 0.5*t18039*var2[3]);
  p_output1[3]=var2[0]*(t20423 - 0.5*t17110*var2[2] - 0.5*(t10250 + t11066 + t14493 + t14749 + t19100 + t19195 + t19199 + t19202)*var2[5]);
  p_output1[4]=var2[0]*(t20423 - 0.5*t17079*var2[2] - 0.5*t19235*var2[5]);
  p_output1[5]=-0.5*t20614*var2[2] - 0.5*t20554*var2[3] - 0.5*t20492*var2[4] - 0.5*t20809*var2[5] - 0.5*t20754*var2[6];
  p_output1[6]=-0.5*t20614*var2[0];
  p_output1[7]=-0.5*t20554*var2[0];
  p_output1[8]=-0.5*t20492*var2[0];
  p_output1[9]=-0.5*t20809*var2[0];
  p_output1[10]=-0.5*t20754*var2[0];
  p_output1[11]=var2[0]*(-0.5*(9.6*t14877*t14935 + 9.6*t14917*t14940 + 3.2*t15281*(t14874 + t19118) + t21049 + t21052 + t21053 + t21059 + t21123 + t21124 + t21127 + t21131 + 3.2*t14896*(t15033 + t21137) + 3.2*t4662*(t20872 + t6555) + 3.2*t6620*(t17738 + t8970) + 9.6*t6217*t8971 + 9.6*t5884*t8982)*var2[2] - 0.5*t21061*var2[3] - 0.5*t21033*var2[4] - 0.5*t21265*var2[5] - 0.5*t21262*var2[6]);
  p_output1[12]=var2[0]*(t21325 - 0.5*t21061*var2[2] - 0.5*(t20579 + t21049 + t21052 + t21053 + t21059 + t21301 + t21304 + t21309 + t21310 + t21315)*var2[3]);
  p_output1[13]=var2[0]*(t21325 - 0.5*t21033*var2[2] - 0.5*t21324*var2[3]);
  p_output1[14]=var2[0]*(t21417 - 0.5*t21265*var2[2] - 0.5*(t20606 + t21123 + t21124 + t21127 + t21131 + t21384 + t21385 + t21410 + t21414 + t21415)*var2[5]);
  p_output1[15]=var2[0]*(t21417 - 0.5*t21262*var2[2] - 0.5*t21416*var2[5]);
  p_output1[16]=-0.5*t21497*var2[2] - 0.5*t21480*var2[3] - 0.5*t21446*var2[4] - 0.5*t21514*var2[5] - 0.5*t21512*var2[6];
  p_output1[17]=-0.5*t21497*var2[0];
  p_output1[18]=-0.5*t21480*var2[0];
  p_output1[19]=-0.5*t21446*var2[0];
  p_output1[20]=-0.5*t21514*var2[0];
  p_output1[21]=-0.5*t21512*var2[0];
  p_output1[22]=var2[0]*(-0.5*(-2.88*t1405 + t21527 + t21614 + 3.2*t14940*t21628 + 3.2*t14877*t21632 + 3.2*t21578*t8971 + 3.2*t21559*t8982)*var2[2] - 0.5*t21586*var2[3] - 0.5*t21600*var2[4] - 0.5*t21653*var2[5] - 0.5*t21667*var2[6]);
  p_output1[23]=var2[0]*(-0.5*t21586*var2[2] - 0.5*(t21527 + t21672 + t21673 + 6.4*t21584*t4662 + 3.2*t4662*(2.*t1388*t21565 + t21688 + t21692 + 2.*t21555*t2905 + t21680*t2905 + t21565*t4959) + 3.2*t6620*(-2.*t1388*t21555 + t21677 - 1.*t1388*t21680 + t21683 - 1.*t21565*t2905 - 2.*t21565*t7036) + 6.4*t21572*t8209)*var2[3] - 0.5*t21717*var2[4]);
  p_output1[24]=var2[0]*(-0.5*t21600*var2[2] - 0.5*t21717*var2[3] - 0.5*(t21672 + t21673 + 6.4*t21598*t4662 + 3.2*(2.*t1388*t21589 + t21688 + t21692 + t21712 + t21714 + 2.*t21592*t2905)*t4662 + 3.2*t6620*(-2.*t1388*t21592 + t21677 + t21683 + t21699 + t21703 - 2.*t21589*t7036) + 6.4*t21594*t8209)*var2[4]);
  p_output1[25]=var2[0]*(-0.5*t21653*var2[2] - 0.5*(t21614 + 6.4*t17003*t21644 + 6.4*t14896*t21651 + t21738 + t21739 + 3.2*t15281*(-2.*t14828*t21626 - 1.*t14861*t21639 - 2.*t16535*t21639 + t21743 - 1.*t14828*t21746 + t21749) + 3.2*t14896*(2.*t14861*t21626 + 2.*t14828*t21639 + t14913*t21639 + t14861*t21746 + t21754 + t21758))*var2[5] - 0.5*t21783*var2[6]);
  p_output1[26]=var2[0]*(-0.5*t21667*var2[2] - 0.5*t21783*var2[5] - 0.5*(6.4*t17003*t21661 + 6.4*t14896*t21665 + t21738 + t21739 + 3.2*t15281*(-2.*t16535*t21656 - 2.*t14828*t21659 + t21743 + t21749 + t21765 + t21769) + 3.2*t14896*(2.*t14828*t21656 + 2.*t14861*t21659 + t21754 + t21758 + t21778 + t21780))*var2[6]);
  p_output1[27]=-0.5*t21820*var2[2] - 0.5*t21808*var2[3] - 0.5*t21812*var2[4] - 0.5*t21826*var2[5] - 0.5*t21830*var2[6];
  p_output1[28]=-0.5*t21820*var2[0];
  p_output1[29]=-0.5*t21808*var2[0];
  p_output1[30]=-0.5*t21812*var2[0];
  p_output1[31]=-0.5*t21826*var2[0];
  p_output1[32]=-0.5*t21830*var2[0];
  p_output1[33]=var2[0]*(-0.5*(t21838 + 3.2*t21842*t8971 + 3.2*t21846*t8982)*var2[2] - 0.5*t21852*var2[3] - 0.5*t21862*var2[4]);
  p_output1[34]=var2[0]*(-0.5*t21852*var2[2] - 0.5*(t21838 + t21867 + t21868)*var2[3] - 0.5*t21873*var2[4]);
  p_output1[35]=var2[0]*(-0.5*t21862*var2[2] - 0.5*t21873*var2[3] - 0.5*(t21867 + t21868 + 3.2*(-1.*t156*t21548 + 0.24*t21854)*t4662 + 6.4*t21856*t4662 + 3.2*t21860*t6620 + 6.4*t21860*t8209)*var2[4]);
  p_output1[36]=-0.5*t21893*var2[2] - 0.5*t21897*var2[3] - 0.5*t21901*var2[4];
  p_output1[37]=-0.5*t21893*var2[0];
  p_output1[38]=-0.5*t21897*var2[0];
  p_output1[39]=-0.5*t21901*var2[0];
  p_output1[40]=var2[0]*(-0.384*t8971*var2[2] - 0.384*t7679*var2[3] - 0.384*t7679*var2[4]);
  p_output1[41]=t21916;
  p_output1[42]=t21916;
  p_output1[43]=-0.384*t6217*var2[2] - 0.384*t8209*var2[3] - 0.384*t8209*var2[4];
  p_output1[44]=-0.384*t6217*var2[0];
  p_output1[45]=t21922;
  p_output1[46]=t21922;
  p_output1[47]=var2[0]*(-0.5*(t21923 + 3.2*t14877*t21927 + 3.2*t14940*t21931)*var2[2] - 0.5*t21937*var2[5] - 0.5*t21947*var2[6]);
  p_output1[48]=var2[0]*(-0.5*t21937*var2[2] - 0.5*(t21923 + t21952 + t21953)*var2[5] - 0.5*t21958*var2[6]);
  p_output1[49]=var2[0]*(-0.5*t21947*var2[2] - 0.5*t21958*var2[5] - 0.5*(3.2*t14896*(-1.*t14783*t21619 + 0.24*t21939) + 6.4*t14896*t21941 + 3.2*t15281*t21945 + 6.4*t17003*t21945 + t21952 + t21953)*var2[6]);
  p_output1[50]=-0.5*t21978*var2[2] - 0.5*t21982*var2[5] - 0.5*t21986*var2[6];
  p_output1[51]=-0.5*t21978*var2[0];
  p_output1[52]=-0.5*t21982*var2[0];
  p_output1[53]=-0.5*t21986*var2[0];
  p_output1[54]=var2[0]*(-0.384*t14877*var2[2] - 0.384*t16538*var2[5] - 0.384*t16538*var2[6]);
  p_output1[55]=t22001;
  p_output1[56]=t22001;
  p_output1[57]=-0.384*t14935*var2[2] - 0.384*t17003*var2[5] - 0.384*t17003*var2[6];
  p_output1[58]=-0.384*t14935*var2[0];
  p_output1[59]=t22007;
  p_output1[60]=t22007;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 61, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce1_vec1_five_link_walker.hh"

namespace RightStance
{

void J_Ce1_vec1_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
