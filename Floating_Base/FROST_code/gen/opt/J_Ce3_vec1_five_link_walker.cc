/*
 * Automatically Generated from Mathematica.
 * Tue 17 Mar 2020 21:35:53 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t2040;
  double t2037;
  double t2038;
  double t2041;
  double t2127;
  double t2029;
  double t2039;
  double t2042;
  double t2116;
  double t2118;
  double t2202;
  double t2203;
  double t2204;
  double t2221;
  double t2265;
  double t3755;
  double t3801;
  double t3813;
  double t4054;
  double t4086;
  double t5214;
  double t4729;
  double t4735;
  double t5221;
  double t5123;
  double t5238;
  double t5374;
  double t5386;
  double t5391;
  double t5425;
  double t5434;
  double t5453;
  double t5472;
  double t5505;
  double t5506;
  double t5511;
  double t5514;
  double t5515;
  double t5600;
  double t5601;
  double t5605;
  double t5579;
  double t5598;
  double t5599;
  double t2269;
  double t2275;
  double t3079;
  double t5607;
  double t5615;
  double t5619;
  double t4406;
  double t4315;
  double t4328;
  double t4357;
  double t4359;
  double t4414;
  double t5637;
  double t5643;
  double t5656;
  double t5658;
  double t5659;
  double t5653;
  double t5654;
  double t5655;
  double t5483;
  double t5494;
  double t5495;
  double t5661;
  double t5665;
  double t5671;
  double t5551;
  double t5539;
  double t5540;
  double t5541;
  double t5546;
  double t5568;
  double t5681;
  double t5689;
  double t5640;
  double t5641;
  double t5636;
  double t5638;
  double t5633;
  double t5634;
  double t5648;
  double t5651;
  double t5686;
  double t5687;
  double t5680;
  double t5682;
  double t5675;
  double t5676;
  double t5698;
  double t5699;
  double t5743;
  double t5744;
  double t5745;
  double t5747;
  double t5748;
  double t5749;
  double t5767;
  double t5768;
  double t5769;
  double t5771;
  double t5772;
  double t5773;
  double t3638;
  double t4250;
  double t4271;
  double t4282;
  double t4092;
  double t4095;
  double t4229;
  double t4240;
  double t5791;
  double t5793;
  double t5794;
  double t5795;
  double t5796;
  double t5606;
  double t5630;
  double t5631;
  double t5632;
  double t5642;
  double t5703;
  double t5704;
  double t5705;
  double t5706;
  double t5710;
  double t5711;
  double t5821;
  double t5822;
  double t5737;
  double t5738;
  double t5739;
  double t5740;
  double t5741;
  double t5742;
  double t5746;
  double t5750;
  double t5751;
  double t5753;
  double t5754;
  double t5758;
  double t5836;
  double t5840;
  double t5841;
  double t5798;
  double t5799;
  double t5807;
  double t5810;
  double t5811;
  double t5812;
  double t5816;
  double t5817;
  double t5818;
  double t5819;
  double t5823;
  double t5826;
  double t5830;
  double t5831;
  double t5832;
  double t5835;
  double t5847;
  double t5848;
  double t5852;
  double t7911;
  double t7929;
  double t5857;
  double t8036;
  double t8183;
  double t5860;
  double t5500;
  double t5528;
  double t5529;
  double t5530;
  double t5516;
  double t5524;
  double t5525;
  double t5526;
  double t8686;
  double t8687;
  double t8689;
  double t8691;
  double t8827;
  double t5660;
  double t5672;
  double t5673;
  double t5674;
  double t5688;
  double t5718;
  double t5720;
  double t5724;
  double t5725;
  double t5726;
  double t5727;
  double t9807;
  double t9808;
  double t5760;
  double t5761;
  double t5762;
  double t5764;
  double t5765;
  double t5766;
  double t5770;
  double t5774;
  double t5775;
  double t5777;
  double t5778;
  double t5779;
  double t11892;
  double t12010;
  double t13632;
  double t8842;
  double t8903;
  double t9185;
  double t9313;
  double t9326;
  double t9374;
  double t9575;
  double t9606;
  double t9651;
  double t9761;
  double t10296;
  double t10427;
  double t11688;
  double t11811;
  double t11817;
  double t11881;
  double t13663;
  double t13664;
  double t13759;
  double t13916;
  double t13917;
  double t13767;
  double t13919;
  double t13920;
  double t13792;
  double t5713;
  double t5715;
  double t5729;
  double t5731;
  double t13994;
  double t13995;
  double t13996;
  double t13997;
  double t13998;
  double t13999;
  double t14000;
  double t14001;
  double t14002;
  double t14003;
  double t14009;
  double t14010;
  double t14011;
  double t14012;
  double t14013;
  double t14014;
  double t14015;
  double t14017;
  double t14018;
  double t14019;
  double t14023;
  double t14024;
  double t14028;
  double t14029;
  double t14030;
  double t13959;
  double t13960;
  double t13961;
  double t13962;
  double t13972;
  double t13975;
  double t13977;
  double t13978;
  double t5808;
  double t5809;
  double t5824;
  double t5825;
  double t5833;
  double t5834;
  double t5842;
  double t5849;
  double t5850;
  double t5851;
  double t5853;
  double t5858;
  double t5865;
  double t5871;
  double t5872;
  double t5873;
  double t5888;
  double t5889;
  double t5646;
  double t14040;
  double t13983;
  double t14070;
  double t14071;
  double t14072;
  double t14041;
  double t5890;
  double t5891;
  double t5892;
  double t14042;
  double t14043;
  double t5905;
  double t5906;
  double t5909;
  double t14046;
  double t14047;
  double t14048;
  double t14049;
  double t14050;
  double t14051;
  double t14054;
  double t14055;
  double t14056;
  double t14057;
  double t14060;
  double t14061;
  double t14064;
  double t14065;
  double t7934;
  double t8208;
  double t8252;
  double t14069;
  double t14075;
  double t8487;
  double t8671;
  double t8672;
  double t14080;
  double t14103;
  double t14104;
  double t14084;
  double t13980;
  double t13982;
  double t14132;
  double t14133;
  double t14134;
  double t14135;
  double t14136;
  double t14138;
  double t14139;
  double t14140;
  double t14141;
  double t14142;
  double t14124;
  double t14125;
  double t14126;
  double t5904;
  double t5910;
  double t5911;
  double t5917;
  double t5942;
  double t5943;
  double t7843;
  double t7910;
  double t8359;
  double t8674;
  double t8681;
  double t8682;
  double t8683;
  double t8685;
  double t14091;
  double t14092;
  double t14093;
  double t14094;
  double t14095;
  double t14096;
  double t14097;
  double t14098;
  double t14099;
  double t14100;
  double t14101;
  double t14102;
  double t14105;
  double t14106;
  double t14107;
  double t14108;
  double t14109;
  double t14110;
  double t14111;
  double t14112;
  double t14113;
  double t14114;
  double t14115;
  double t14116;
  double t14117;
  double t14118;
  double t14119;
  double t14120;
  double t14121;
  double t14122;
  double t14123;
  double t14128;
  double t14129;
  double t14178;
  double t14180;
  double t14181;
  double t14182;
  double t14172;
  double t14173;
  double t14174;
  double t14148;
  double t9254;
  double t9306;
  double t10297;
  double t10374;
  double t11850;
  double t11858;
  double t13657;
  double t13665;
  double t13666;
  double t13667;
  double t13760;
  double t13785;
  double t13793;
  double t13821;
  double t13822;
  double t13823;
  double t13835;
  double t13837;
  double t5692;
  double t14188;
  double t13990;
  double t14216;
  double t14217;
  double t14218;
  double t14189;
  double t13838;
  double t13839;
  double t13871;
  double t14190;
  double t14191;
  double t13873;
  double t13879;
  double t13897;
  double t14194;
  double t14195;
  double t14196;
  double t14197;
  double t14198;
  double t14199;
  double t14202;
  double t14203;
  double t14204;
  double t14205;
  double t14206;
  double t14207;
  double t14210;
  double t14211;
  double t13918;
  double t13921;
  double t13922;
  double t14215;
  double t14221;
  double t13930;
  double t13931;
  double t13936;
  double t14226;
  double t14249;
  double t14250;
  double t14230;
  double t13985;
  double t13986;
  double t14278;
  double t14279;
  double t14280;
  double t14281;
  double t14282;
  double t14284;
  double t14285;
  double t14286;
  double t14287;
  double t14288;
  double t14270;
  double t14271;
  double t14272;
  double t13872;
  double t13902;
  double t13903;
  double t13904;
  double t13905;
  double t13906;
  double t13908;
  double t13913;
  double t13929;
  double t13943;
  double t13944;
  double t13945;
  double t13953;
  double t13954;
  double t14237;
  double t14238;
  double t14239;
  double t14240;
  double t14241;
  double t14242;
  double t14243;
  double t14244;
  double t14245;
  double t14246;
  double t14247;
  double t14248;
  double t14251;
  double t14252;
  double t14253;
  double t14254;
  double t14255;
  double t14256;
  double t14257;
  double t14258;
  double t14259;
  double t14260;
  double t14261;
  double t14262;
  double t14263;
  double t14264;
  double t14265;
  double t14266;
  double t14267;
  double t14268;
  double t14269;
  double t14274;
  double t14275;
  double t14324;
  double t14326;
  double t14327;
  double t14328;
  double t14318;
  double t14319;
  double t14320;
  double t14294;
  t2040 = Cos(var1[3]);
  t2037 = Cos(var1[4]);
  t2038 = Sin(var1[3]);
  t2041 = Sin(var1[4]);
  t2127 = Cos(var1[2]);
  t2029 = Sin(var1[2]);
  t2039 = -1.*t2037*t2038;
  t2042 = -1.*t2040*t2041;
  t2116 = t2039 + t2042;
  t2118 = -1.*t2029*t2116;
  t2202 = t2040*t2037;
  t2203 = -1.*t2038*t2041;
  t2204 = t2202 + t2203;
  t2221 = -1.*t2127*t2204;
  t2265 = t2118 + t2221;
  t3755 = -1.*t2037;
  t3801 = 1. + t3755;
  t3813 = 0.4*t3801;
  t4054 = 0.64*t2037;
  t4086 = t3813 + t4054;
  t5214 = Cos(var1[5]);
  t4729 = Cos(var1[6]);
  t4735 = Sin(var1[5]);
  t5221 = Sin(var1[6]);
  t5123 = -1.*t4729*t4735;
  t5238 = -1.*t5214*t5221;
  t5374 = t5123 + t5238;
  t5386 = -1.*t2029*t5374;
  t5391 = t5214*t4729;
  t5425 = -1.*t4735*t5221;
  t5434 = t5391 + t5425;
  t5453 = -1.*t2127*t5434;
  t5472 = t5386 + t5453;
  t5505 = -1.*t4729;
  t5506 = 1. + t5505;
  t5511 = 0.4*t5506;
  t5514 = 0.64*t4729;
  t5515 = t5511 + t5514;
  t5600 = t2127*t2040;
  t5601 = -1.*t2029*t2038;
  t5605 = t5600 + t5601;
  t5579 = -1.*t2040*t2029;
  t5598 = -1.*t2127*t2038;
  t5599 = t5579 + t5598;
  t2269 = -1.*t2127*t2040;
  t2275 = t2029*t2038;
  t3079 = t2269 + t2275;
  t5607 = t2040*t2029;
  t5615 = t2127*t2038;
  t5619 = t5607 + t5615;
  t4406 = -1.*t2029*t2204;
  t4315 = t2037*t2038;
  t4328 = t2040*t2041;
  t4357 = t4315 + t4328;
  t4359 = -1.*t2127*t4357;
  t4414 = t4359 + t4406;
  t5637 = t2127*t2204;
  t5643 = t2029*t2204;
  t5656 = t2127*t5214;
  t5658 = -1.*t2029*t4735;
  t5659 = t5656 + t5658;
  t5653 = -1.*t5214*t2029;
  t5654 = -1.*t2127*t4735;
  t5655 = t5653 + t5654;
  t5483 = -1.*t2127*t5214;
  t5494 = t2029*t4735;
  t5495 = t5483 + t5494;
  t5661 = t5214*t2029;
  t5665 = t2127*t4735;
  t5671 = t5661 + t5665;
  t5551 = -1.*t2029*t5434;
  t5539 = t4729*t4735;
  t5540 = t5214*t5221;
  t5541 = t5539 + t5540;
  t5546 = -1.*t2127*t5541;
  t5568 = t5546 + t5551;
  t5681 = t2127*t5434;
  t5689 = t2029*t5434;
  t5640 = t2029*t2116;
  t5641 = t5640 + t5637;
  t5636 = -1.*t2029*t4357;
  t5638 = t5636 + t5637;
  t5633 = t2127*t2116;
  t5634 = t5633 + t4406;
  t5648 = t2127*t4357;
  t5651 = t5648 + t5643;
  t5686 = t2029*t5374;
  t5687 = t5686 + t5681;
  t5680 = -1.*t2029*t5541;
  t5682 = t5680 + t5681;
  t5675 = t2127*t5374;
  t5676 = t5675 + t5551;
  t5698 = t2127*t5541;
  t5699 = t5698 + t5689;
  t5743 = t4086*t2038;
  t5744 = 0.24*t2040*t2041;
  t5745 = t5743 + t5744;
  t5747 = t2040*t4086;
  t5748 = -0.24*t2038*t2041;
  t5749 = t5747 + t5748;
  t5767 = t5515*t4735;
  t5768 = 0.24*t5214*t5221;
  t5769 = t5767 + t5768;
  t5771 = t5214*t5515;
  t5772 = -0.24*t4735*t5221;
  t5773 = t5771 + t5772;
  t3638 = -0.748*t3079;
  t4250 = t4086*t2041;
  t4271 = -0.24*t2037*t2041;
  t4282 = t4250 + t4271;
  t4092 = t4086*t2037;
  t4095 = Power(t2041,2);
  t4229 = 0.24*t4095;
  t4240 = t4092 + t4229;
  t5791 = -1.*t2040*t2037;
  t5793 = t2038*t2041;
  t5794 = t5791 + t5793;
  t5795 = t2127*t5794;
  t5796 = t2118 + t5795;
  t5606 = -20.4*t5599*t5605;
  t5630 = -6.8*t5619*t5605;
  t5631 = -20.4*t5599*t3079;
  t5632 = -6.8*t5619*t3079;
  t5642 = -1.*t2127*t2116;
  t5703 = Power(t5599,2);
  t5704 = -13.6*t5703;
  t5705 = -13.6*t5599*t5619;
  t5706 = Power(t5605,2);
  t5710 = -13.6*t5706;
  t5711 = -13.6*t5605*t3079;
  t5821 = t2029*t5794;
  t5822 = t5633 + t5821;
  t5737 = Power(t2040,2);
  t5738 = 0.11*t5737;
  t5739 = Power(t2038,2);
  t5740 = 0.11*t5739;
  t5741 = t5738 + t5740;
  t5742 = -6.8*t3079*t5741;
  t5746 = -1.*t5745*t2204;
  t5750 = -1.*t2116*t5749;
  t5751 = t5746 + t5750;
  t5753 = t5745*t4357;
  t5754 = t2204*t5749;
  t5758 = t5753 + t5754;
  t5836 = -1.*t4086*t2038;
  t5840 = -0.24*t2040*t2041;
  t5841 = t5836 + t5840;
  t5798 = 0.384*var2[4]*t5796;
  t5799 = -3.2*t4282*t5634;
  t5807 = -3.2*t4240*t5796;
  t5810 = -6.4*t5638*t5634;
  t5811 = -3.2*t5641*t4414;
  t5812 = -3.2*t2265*t5651;
  t5816 = -6.4*t5634*t5796;
  t5817 = -1.*t2029*t5794;
  t5818 = t5642 + t5817;
  t5819 = -3.2*t5641*t5818;
  t5823 = -3.2*t2265*t5822;
  t5826 = -6.4*t5641*t5638;
  t5830 = -6.4*t5634*t5651;
  t5831 = -6.4*t5641*t5796;
  t5832 = -6.4*t5634*t5822;
  t5835 = -3.2*t5634*t5751;
  t5847 = t5745*t2204;
  t5848 = t2116*t5749;
  t5852 = -3.2*t5758*t5796;
  t7911 = -0.24*t2037*t2038;
  t7929 = t7911 + t5840;
  t5857 = -1.*t2116*t5745;
  t8036 = 0.24*t2040*t2037;
  t8183 = t8036 + t5748;
  t5860 = -1.*t5749*t5794;
  t5500 = -0.748*t5495;
  t5528 = t5515*t5221;
  t5529 = -0.24*t4729*t5221;
  t5530 = t5528 + t5529;
  t5516 = t5515*t4729;
  t5524 = Power(t5221,2);
  t5525 = 0.24*t5524;
  t5526 = t5516 + t5525;
  t8686 = -1.*t5214*t4729;
  t8687 = t4735*t5221;
  t8689 = t8686 + t8687;
  t8691 = t2127*t8689;
  t8827 = t5386 + t8691;
  t5660 = -20.4*t5655*t5659;
  t5672 = -6.8*t5671*t5659;
  t5673 = -20.4*t5655*t5495;
  t5674 = -6.8*t5671*t5495;
  t5688 = -1.*t2127*t5374;
  t5718 = Power(t5655,2);
  t5720 = -13.6*t5718;
  t5724 = -13.6*t5655*t5671;
  t5725 = Power(t5659,2);
  t5726 = -13.6*t5725;
  t5727 = -13.6*t5659*t5495;
  t9807 = t2029*t8689;
  t9808 = t5675 + t9807;
  t5760 = Power(t5214,2);
  t5761 = 0.11*t5760;
  t5762 = Power(t4735,2);
  t5764 = 0.11*t5762;
  t5765 = t5761 + t5764;
  t5766 = -6.8*t5495*t5765;
  t5770 = -1.*t5769*t5434;
  t5774 = -1.*t5374*t5773;
  t5775 = t5770 + t5774;
  t5777 = t5769*t5541;
  t5778 = t5434*t5773;
  t5779 = t5777 + t5778;
  t11892 = -1.*t5515*t4735;
  t12010 = -0.24*t5214*t5221;
  t13632 = t11892 + t12010;
  t8842 = 0.384*var2[6]*t8827;
  t8903 = -3.2*t5530*t5676;
  t9185 = -3.2*t5526*t8827;
  t9313 = -6.4*t5682*t5676;
  t9326 = -3.2*t5687*t5568;
  t9374 = -3.2*t5472*t5699;
  t9575 = -6.4*t5676*t8827;
  t9606 = -1.*t2029*t8689;
  t9651 = t5688 + t9606;
  t9761 = -3.2*t5687*t9651;
  t10296 = -3.2*t5472*t9808;
  t10427 = -6.4*t5687*t5682;
  t11688 = -6.4*t5676*t5699;
  t11811 = -6.4*t5687*t8827;
  t11817 = -6.4*t5676*t9808;
  t11881 = -3.2*t5676*t5775;
  t13663 = t5769*t5434;
  t13664 = t5374*t5773;
  t13759 = -3.2*t5779*t8827;
  t13916 = -0.24*t4729*t4735;
  t13917 = t13916 + t12010;
  t13767 = -1.*t5374*t5769;
  t13919 = 0.24*t5214*t4729;
  t13920 = t13919 + t5772;
  t13792 = -1.*t5773*t8689;
  t5713 = Power(t5638,2);
  t5715 = Power(t5634,2);
  t5729 = Power(t5682,2);
  t5731 = Power(t5676,2);
  t13994 = -6.8*t5703;
  t13995 = -6.8*t5599*t5619;
  t13996 = -6.8*t5706;
  t13997 = -6.8*t5605*t3079;
  t13998 = -3.2*t2265*t5641;
  t13999 = -3.2*t5713;
  t14000 = -3.2*t5715;
  t14001 = -3.2*t4414*t5651;
  t14002 = -6.8*t5718;
  t14003 = -6.8*t5655*t5671;
  t14009 = -6.8*t5725;
  t14010 = -6.8*t5659*t5495;
  t14011 = -3.2*t5472*t5687;
  t14012 = -3.2*t5729;
  t14013 = -3.2*t5731;
  t14014 = -3.2*t5568*t5699;
  t14015 = t13994 + t13995 + t13996 + t13997 + t13998 + t13999 + t14000 + t14001 + t14002 + t14003 + t14009 + t14010 + t14011 + t14012 + t14013 + t14014;
  t14017 = 2.88*t2029;
  t14018 = -6.8*t5599*t5741;
  t14019 = -3.2*t5638*t5751;
  t14023 = -3.2*t5634*t5758;
  t14024 = -6.8*t5655*t5765;
  t14028 = -3.2*t5682*t5775;
  t14029 = -3.2*t5676*t5779;
  t14030 = t14017 + t14018 + t14019 + t14023 + t14024 + t14028 + t14029;
  t13959 = -0.748*t5599;
  t13960 = -3.2*t4282*t5638;
  t13961 = -3.2*t4240*t5634;
  t13962 = t13959 + t13960 + t13961;
  t13972 = -0.748*t5655;
  t13975 = -3.2*t5530*t5682;
  t13977 = -3.2*t5526*t5676;
  t13978 = t13972 + t13975 + t13977;
  t5808 = t3638 + t5799 + t5807;
  t5809 = -0.5*var2[3]*t5808;
  t5824 = t5606 + t5630 + t5631 + t5632 + t5810 + t5811 + t5812 + t5816 + t5819 + t5823;
  t5825 = -0.5*var2[1]*t5824;
  t5833 = t5704 + t5705 + t5710 + t5711 + t5826 + t5830 + t5831 + t5832;
  t5834 = -0.5*var2[0]*t5833;
  t5842 = t5841*t2204;
  t5849 = t4357*t5749;
  t5850 = t5842 + t5847 + t5848 + t5849;
  t5851 = -3.2*t5634*t5850;
  t5853 = -1.*t2116*t5841;
  t5858 = -1.*t2204*t5749;
  t5865 = t5853 + t5857 + t5858 + t5860;
  t5871 = -3.2*t5638*t5865;
  t5872 = t5742 + t5835 + t5851 + t5852 + t5871;
  t5873 = -0.5*var2[2]*t5872;
  t5888 = t5798 + t5809 + t5825 + t5834 + t5873;
  t5889 = var2[0]*t5888;
  t5646 = t2029*t4357;
  t14040 = t5646 + t5795;
  t13983 = -6.4*t5641*t5634;
  t14070 = -1.*t2040*t4086;
  t14071 = 0.24*t2038*t2041;
  t14072 = t14070 + t14071;
  t14041 = 0.384*var2[4]*t14040;
  t5890 = Power(t2037,2);
  t5891 = -0.24*t5890;
  t5892 = t4092 + t5891;
  t14042 = -3.2*t4240*t14040;
  t14043 = -3.2*t4282*t5822;
  t5905 = -1.*t4086*t2041;
  t5906 = 0.24*t2037*t2041;
  t5909 = t5905 + t5906;
  t14046 = -3.2*t5651*t5796;
  t14047 = -3.2*t5634*t14040;
  t14048 = t5648 + t5817;
  t14049 = -3.2*t5641*t14048;
  t14050 = -3.2*t5638*t5822;
  t14051 = -6.4*t5796*t5822;
  t14054 = Power(t5641,2);
  t14055 = -6.4*t14054;
  t14056 = -6.4*t5641*t14040;
  t14057 = -6.4*t5651*t5822;
  t14060 = Power(t5822,2);
  t14061 = -6.4*t14060;
  t14064 = -3.2*t5758*t14040;
  t14065 = -3.2*t5751*t5822;
  t7934 = t7929*t2204;
  t8208 = t4357*t8183;
  t8252 = t7934 + t5847 + t5848 + t8208;
  t14069 = -1.*t4357*t5749;
  t14075 = -1.*t5745*t5794;
  t8487 = -1.*t2116*t7929;
  t8671 = -1.*t2204*t8183;
  t8672 = t8487 + t5857 + t8671 + t5860;
  t14080 = t2116*t5745;
  t14103 = -0.24*t2040*t2037;
  t14104 = t14103 + t14071;
  t14084 = t5749*t5794;
  t13980 = -13.6*t5599*t5605;
  t13982 = -13.6*t5619*t5605;
  t14132 = -3.2*t5641*t5638;
  t14133 = -3.2*t5634*t5651;
  t14134 = -3.2*t5641*t5796;
  t14135 = -3.2*t5634*t5822;
  t14136 = t13994 + t13995 + t13996 + t13997 + t14132 + t14133 + t14134 + t14135;
  t14138 = -3.2*t5641*t5751;
  t14139 = -3.2*t5641*t5850;
  t14140 = -3.2*t5758*t5822;
  t14141 = -3.2*t5651*t5865;
  t14142 = t14018 + t14138 + t14139 + t14140 + t14141;
  t14124 = -3.2*t4282*t5641;
  t14125 = -3.2*t4240*t5822;
  t14126 = t13959 + t14124 + t14125;
  t5904 = -3.2*t5892*t5638;
  t5910 = -3.2*t5909*t5634;
  t5911 = t5904 + t5799 + t5910 + t5807;
  t5917 = -0.5*var2[3]*t5911;
  t5942 = t5810 + t5811 + t5812 + t5816 + t5819 + t5823;
  t5943 = -0.5*var2[1]*t5942;
  t7843 = t5826 + t5830 + t5831 + t5832;
  t7910 = -0.5*var2[0]*t7843;
  t8359 = -3.2*t5634*t8252;
  t8674 = -3.2*t5638*t8672;
  t8681 = t5835 + t8359 + t5852 + t8674;
  t8682 = -0.5*var2[2]*t8681;
  t8683 = t5798 + t5917 + t5943 + t7910 + t8682;
  t8685 = var2[0]*t8683;
  t14091 = -3.2*t5892*t5641;
  t14092 = -3.2*t5909*t5822;
  t14093 = t14091 + t14042 + t14043 + t14092;
  t14094 = -0.5*var2[3]*t14093;
  t14095 = t13983 + t14046 + t14047 + t14049 + t14050 + t14051;
  t14096 = -0.5*var2[1]*t14095;
  t14097 = t14055 + t14056 + t14057 + t14061;
  t14098 = -0.5*var2[0]*t14097;
  t14099 = -3.2*t5850*t5822;
  t14100 = -3.2*t8252*t5822;
  t14101 = -1.*t7929*t2204;
  t14102 = -1.*t2116*t8183;
  t14105 = -1.*t2116*t14104;
  t14106 = -1.*t5841*t5794;
  t14107 = -1.*t7929*t5794;
  t14108 = t14101 + t5750 + t14069 + t14102 + t14105 + t14106 + t14107 + t14075;
  t14109 = -3.2*t5651*t14108;
  t14110 = -3.2*t5641*t5865;
  t14111 = -3.2*t5641*t8672;
  t14112 = t2116*t5841;
  t14113 = t2116*t7929;
  t14114 = t7929*t4357;
  t14115 = t2204*t8183;
  t14116 = t2204*t14104;
  t14117 = t14112 + t14113 + t14080 + t14114 + t5754 + t14115 + t14116 + t14084;
  t14118 = -3.2*t5641*t14117;
  t14119 = t14064 + t14065 + t14099 + t14100 + t14109 + t14110 + t14111 + t14118;
  t14120 = -0.5*var2[2]*t14119;
  t14121 = t14041 + t14094 + t14096 + t14098 + t14120;
  t14122 = var2[0]*t14121;
  t14123 = 0.384*var2[4]*t5822;
  t14128 = -6.4*t5641*t5651;
  t14129 = -6.4*t5641*t5822;
  t14178 = t14132 + t14133 + t14134 + t14135;
  t14180 = -3.2*t5641*t8252;
  t14181 = -3.2*t5651*t8672;
  t14182 = t14138 + t14180 + t14140 + t14181;
  t14172 = -3.2*t5909*t5641;
  t14173 = -3.2*t5892*t5651;
  t14174 = t14124 + t14172 + t14173 + t14125;
  t14148 = 0.384*var2[0]*t5822;
  t9254 = t5500 + t8903 + t9185;
  t9306 = -0.5*var2[5]*t9254;
  t10297 = t5660 + t5672 + t5673 + t5674 + t9313 + t9326 + t9374 + t9575 + t9761 + t10296;
  t10374 = -0.5*var2[1]*t10297;
  t11850 = t5720 + t5724 + t5726 + t5727 + t10427 + t11688 + t11811 + t11817;
  t11858 = -0.5*var2[0]*t11850;
  t13657 = t13632*t5434;
  t13665 = t5541*t5773;
  t13666 = t13657 + t13663 + t13664 + t13665;
  t13667 = -3.2*t5676*t13666;
  t13760 = -1.*t5374*t13632;
  t13785 = -1.*t5434*t5773;
  t13793 = t13760 + t13767 + t13785 + t13792;
  t13821 = -3.2*t5682*t13793;
  t13822 = t5766 + t11881 + t13667 + t13759 + t13821;
  t13823 = -0.5*var2[2]*t13822;
  t13835 = t8842 + t9306 + t10374 + t11858 + t13823;
  t13837 = var2[0]*t13835;
  t5692 = t2029*t5541;
  t14188 = t5692 + t8691;
  t13990 = -6.4*t5687*t5676;
  t14216 = -1.*t5214*t5515;
  t14217 = 0.24*t4735*t5221;
  t14218 = t14216 + t14217;
  t14189 = 0.384*var2[6]*t14188;
  t13838 = Power(t4729,2);
  t13839 = -0.24*t13838;
  t13871 = t5516 + t13839;
  t14190 = -3.2*t5526*t14188;
  t14191 = -3.2*t5530*t9808;
  t13873 = -1.*t5515*t5221;
  t13879 = 0.24*t4729*t5221;
  t13897 = t13873 + t13879;
  t14194 = -3.2*t5699*t8827;
  t14195 = -3.2*t5676*t14188;
  t14196 = t5698 + t9606;
  t14197 = -3.2*t5687*t14196;
  t14198 = -3.2*t5682*t9808;
  t14199 = -6.4*t8827*t9808;
  t14202 = Power(t5687,2);
  t14203 = -6.4*t14202;
  t14204 = -6.4*t5687*t14188;
  t14205 = -6.4*t5699*t9808;
  t14206 = Power(t9808,2);
  t14207 = -6.4*t14206;
  t14210 = -3.2*t5779*t14188;
  t14211 = -3.2*t5775*t9808;
  t13918 = t13917*t5434;
  t13921 = t5541*t13920;
  t13922 = t13918 + t13663 + t13664 + t13921;
  t14215 = -1.*t5541*t5773;
  t14221 = -1.*t5769*t8689;
  t13930 = -1.*t5374*t13917;
  t13931 = -1.*t5434*t13920;
  t13936 = t13930 + t13767 + t13931 + t13792;
  t14226 = t5374*t5769;
  t14249 = -0.24*t5214*t4729;
  t14250 = t14249 + t14217;
  t14230 = t5773*t8689;
  t13985 = -13.6*t5655*t5659;
  t13986 = -13.6*t5671*t5659;
  t14278 = -3.2*t5687*t5682;
  t14279 = -3.2*t5676*t5699;
  t14280 = -3.2*t5687*t8827;
  t14281 = -3.2*t5676*t9808;
  t14282 = t14002 + t14003 + t14009 + t14010 + t14278 + t14279 + t14280 + t14281;
  t14284 = -3.2*t5687*t5775;
  t14285 = -3.2*t5687*t13666;
  t14286 = -3.2*t5779*t9808;
  t14287 = -3.2*t5699*t13793;
  t14288 = t14024 + t14284 + t14285 + t14286 + t14287;
  t14270 = -3.2*t5530*t5687;
  t14271 = -3.2*t5526*t9808;
  t14272 = t13972 + t14270 + t14271;
  t13872 = -3.2*t13871*t5682;
  t13902 = -3.2*t13897*t5676;
  t13903 = t13872 + t8903 + t13902 + t9185;
  t13904 = -0.5*var2[5]*t13903;
  t13905 = t9313 + t9326 + t9374 + t9575 + t9761 + t10296;
  t13906 = -0.5*var2[1]*t13905;
  t13908 = t10427 + t11688 + t11811 + t11817;
  t13913 = -0.5*var2[0]*t13908;
  t13929 = -3.2*t5676*t13922;
  t13943 = -3.2*t5682*t13936;
  t13944 = t11881 + t13929 + t13759 + t13943;
  t13945 = -0.5*var2[2]*t13944;
  t13953 = t8842 + t13904 + t13906 + t13913 + t13945;
  t13954 = var2[0]*t13953;
  t14237 = -3.2*t13871*t5687;
  t14238 = -3.2*t13897*t9808;
  t14239 = t14237 + t14190 + t14191 + t14238;
  t14240 = -0.5*var2[5]*t14239;
  t14241 = t13990 + t14194 + t14195 + t14197 + t14198 + t14199;
  t14242 = -0.5*var2[1]*t14241;
  t14243 = t14203 + t14204 + t14205 + t14207;
  t14244 = -0.5*var2[0]*t14243;
  t14245 = -3.2*t13666*t9808;
  t14246 = -3.2*t13922*t9808;
  t14247 = -1.*t13917*t5434;
  t14248 = -1.*t5374*t13920;
  t14251 = -1.*t5374*t14250;
  t14252 = -1.*t13632*t8689;
  t14253 = -1.*t13917*t8689;
  t14254 = t14247 + t5774 + t14215 + t14248 + t14251 + t14252 + t14253 + t14221;
  t14255 = -3.2*t5699*t14254;
  t14256 = -3.2*t5687*t13793;
  t14257 = -3.2*t5687*t13936;
  t14258 = t5374*t13632;
  t14259 = t5374*t13917;
  t14260 = t13917*t5541;
  t14261 = t5434*t13920;
  t14262 = t5434*t14250;
  t14263 = t14258 + t14259 + t14226 + t14260 + t5778 + t14261 + t14262 + t14230;
  t14264 = -3.2*t5687*t14263;
  t14265 = t14210 + t14211 + t14245 + t14246 + t14255 + t14256 + t14257 + t14264;
  t14266 = -0.5*var2[2]*t14265;
  t14267 = t14189 + t14240 + t14242 + t14244 + t14266;
  t14268 = var2[0]*t14267;
  t14269 = 0.384*var2[6]*t9808;
  t14274 = -6.4*t5687*t5699;
  t14275 = -6.4*t5687*t9808;
  t14324 = t14278 + t14279 + t14280 + t14281;
  t14326 = -3.2*t5687*t13922;
  t14327 = -3.2*t5699*t13936;
  t14328 = t14284 + t14326 + t14286 + t14327;
  t14318 = -3.2*t13897*t5687;
  t14319 = -3.2*t13871*t5699;
  t14320 = t14270 + t14318 + t14319 + t14271;
  t14294 = 0.384*var2[0]*t9808;
  p_output1[0]=var2[0]*(-0.5*(-6.4*t2265*t5641 - 6.4*t4414*t5651 - 6.4*t5472*t5687 - 6.4*t5568*t5699 + t5704 + t5705 + t5710 + t5711 - 6.4*t5713 - 6.4*t5715 + t5720 + t5724 + t5726 + t5727 - 6.4*t5729 - 6.4*t5731)*var2[0] - 0.5*(t5606 + t5630 + t5631 + t5632 - 9.6*t2265*t5634 - 9.6*t4414*t5638 - 3.2*t5641*(t5642 + t5643) - 3.2*(t2221 + t5646)*t5651 + t5660 + t5672 + t5673 + t5674 - 9.6*t5472*t5676 - 9.6*t5568*t5682 - 3.2*t5687*(t5688 + t5689) - 3.2*(t5453 + t5692)*t5699)*var2[1] - 0.5*(2.88*t2127 + t5742 - 3.2*t4414*t5751 - 3.2*t2265*t5758 + t5766 - 3.2*t5568*t5775 - 3.2*t5472*t5779)*var2[2] - 0.5*(t3638 - 3.2*t2265*t4240 - 3.2*t4282*t4414)*var2[3] + 0.384*t2265*var2[4] - 0.5*(t5500 - 3.2*t5472*t5526 - 3.2*t5530*t5568)*var2[5] + 0.384*t5472*var2[6]);
  p_output1[1]=t5889;
  p_output1[2]=t8685;
  p_output1[3]=t13837;
  p_output1[4]=t13954;
  p_output1[5]=-1.*(t13980 + t13982 + t13983 + t13985 + t13986 + t13990 - 6.4*t5638*t5651 - 6.4*t5682*t5699)*var2[0] - 0.5*t14015*var2[1] - 0.5*t14030*var2[2] - 0.5*t13962*var2[3] + 0.384*t5634*var2[4] - 0.5*t13978*var2[5] + 0.384*t5676*var2[6];
  p_output1[6]=-0.5*t14015*var2[0];
  p_output1[7]=-0.5*t14030*var2[0];
  p_output1[8]=-0.5*t13962*var2[0];
  p_output1[9]=0.384*t5634*var2[0];
  p_output1[10]=-0.5*t13978*var2[0];
  p_output1[11]=0.384*t5676*var2[0];
  p_output1[12]=t5889;
  p_output1[13]=var2[0]*(t14041 - 0.5*(t14055 + t14056 + t14057 + t14061 + t5704 + t5705 + t5710 + t5711)*var2[0] - 0.5*(t13983 + t14046 + t14047 + t14049 + t14050 + t14051 + t5606 + t5630 + t5631 + t5632)*var2[1] - 0.5*(t14064 + t14065 + t5742 - 3.2*t5641*(t14080 + t14084 + t14072*t2204 + 2.*t2204*t5749 + 2.*t2116*t5841 + t4357*t5841) - 3.2*t5651*(t14069 + t14075 - 1.*t14072*t2116 - 2.*t2116*t5749 - 1.*t2204*t5841 - 2.*t5794*t5841) - 6.4*t5822*t5850 - 6.4*t5641*t5865)*var2[2] - 0.5*(t14042 + t14043 + t3638)*var2[3]);
  p_output1[14]=t14122;
  p_output1[15]=t14123 - 1.*(t13980 + t13982 + t14128 + t14129)*var2[0] - 0.5*t14136*var2[1] - 0.5*t14142*var2[2] - 0.5*t14126*var2[3];
  p_output1[16]=-0.5*t14136*var2[0];
  p_output1[17]=-0.5*t14142*var2[0];
  p_output1[18]=-0.5*t14126*var2[0];
  p_output1[19]=t14148;
  p_output1[20]=t8685;
  p_output1[21]=t14122;
  p_output1[22]=var2[0]*(t14041 + t14096 + t14098 - 0.5*(t14064 + t14065 - 3.2*t5651*(t14069 + t14075 + t14101 + t14105 - 2.*t5794*t7929 - 2.*t2116*t8183) - 3.2*t5641*(t14080 + t14084 + t14114 + t14116 + 2.*t2116*t7929 + 2.*t2204*t8183) - 6.4*t5822*t8252 - 6.4*t5641*t8672)*var2[2] - 0.5*(t14042 + t14043 - 3.2*t5641*(-1.*t2037*t4086 + 0.24*t5890) - 6.4*t5641*t5892 - 3.2*t5651*t5909 - 6.4*t5822*t5909)*var2[3]);
  p_output1[23]=t14123 - 1.*(t14128 + t14129)*var2[0] - 0.5*t14178*var2[1] - 0.5*t14182*var2[2] - 0.5*t14174*var2[3];
  p_output1[24]=-0.5*t14178*var2[0];
  p_output1[25]=-0.5*t14182*var2[0];
  p_output1[26]=-0.5*t14174*var2[0];
  p_output1[27]=t14148;
  p_output1[28]=t13837;
  p_output1[29]=var2[0]*(t14189 - 0.5*(t14203 + t14204 + t14205 + t14207 + t5720 + t5724 + t5726 + t5727)*var2[0] - 0.5*(t13990 + t14194 + t14195 + t14197 + t14198 + t14199 + t5660 + t5672 + t5673 + t5674)*var2[1] - 0.5*(t14210 + t14211 - 6.4*t13793*t5687 + t5766 - 3.2*t5687*(t14226 + t14230 + 2.*t13632*t5374 + t14218*t5434 + t13632*t5541 + 2.*t5434*t5773) - 3.2*t5699*(t14215 + t14221 - 1.*t14218*t5374 - 1.*t13632*t5434 - 2.*t5374*t5773 - 2.*t13632*t8689) - 6.4*t13666*t9808)*var2[2] - 0.5*(t14190 + t14191 + t5500)*var2[5]);
  p_output1[30]=t14268;
  p_output1[31]=t14269 - 1.*(t13985 + t13986 + t14274 + t14275)*var2[0] - 0.5*t14282*var2[1] - 0.5*t14288*var2[2] - 0.5*t14272*var2[5];
  p_output1[32]=-0.5*t14282*var2[0];
  p_output1[33]=-0.5*t14288*var2[0];
  p_output1[34]=-0.5*t14272*var2[0];
  p_output1[35]=t14294;
  p_output1[36]=t13954;
  p_output1[37]=t14268;
  p_output1[38]=var2[0]*(t14189 + t14242 + t14244 - 0.5*(t14210 + t14211 - 6.4*t13936*t5687 - 3.2*(t14226 + t14230 + t14260 + t14262 + 2.*t13917*t5374 + 2.*t13920*t5434)*t5687 - 3.2*t5699*(t14215 + t14221 + t14247 + t14251 - 2.*t13920*t5374 - 2.*t13917*t8689) - 6.4*t13922*t9808)*var2[2] - 0.5*(t14190 + t14191 - 6.4*t13871*t5687 - 3.2*(0.24*t13838 - 1.*t4729*t5515)*t5687 - 3.2*t13897*t5699 - 6.4*t13897*t9808)*var2[5]);
  p_output1[39]=t14269 - 1.*(t14274 + t14275)*var2[0] - 0.5*t14324*var2[1] - 0.5*t14328*var2[2] - 0.5*t14320*var2[5];
  p_output1[40]=-0.5*t14324*var2[0];
  p_output1[41]=-0.5*t14328*var2[0];
  p_output1[42]=-0.5*t14320*var2[0];
  p_output1[43]=t14294;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 44, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec1_five_link_walker.hh"

namespace RightStance
{

void J_Ce3_vec1_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
