/*
 * Automatically Generated from Mathematica.
 * Wed 25 Mar 2020 22:51:55 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t4200;
  double t2735;
  double t3643;
  double t4243;
  double t9164;
  double t2274;
  double t3871;
  double t4275;
  double t4621;
  double t9141;
  double t9178;
  double t9179;
  double t9537;
  double t9719;
  double t9724;
  double t9796;
  double t9799;
  double t9800;
  double t9806;
  double t9807;
  double t11606;
  double t11510;
  double t11585;
  double t11624;
  double t11591;
  double t11701;
  double t11735;
  double t13151;
  double t13161;
  double t13162;
  double t13163;
  double t13167;
  double t13168;
  double t13296;
  double t13297;
  double t13306;
  double t13318;
  double t13319;
  double t13377;
  double t13396;
  double t13397;
  double t13368;
  double t13369;
  double t13370;
  double t9776;
  double t9781;
  double t9794;
  double t13404;
  double t13410;
  double t13411;
  double t10315;
  double t9862;
  double t9863;
  double t10302;
  double t10303;
  double t11341;
  double t13422;
  double t13433;
  double t13451;
  double t13452;
  double t13453;
  double t13441;
  double t13442;
  double t13450;
  double t13222;
  double t13223;
  double t13238;
  double t13455;
  double t13456;
  double t13457;
  double t13358;
  double t13349;
  double t13355;
  double t13356;
  double t13357;
  double t13359;
  double t13474;
  double t13480;
  double t13425;
  double t13431;
  double t13421;
  double t13423;
  double t13418;
  double t13419;
  double t13438;
  double t13439;
  double t13477;
  double t13478;
  double t13473;
  double t13475;
  double t13461;
  double t13462;
  double t13485;
  double t13486;
  double t13528;
  double t13529;
  double t13530;
  double t13532;
  double t13533;
  double t13534;
  double t13548;
  double t13549;
  double t13550;
  double t13552;
  double t13553;
  double t13554;
  double t9795;
  double t9844;
  double t9845;
  double t9859;
  double t9810;
  double t9817;
  double t9833;
  double t9834;
  double t13566;
  double t13567;
  double t13568;
  double t13569;
  double t13570;
  double t13398;
  double t13412;
  double t13414;
  double t13417;
  double t13432;
  double t13490;
  double t13491;
  double t13492;
  double t13493;
  double t13494;
  double t13495;
  double t13583;
  double t13584;
  double t13522;
  double t13523;
  double t13524;
  double t13525;
  double t13526;
  double t13527;
  double t13531;
  double t13535;
  double t13536;
  double t13538;
  double t13539;
  double t13540;
  double t13595;
  double t13596;
  double t13597;
  double t13571;
  double t13572;
  double t13573;
  double t13576;
  double t13577;
  double t13578;
  double t13579;
  double t13580;
  double t13581;
  double t13582;
  double t13585;
  double t13588;
  double t13589;
  double t13590;
  double t13591;
  double t13594;
  double t13599;
  double t13600;
  double t13604;
  double t13629;
  double t13630;
  double t13606;
  double t13632;
  double t13633;
  double t13608;
  double t13295;
  double t13346;
  double t13347;
  double t13348;
  double t13320;
  double t13324;
  double t13343;
  double t13344;
  double t13645;
  double t13646;
  double t13647;
  double t13648;
  double t13649;
  double t13454;
  double t13458;
  double t13459;
  double t13460;
  double t13479;
  double t13505;
  double t13506;
  double t13507;
  double t13508;
  double t13509;
  double t13510;
  double t13662;
  double t13663;
  double t13542;
  double t13543;
  double t13544;
  double t13545;
  double t13546;
  double t13547;
  double t13551;
  double t13555;
  double t13556;
  double t13558;
  double t13559;
  double t13560;
  double t13674;
  double t13675;
  double t13676;
  double t13650;
  double t13651;
  double t13652;
  double t13655;
  double t13656;
  double t13657;
  double t13658;
  double t13659;
  double t13660;
  double t13661;
  double t13664;
  double t13667;
  double t13668;
  double t13669;
  double t13670;
  double t13673;
  double t13678;
  double t13679;
  double t13683;
  double t13708;
  double t13709;
  double t13685;
  double t13711;
  double t13712;
  double t13687;
  double t13497;
  double t13499;
  double t13512;
  double t13514;
  double t13746;
  double t13747;
  double t13748;
  double t13749;
  double t13750;
  double t13751;
  double t13752;
  double t13753;
  double t13754;
  double t13755;
  double t13756;
  double t13757;
  double t13758;
  double t13759;
  double t13760;
  double t13761;
  double t13762;
  double t13764;
  double t13765;
  double t13766;
  double t13767;
  double t13768;
  double t13769;
  double t13770;
  double t13771;
  double t13725;
  double t13726;
  double t13727;
  double t13728;
  double t13731;
  double t13732;
  double t13733;
  double t13734;
  double t13574;
  double t13575;
  double t13586;
  double t13587;
  double t13592;
  double t13593;
  double t13598;
  double t13601;
  double t13602;
  double t13603;
  double t13605;
  double t13607;
  double t13609;
  double t13610;
  double t13611;
  double t13612;
  double t13613;
  double t13614;
  double t13436;
  double t13780;
  double t13738;
  double t13808;
  double t13809;
  double t13810;
  double t13781;
  double t13615;
  double t13616;
  double t13617;
  double t13782;
  double t13783;
  double t13619;
  double t13620;
  double t13621;
  double t13786;
  double t13787;
  double t13788;
  double t13789;
  double t13790;
  double t13791;
  double t13794;
  double t13795;
  double t13796;
  double t13797;
  double t13798;
  double t13799;
  double t13802;
  double t13803;
  double t13631;
  double t13634;
  double t13635;
  double t13807;
  double t13813;
  double t13637;
  double t13638;
  double t13639;
  double t13818;
  double t13841;
  double t13842;
  double t13822;
  double t13736;
  double t13737;
  double t13870;
  double t13871;
  double t13872;
  double t13873;
  double t13874;
  double t13876;
  double t13877;
  double t13878;
  double t13879;
  double t13880;
  double t13862;
  double t13863;
  double t13864;
  double t13618;
  double t13622;
  double t13623;
  double t13624;
  double t13625;
  double t13626;
  double t13627;
  double t13628;
  double t13636;
  double t13640;
  double t13641;
  double t13642;
  double t13643;
  double t13644;
  double t13829;
  double t13830;
  double t13831;
  double t13832;
  double t13833;
  double t13834;
  double t13835;
  double t13836;
  double t13837;
  double t13838;
  double t13839;
  double t13840;
  double t13843;
  double t13844;
  double t13845;
  double t13846;
  double t13847;
  double t13848;
  double t13849;
  double t13850;
  double t13851;
  double t13852;
  double t13853;
  double t13854;
  double t13855;
  double t13856;
  double t13857;
  double t13858;
  double t13859;
  double t13860;
  double t13861;
  double t13866;
  double t13867;
  double t13916;
  double t13918;
  double t13919;
  double t13920;
  double t13910;
  double t13911;
  double t13912;
  double t13886;
  double t13653;
  double t13654;
  double t13665;
  double t13666;
  double t13671;
  double t13672;
  double t13677;
  double t13680;
  double t13681;
  double t13682;
  double t13684;
  double t13686;
  double t13688;
  double t13689;
  double t13690;
  double t13691;
  double t13692;
  double t13693;
  double t13483;
  double t13926;
  double t13742;
  double t13954;
  double t13955;
  double t13956;
  double t13927;
  double t13694;
  double t13695;
  double t13696;
  double t13928;
  double t13929;
  double t13698;
  double t13699;
  double t13700;
  double t13932;
  double t13933;
  double t13934;
  double t13935;
  double t13936;
  double t13937;
  double t13940;
  double t13941;
  double t13942;
  double t13943;
  double t13944;
  double t13945;
  double t13948;
  double t13949;
  double t13710;
  double t13713;
  double t13714;
  double t13953;
  double t13959;
  double t13716;
  double t13717;
  double t13718;
  double t13964;
  double t13987;
  double t13988;
  double t13968;
  double t13740;
  double t13741;
  double t14016;
  double t14017;
  double t14018;
  double t14019;
  double t14020;
  double t14022;
  double t14023;
  double t14024;
  double t14025;
  double t14026;
  double t14008;
  double t14009;
  double t14010;
  double t13697;
  double t13701;
  double t13702;
  double t13703;
  double t13704;
  double t13705;
  double t13706;
  double t13707;
  double t13715;
  double t13719;
  double t13720;
  double t13721;
  double t13722;
  double t13723;
  double t13975;
  double t13976;
  double t13977;
  double t13978;
  double t13979;
  double t13980;
  double t13981;
  double t13982;
  double t13983;
  double t13984;
  double t13985;
  double t13986;
  double t13989;
  double t13990;
  double t13991;
  double t13992;
  double t13993;
  double t13994;
  double t13995;
  double t13996;
  double t13997;
  double t13998;
  double t13999;
  double t14000;
  double t14001;
  double t14002;
  double t14003;
  double t14004;
  double t14005;
  double t14006;
  double t14007;
  double t14012;
  double t14013;
  double t14062;
  double t14064;
  double t14065;
  double t14066;
  double t14056;
  double t14057;
  double t14058;
  double t14032;
  t4200 = Cos(var1[3]);
  t2735 = Cos(var1[4]);
  t3643 = Sin(var1[3]);
  t4243 = Sin(var1[4]);
  t9164 = Cos(var1[2]);
  t2274 = Sin(var1[2]);
  t3871 = -1.*t2735*t3643;
  t4275 = -1.*t4200*t4243;
  t4621 = t3871 + t4275;
  t9141 = -1.*t2274*t4621;
  t9178 = t4200*t2735;
  t9179 = -1.*t3643*t4243;
  t9537 = t9178 + t9179;
  t9719 = -1.*t9164*t9537;
  t9724 = t9141 + t9719;
  t9796 = -1.*t2735;
  t9799 = 1. + t9796;
  t9800 = 0.4*t9799;
  t9806 = 0.64*t2735;
  t9807 = t9800 + t9806;
  t11606 = Cos(var1[5]);
  t11510 = Cos(var1[6]);
  t11585 = Sin(var1[5]);
  t11624 = Sin(var1[6]);
  t11591 = -1.*t11510*t11585;
  t11701 = -1.*t11606*t11624;
  t11735 = t11591 + t11701;
  t13151 = -1.*t2274*t11735;
  t13161 = t11606*t11510;
  t13162 = -1.*t11585*t11624;
  t13163 = t13161 + t13162;
  t13167 = -1.*t9164*t13163;
  t13168 = t13151 + t13167;
  t13296 = -1.*t11510;
  t13297 = 1. + t13296;
  t13306 = 0.4*t13297;
  t13318 = 0.64*t11510;
  t13319 = t13306 + t13318;
  t13377 = t9164*t4200;
  t13396 = -1.*t2274*t3643;
  t13397 = t13377 + t13396;
  t13368 = -1.*t4200*t2274;
  t13369 = -1.*t9164*t3643;
  t13370 = t13368 + t13369;
  t9776 = -1.*t9164*t4200;
  t9781 = t2274*t3643;
  t9794 = t9776 + t9781;
  t13404 = t4200*t2274;
  t13410 = t9164*t3643;
  t13411 = t13404 + t13410;
  t10315 = -1.*t2274*t9537;
  t9862 = t2735*t3643;
  t9863 = t4200*t4243;
  t10302 = t9862 + t9863;
  t10303 = -1.*t9164*t10302;
  t11341 = t10303 + t10315;
  t13422 = t9164*t9537;
  t13433 = t2274*t9537;
  t13451 = t9164*t11606;
  t13452 = -1.*t2274*t11585;
  t13453 = t13451 + t13452;
  t13441 = -1.*t11606*t2274;
  t13442 = -1.*t9164*t11585;
  t13450 = t13441 + t13442;
  t13222 = -1.*t9164*t11606;
  t13223 = t2274*t11585;
  t13238 = t13222 + t13223;
  t13455 = t11606*t2274;
  t13456 = t9164*t11585;
  t13457 = t13455 + t13456;
  t13358 = -1.*t2274*t13163;
  t13349 = t11510*t11585;
  t13355 = t11606*t11624;
  t13356 = t13349 + t13355;
  t13357 = -1.*t9164*t13356;
  t13359 = t13357 + t13358;
  t13474 = t9164*t13163;
  t13480 = t2274*t13163;
  t13425 = t2274*t4621;
  t13431 = t13425 + t13422;
  t13421 = -1.*t2274*t10302;
  t13423 = t13421 + t13422;
  t13418 = t9164*t4621;
  t13419 = t13418 + t10315;
  t13438 = t9164*t10302;
  t13439 = t13438 + t13433;
  t13477 = t2274*t11735;
  t13478 = t13477 + t13474;
  t13473 = -1.*t2274*t13356;
  t13475 = t13473 + t13474;
  t13461 = t9164*t11735;
  t13462 = t13461 + t13358;
  t13485 = t9164*t13356;
  t13486 = t13485 + t13480;
  t13528 = t9807*t3643;
  t13529 = 0.24*t4200*t4243;
  t13530 = t13528 + t13529;
  t13532 = t4200*t9807;
  t13533 = -0.24*t3643*t4243;
  t13534 = t13532 + t13533;
  t13548 = t13319*t11585;
  t13549 = 0.24*t11606*t11624;
  t13550 = t13548 + t13549;
  t13552 = t11606*t13319;
  t13553 = -0.24*t11585*t11624;
  t13554 = t13552 + t13553;
  t9795 = -0.748*t9794;
  t9844 = t9807*t4243;
  t9845 = -0.24*t2735*t4243;
  t9859 = t9844 + t9845;
  t9810 = t9807*t2735;
  t9817 = Power(t4243,2);
  t9833 = 0.24*t9817;
  t9834 = t9810 + t9833;
  t13566 = -1.*t4200*t2735;
  t13567 = t3643*t4243;
  t13568 = t13566 + t13567;
  t13569 = t9164*t13568;
  t13570 = t9141 + t13569;
  t13398 = -20.4*t13370*t13397;
  t13412 = -6.8*t13411*t13397;
  t13414 = -20.4*t13370*t9794;
  t13417 = -6.8*t13411*t9794;
  t13432 = -1.*t9164*t4621;
  t13490 = Power(t13370,2);
  t13491 = -13.6*t13490;
  t13492 = -13.6*t13370*t13411;
  t13493 = Power(t13397,2);
  t13494 = -13.6*t13493;
  t13495 = -13.6*t13397*t9794;
  t13583 = t2274*t13568;
  t13584 = t13418 + t13583;
  t13522 = Power(t4200,2);
  t13523 = 0.11*t13522;
  t13524 = Power(t3643,2);
  t13525 = 0.11*t13524;
  t13526 = t13523 + t13525;
  t13527 = -6.8*t9794*t13526;
  t13531 = -1.*t13530*t9537;
  t13535 = -1.*t4621*t13534;
  t13536 = t13531 + t13535;
  t13538 = t13530*t10302;
  t13539 = t9537*t13534;
  t13540 = t13538 + t13539;
  t13595 = -1.*t9807*t3643;
  t13596 = -0.24*t4200*t4243;
  t13597 = t13595 + t13596;
  t13571 = 0.384*var2[4]*t13570;
  t13572 = -3.2*t9859*t13419;
  t13573 = -3.2*t9834*t13570;
  t13576 = -6.4*t13423*t13419;
  t13577 = -3.2*t13431*t11341;
  t13578 = -3.2*t9724*t13439;
  t13579 = -6.4*t13419*t13570;
  t13580 = -1.*t2274*t13568;
  t13581 = t13432 + t13580;
  t13582 = -3.2*t13431*t13581;
  t13585 = -3.2*t9724*t13584;
  t13588 = -6.4*t13431*t13423;
  t13589 = -6.4*t13419*t13439;
  t13590 = -6.4*t13431*t13570;
  t13591 = -6.4*t13419*t13584;
  t13594 = -3.2*t13419*t13536;
  t13599 = t13530*t9537;
  t13600 = t4621*t13534;
  t13604 = -3.2*t13540*t13570;
  t13629 = -0.24*t2735*t3643;
  t13630 = t13629 + t13596;
  t13606 = -1.*t4621*t13530;
  t13632 = 0.24*t4200*t2735;
  t13633 = t13632 + t13533;
  t13608 = -1.*t13534*t13568;
  t13295 = -0.748*t13238;
  t13346 = t13319*t11624;
  t13347 = -0.24*t11510*t11624;
  t13348 = t13346 + t13347;
  t13320 = t13319*t11510;
  t13324 = Power(t11624,2);
  t13343 = 0.24*t13324;
  t13344 = t13320 + t13343;
  t13645 = -1.*t11606*t11510;
  t13646 = t11585*t11624;
  t13647 = t13645 + t13646;
  t13648 = t9164*t13647;
  t13649 = t13151 + t13648;
  t13454 = -20.4*t13450*t13453;
  t13458 = -6.8*t13457*t13453;
  t13459 = -20.4*t13450*t13238;
  t13460 = -6.8*t13457*t13238;
  t13479 = -1.*t9164*t11735;
  t13505 = Power(t13450,2);
  t13506 = -13.6*t13505;
  t13507 = -13.6*t13450*t13457;
  t13508 = Power(t13453,2);
  t13509 = -13.6*t13508;
  t13510 = -13.6*t13453*t13238;
  t13662 = t2274*t13647;
  t13663 = t13461 + t13662;
  t13542 = Power(t11606,2);
  t13543 = 0.11*t13542;
  t13544 = Power(t11585,2);
  t13545 = 0.11*t13544;
  t13546 = t13543 + t13545;
  t13547 = -6.8*t13238*t13546;
  t13551 = -1.*t13550*t13163;
  t13555 = -1.*t11735*t13554;
  t13556 = t13551 + t13555;
  t13558 = t13550*t13356;
  t13559 = t13163*t13554;
  t13560 = t13558 + t13559;
  t13674 = -1.*t13319*t11585;
  t13675 = -0.24*t11606*t11624;
  t13676 = t13674 + t13675;
  t13650 = 0.384*var2[6]*t13649;
  t13651 = -3.2*t13348*t13462;
  t13652 = -3.2*t13344*t13649;
  t13655 = -6.4*t13475*t13462;
  t13656 = -3.2*t13478*t13359;
  t13657 = -3.2*t13168*t13486;
  t13658 = -6.4*t13462*t13649;
  t13659 = -1.*t2274*t13647;
  t13660 = t13479 + t13659;
  t13661 = -3.2*t13478*t13660;
  t13664 = -3.2*t13168*t13663;
  t13667 = -6.4*t13478*t13475;
  t13668 = -6.4*t13462*t13486;
  t13669 = -6.4*t13478*t13649;
  t13670 = -6.4*t13462*t13663;
  t13673 = -3.2*t13462*t13556;
  t13678 = t13550*t13163;
  t13679 = t11735*t13554;
  t13683 = -3.2*t13560*t13649;
  t13708 = -0.24*t11510*t11585;
  t13709 = t13708 + t13675;
  t13685 = -1.*t11735*t13550;
  t13711 = 0.24*t11606*t11510;
  t13712 = t13711 + t13553;
  t13687 = -1.*t13554*t13647;
  t13497 = Power(t13423,2);
  t13499 = Power(t13419,2);
  t13512 = Power(t13475,2);
  t13514 = Power(t13462,2);
  t13746 = -6.8*t13490;
  t13747 = -6.8*t13370*t13411;
  t13748 = -6.8*t13493;
  t13749 = -6.8*t13397*t9794;
  t13750 = -3.2*t9724*t13431;
  t13751 = -3.2*t13497;
  t13752 = -3.2*t13499;
  t13753 = -3.2*t11341*t13439;
  t13754 = -6.8*t13505;
  t13755 = -6.8*t13450*t13457;
  t13756 = -6.8*t13508;
  t13757 = -6.8*t13453*t13238;
  t13758 = -3.2*t13168*t13478;
  t13759 = -3.2*t13512;
  t13760 = -3.2*t13514;
  t13761 = -3.2*t13359*t13486;
  t13762 = t13746 + t13747 + t13748 + t13749 + t13750 + t13751 + t13752 + t13753 + t13754 + t13755 + t13756 + t13757 + t13758 + t13759 + t13760 + t13761;
  t13764 = 2.88*t2274;
  t13765 = -6.8*t13370*t13526;
  t13766 = -3.2*t13423*t13536;
  t13767 = -3.2*t13419*t13540;
  t13768 = -6.8*t13450*t13546;
  t13769 = -3.2*t13475*t13556;
  t13770 = -3.2*t13462*t13560;
  t13771 = t13764 + t13765 + t13766 + t13767 + t13768 + t13769 + t13770;
  t13725 = -0.748*t13370;
  t13726 = -3.2*t9859*t13423;
  t13727 = -3.2*t9834*t13419;
  t13728 = t13725 + t13726 + t13727;
  t13731 = -0.748*t13450;
  t13732 = -3.2*t13348*t13475;
  t13733 = -3.2*t13344*t13462;
  t13734 = t13731 + t13732 + t13733;
  t13574 = t9795 + t13572 + t13573;
  t13575 = -0.5*var2[3]*t13574;
  t13586 = t13398 + t13412 + t13414 + t13417 + t13576 + t13577 + t13578 + t13579 + t13582 + t13585;
  t13587 = -0.5*var2[1]*t13586;
  t13592 = t13491 + t13492 + t13494 + t13495 + t13588 + t13589 + t13590 + t13591;
  t13593 = -0.5*var2[0]*t13592;
  t13598 = t13597*t9537;
  t13601 = t10302*t13534;
  t13602 = t13598 + t13599 + t13600 + t13601;
  t13603 = -3.2*t13419*t13602;
  t13605 = -1.*t4621*t13597;
  t13607 = -1.*t9537*t13534;
  t13609 = t13605 + t13606 + t13607 + t13608;
  t13610 = -3.2*t13423*t13609;
  t13611 = t13527 + t13594 + t13603 + t13604 + t13610;
  t13612 = -0.5*var2[2]*t13611;
  t13613 = t13571 + t13575 + t13587 + t13593 + t13612;
  t13614 = var2[0]*t13613;
  t13436 = t2274*t10302;
  t13780 = t13436 + t13569;
  t13738 = -6.4*t13431*t13419;
  t13808 = -1.*t4200*t9807;
  t13809 = 0.24*t3643*t4243;
  t13810 = t13808 + t13809;
  t13781 = 0.384*var2[4]*t13780;
  t13615 = Power(t2735,2);
  t13616 = -0.24*t13615;
  t13617 = t9810 + t13616;
  t13782 = -3.2*t9834*t13780;
  t13783 = -3.2*t9859*t13584;
  t13619 = -1.*t9807*t4243;
  t13620 = 0.24*t2735*t4243;
  t13621 = t13619 + t13620;
  t13786 = -3.2*t13439*t13570;
  t13787 = -3.2*t13419*t13780;
  t13788 = t13438 + t13580;
  t13789 = -3.2*t13431*t13788;
  t13790 = -3.2*t13423*t13584;
  t13791 = -6.4*t13570*t13584;
  t13794 = Power(t13431,2);
  t13795 = -6.4*t13794;
  t13796 = -6.4*t13431*t13780;
  t13797 = -6.4*t13439*t13584;
  t13798 = Power(t13584,2);
  t13799 = -6.4*t13798;
  t13802 = -3.2*t13540*t13780;
  t13803 = -3.2*t13536*t13584;
  t13631 = t13630*t9537;
  t13634 = t10302*t13633;
  t13635 = t13631 + t13599 + t13600 + t13634;
  t13807 = -1.*t10302*t13534;
  t13813 = -1.*t13530*t13568;
  t13637 = -1.*t4621*t13630;
  t13638 = -1.*t9537*t13633;
  t13639 = t13637 + t13606 + t13638 + t13608;
  t13818 = t4621*t13530;
  t13841 = -0.24*t4200*t2735;
  t13842 = t13841 + t13809;
  t13822 = t13534*t13568;
  t13736 = -13.6*t13370*t13397;
  t13737 = -13.6*t13411*t13397;
  t13870 = -3.2*t13431*t13423;
  t13871 = -3.2*t13419*t13439;
  t13872 = -3.2*t13431*t13570;
  t13873 = -3.2*t13419*t13584;
  t13874 = t13746 + t13747 + t13748 + t13749 + t13870 + t13871 + t13872 + t13873;
  t13876 = -3.2*t13431*t13536;
  t13877 = -3.2*t13431*t13602;
  t13878 = -3.2*t13540*t13584;
  t13879 = -3.2*t13439*t13609;
  t13880 = t13765 + t13876 + t13877 + t13878 + t13879;
  t13862 = -3.2*t9859*t13431;
  t13863 = -3.2*t9834*t13584;
  t13864 = t13725 + t13862 + t13863;
  t13618 = -3.2*t13617*t13423;
  t13622 = -3.2*t13621*t13419;
  t13623 = t13618 + t13572 + t13622 + t13573;
  t13624 = -0.5*var2[3]*t13623;
  t13625 = t13576 + t13577 + t13578 + t13579 + t13582 + t13585;
  t13626 = -0.5*var2[1]*t13625;
  t13627 = t13588 + t13589 + t13590 + t13591;
  t13628 = -0.5*var2[0]*t13627;
  t13636 = -3.2*t13419*t13635;
  t13640 = -3.2*t13423*t13639;
  t13641 = t13594 + t13636 + t13604 + t13640;
  t13642 = -0.5*var2[2]*t13641;
  t13643 = t13571 + t13624 + t13626 + t13628 + t13642;
  t13644 = var2[0]*t13643;
  t13829 = -3.2*t13617*t13431;
  t13830 = -3.2*t13621*t13584;
  t13831 = t13829 + t13782 + t13783 + t13830;
  t13832 = -0.5*var2[3]*t13831;
  t13833 = t13738 + t13786 + t13787 + t13789 + t13790 + t13791;
  t13834 = -0.5*var2[1]*t13833;
  t13835 = t13795 + t13796 + t13797 + t13799;
  t13836 = -0.5*var2[0]*t13835;
  t13837 = -3.2*t13602*t13584;
  t13838 = -3.2*t13635*t13584;
  t13839 = -1.*t13630*t9537;
  t13840 = -1.*t4621*t13633;
  t13843 = -1.*t4621*t13842;
  t13844 = -1.*t13597*t13568;
  t13845 = -1.*t13630*t13568;
  t13846 = t13839 + t13535 + t13807 + t13840 + t13843 + t13844 + t13845 + t13813;
  t13847 = -3.2*t13439*t13846;
  t13848 = -3.2*t13431*t13609;
  t13849 = -3.2*t13431*t13639;
  t13850 = t4621*t13597;
  t13851 = t4621*t13630;
  t13852 = t13630*t10302;
  t13853 = t9537*t13633;
  t13854 = t9537*t13842;
  t13855 = t13850 + t13851 + t13818 + t13852 + t13539 + t13853 + t13854 + t13822;
  t13856 = -3.2*t13431*t13855;
  t13857 = t13802 + t13803 + t13837 + t13838 + t13847 + t13848 + t13849 + t13856;
  t13858 = -0.5*var2[2]*t13857;
  t13859 = t13781 + t13832 + t13834 + t13836 + t13858;
  t13860 = var2[0]*t13859;
  t13861 = 0.384*var2[4]*t13584;
  t13866 = -6.4*t13431*t13439;
  t13867 = -6.4*t13431*t13584;
  t13916 = t13870 + t13871 + t13872 + t13873;
  t13918 = -3.2*t13431*t13635;
  t13919 = -3.2*t13439*t13639;
  t13920 = t13876 + t13918 + t13878 + t13919;
  t13910 = -3.2*t13621*t13431;
  t13911 = -3.2*t13617*t13439;
  t13912 = t13862 + t13910 + t13911 + t13863;
  t13886 = 0.384*var2[0]*t13584;
  t13653 = t13295 + t13651 + t13652;
  t13654 = -0.5*var2[5]*t13653;
  t13665 = t13454 + t13458 + t13459 + t13460 + t13655 + t13656 + t13657 + t13658 + t13661 + t13664;
  t13666 = -0.5*var2[1]*t13665;
  t13671 = t13506 + t13507 + t13509 + t13510 + t13667 + t13668 + t13669 + t13670;
  t13672 = -0.5*var2[0]*t13671;
  t13677 = t13676*t13163;
  t13680 = t13356*t13554;
  t13681 = t13677 + t13678 + t13679 + t13680;
  t13682 = -3.2*t13462*t13681;
  t13684 = -1.*t11735*t13676;
  t13686 = -1.*t13163*t13554;
  t13688 = t13684 + t13685 + t13686 + t13687;
  t13689 = -3.2*t13475*t13688;
  t13690 = t13547 + t13673 + t13682 + t13683 + t13689;
  t13691 = -0.5*var2[2]*t13690;
  t13692 = t13650 + t13654 + t13666 + t13672 + t13691;
  t13693 = var2[0]*t13692;
  t13483 = t2274*t13356;
  t13926 = t13483 + t13648;
  t13742 = -6.4*t13478*t13462;
  t13954 = -1.*t11606*t13319;
  t13955 = 0.24*t11585*t11624;
  t13956 = t13954 + t13955;
  t13927 = 0.384*var2[6]*t13926;
  t13694 = Power(t11510,2);
  t13695 = -0.24*t13694;
  t13696 = t13320 + t13695;
  t13928 = -3.2*t13344*t13926;
  t13929 = -3.2*t13348*t13663;
  t13698 = -1.*t13319*t11624;
  t13699 = 0.24*t11510*t11624;
  t13700 = t13698 + t13699;
  t13932 = -3.2*t13486*t13649;
  t13933 = -3.2*t13462*t13926;
  t13934 = t13485 + t13659;
  t13935 = -3.2*t13478*t13934;
  t13936 = -3.2*t13475*t13663;
  t13937 = -6.4*t13649*t13663;
  t13940 = Power(t13478,2);
  t13941 = -6.4*t13940;
  t13942 = -6.4*t13478*t13926;
  t13943 = -6.4*t13486*t13663;
  t13944 = Power(t13663,2);
  t13945 = -6.4*t13944;
  t13948 = -3.2*t13560*t13926;
  t13949 = -3.2*t13556*t13663;
  t13710 = t13709*t13163;
  t13713 = t13356*t13712;
  t13714 = t13710 + t13678 + t13679 + t13713;
  t13953 = -1.*t13356*t13554;
  t13959 = -1.*t13550*t13647;
  t13716 = -1.*t11735*t13709;
  t13717 = -1.*t13163*t13712;
  t13718 = t13716 + t13685 + t13717 + t13687;
  t13964 = t11735*t13550;
  t13987 = -0.24*t11606*t11510;
  t13988 = t13987 + t13955;
  t13968 = t13554*t13647;
  t13740 = -13.6*t13450*t13453;
  t13741 = -13.6*t13457*t13453;
  t14016 = -3.2*t13478*t13475;
  t14017 = -3.2*t13462*t13486;
  t14018 = -3.2*t13478*t13649;
  t14019 = -3.2*t13462*t13663;
  t14020 = t13754 + t13755 + t13756 + t13757 + t14016 + t14017 + t14018 + t14019;
  t14022 = -3.2*t13478*t13556;
  t14023 = -3.2*t13478*t13681;
  t14024 = -3.2*t13560*t13663;
  t14025 = -3.2*t13486*t13688;
  t14026 = t13768 + t14022 + t14023 + t14024 + t14025;
  t14008 = -3.2*t13348*t13478;
  t14009 = -3.2*t13344*t13663;
  t14010 = t13731 + t14008 + t14009;
  t13697 = -3.2*t13696*t13475;
  t13701 = -3.2*t13700*t13462;
  t13702 = t13697 + t13651 + t13701 + t13652;
  t13703 = -0.5*var2[5]*t13702;
  t13704 = t13655 + t13656 + t13657 + t13658 + t13661 + t13664;
  t13705 = -0.5*var2[1]*t13704;
  t13706 = t13667 + t13668 + t13669 + t13670;
  t13707 = -0.5*var2[0]*t13706;
  t13715 = -3.2*t13462*t13714;
  t13719 = -3.2*t13475*t13718;
  t13720 = t13673 + t13715 + t13683 + t13719;
  t13721 = -0.5*var2[2]*t13720;
  t13722 = t13650 + t13703 + t13705 + t13707 + t13721;
  t13723 = var2[0]*t13722;
  t13975 = -3.2*t13696*t13478;
  t13976 = -3.2*t13700*t13663;
  t13977 = t13975 + t13928 + t13929 + t13976;
  t13978 = -0.5*var2[5]*t13977;
  t13979 = t13742 + t13932 + t13933 + t13935 + t13936 + t13937;
  t13980 = -0.5*var2[1]*t13979;
  t13981 = t13941 + t13942 + t13943 + t13945;
  t13982 = -0.5*var2[0]*t13981;
  t13983 = -3.2*t13681*t13663;
  t13984 = -3.2*t13714*t13663;
  t13985 = -1.*t13709*t13163;
  t13986 = -1.*t11735*t13712;
  t13989 = -1.*t11735*t13988;
  t13990 = -1.*t13676*t13647;
  t13991 = -1.*t13709*t13647;
  t13992 = t13985 + t13555 + t13953 + t13986 + t13989 + t13990 + t13991 + t13959;
  t13993 = -3.2*t13486*t13992;
  t13994 = -3.2*t13478*t13688;
  t13995 = -3.2*t13478*t13718;
  t13996 = t11735*t13676;
  t13997 = t11735*t13709;
  t13998 = t13709*t13356;
  t13999 = t13163*t13712;
  t14000 = t13163*t13988;
  t14001 = t13996 + t13997 + t13964 + t13998 + t13559 + t13999 + t14000 + t13968;
  t14002 = -3.2*t13478*t14001;
  t14003 = t13948 + t13949 + t13983 + t13984 + t13993 + t13994 + t13995 + t14002;
  t14004 = -0.5*var2[2]*t14003;
  t14005 = t13927 + t13978 + t13980 + t13982 + t14004;
  t14006 = var2[0]*t14005;
  t14007 = 0.384*var2[6]*t13663;
  t14012 = -6.4*t13478*t13486;
  t14013 = -6.4*t13478*t13663;
  t14062 = t14016 + t14017 + t14018 + t14019;
  t14064 = -3.2*t13478*t13714;
  t14065 = -3.2*t13486*t13718;
  t14066 = t14022 + t14064 + t14024 + t14065;
  t14056 = -3.2*t13700*t13478;
  t14057 = -3.2*t13696*t13486;
  t14058 = t14008 + t14056 + t14057 + t14009;
  t14032 = 0.384*var2[0]*t13663;
  p_output1[0]=var2[0]*(-0.5*(-6.4*t11341*t13439 - 6.4*t13168*t13478 - 6.4*t13359*t13486 + t13491 + t13492 + t13494 + t13495 - 6.4*t13497 - 6.4*t13499 + t13506 + t13507 + t13509 + t13510 - 6.4*t13512 - 6.4*t13514 - 6.4*t13431*t9724)*var2[0] - 0.5*(t13398 + t13412 + t13414 + t13417 - 9.6*t11341*t13423 - 3.2*t13431*(t13432 + t13433) + t13454 + t13458 + t13459 + t13460 - 9.6*t13168*t13462 - 9.6*t13359*t13475 - 3.2*t13478*(t13479 + t13480) - 3.2*(t13167 + t13483)*t13486 - 3.2*t13439*(t13436 + t9719) - 9.6*t13419*t9724)*var2[1] - 0.5*(t13527 - 3.2*t11341*t13536 + t13547 - 3.2*t13359*t13556 - 3.2*t13168*t13560 + 2.88*t9164 - 3.2*t13540*t9724)*var2[2] - 0.5*(t9795 - 3.2*t9724*t9834 - 3.2*t11341*t9859)*var2[3] + 0.384*t9724*var2[4] - 0.5*(t13295 - 3.2*t13168*t13344 - 3.2*t13348*t13359)*var2[5] + 0.384*t13168*var2[6]);
  p_output1[1]=t13614;
  p_output1[2]=t13644;
  p_output1[3]=t13693;
  p_output1[4]=t13723;
  p_output1[5]=-1.*(-6.4*t13423*t13439 - 6.4*t13475*t13486 + t13736 + t13737 + t13738 + t13740 + t13741 + t13742)*var2[0] - 0.5*t13762*var2[1] - 0.5*t13771*var2[2] - 0.5*t13728*var2[3] + 0.384*t13419*var2[4] - 0.5*t13734*var2[5] + 0.384*t13462*var2[6];
  p_output1[6]=-0.5*t13762*var2[0];
  p_output1[7]=-0.5*t13771*var2[0];
  p_output1[8]=-0.5*t13728*var2[0];
  p_output1[9]=0.384*t13419*var2[0];
  p_output1[10]=-0.5*t13734*var2[0];
  p_output1[11]=0.384*t13462*var2[0];
  p_output1[12]=t13614;
  p_output1[13]=var2[0]*(t13781 - 0.5*(t13491 + t13492 + t13494 + t13495 + t13795 + t13796 + t13797 + t13799)*var2[0] - 0.5*(t13398 + t13412 + t13414 + t13417 + t13738 + t13786 + t13787 + t13789 + t13790 + t13791)*var2[1] - 0.5*(t13527 - 6.4*t13584*t13602 - 6.4*t13431*t13609 + t13802 + t13803 - 3.2*t13439*(-2.*t13568*t13597 + t13807 + t13813 - 2.*t13534*t4621 - 1.*t13810*t4621 - 1.*t13597*t9537) - 3.2*t13431*(t10302*t13597 + t13818 + t13822 + 2.*t13597*t4621 + 2.*t13534*t9537 + t13810*t9537))*var2[2] - 0.5*(t13782 + t13783 + t9795)*var2[3]);
  p_output1[14]=t13860;
  p_output1[15]=t13861 - 1.*(t13736 + t13737 + t13866 + t13867)*var2[0] - 0.5*t13874*var2[1] - 0.5*t13880*var2[2] - 0.5*t13864*var2[3];
  p_output1[16]=-0.5*t13874*var2[0];
  p_output1[17]=-0.5*t13880*var2[0];
  p_output1[18]=-0.5*t13864*var2[0];
  p_output1[19]=t13886;
  p_output1[20]=t13644;
  p_output1[21]=t13860;
  p_output1[22]=var2[0]*(t13781 + t13834 + t13836 - 0.5*(-6.4*t13584*t13635 - 6.4*t13431*t13639 + t13802 + t13803 - 3.2*t13439*(-2.*t13568*t13630 + t13807 + t13813 + t13839 + t13843 - 2.*t13633*t4621) - 3.2*t13431*(t13818 + t13822 + t13852 + t13854 + 2.*t13630*t4621 + 2.*t13633*t9537))*var2[2] - 0.5*(-6.4*t13431*t13617 - 3.2*t13439*t13621 - 6.4*t13584*t13621 + t13782 + t13783 - 3.2*t13431*(0.24*t13615 - 1.*t2735*t9807))*var2[3]);
  p_output1[23]=t13861 - 1.*(t13866 + t13867)*var2[0] - 0.5*t13916*var2[1] - 0.5*t13920*var2[2] - 0.5*t13912*var2[3];
  p_output1[24]=-0.5*t13916*var2[0];
  p_output1[25]=-0.5*t13920*var2[0];
  p_output1[26]=-0.5*t13912*var2[0];
  p_output1[27]=t13886;
  p_output1[28]=t13693;
  p_output1[29]=var2[0]*(t13927 - 0.5*(t13506 + t13507 + t13509 + t13510 + t13941 + t13942 + t13943 + t13945)*var2[0] - 0.5*(t13454 + t13458 + t13459 + t13460 + t13742 + t13932 + t13933 + t13935 + t13936 + t13937)*var2[1] - 0.5*(t13547 - 6.4*t13663*t13681 - 6.4*t13478*t13688 + t13948 + t13949 - 3.2*t13486*(-2.*t11735*t13554 - 1.*t13163*t13676 - 2.*t13647*t13676 + t13953 - 1.*t11735*t13956 + t13959) - 3.2*t13478*(2.*t13163*t13554 + 2.*t11735*t13676 + t13356*t13676 + t13163*t13956 + t13964 + t13968))*var2[2] - 0.5*(t13295 + t13928 + t13929)*var2[5]);
  p_output1[30]=t14006;
  p_output1[31]=t14007 - 1.*(t13740 + t13741 + t14012 + t14013)*var2[0] - 0.5*t14020*var2[1] - 0.5*t14026*var2[2] - 0.5*t14010*var2[5];
  p_output1[32]=-0.5*t14020*var2[0];
  p_output1[33]=-0.5*t14026*var2[0];
  p_output1[34]=-0.5*t14010*var2[0];
  p_output1[35]=t14032;
  p_output1[36]=t13723;
  p_output1[37]=t14006;
  p_output1[38]=var2[0]*(t13927 + t13980 + t13982 - 0.5*(-6.4*t13663*t13714 - 6.4*t13478*t13718 + t13948 + t13949 - 3.2*t13486*(-2.*t13647*t13709 - 2.*t11735*t13712 + t13953 + t13959 + t13985 + t13989) - 3.2*t13478*(2.*t11735*t13709 + 2.*t13163*t13712 + t13964 + t13968 + t13998 + t14000))*var2[2] - 0.5*(-3.2*t13478*(-1.*t11510*t13319 + 0.24*t13694) - 6.4*t13478*t13696 - 3.2*t13486*t13700 - 6.4*t13663*t13700 + t13928 + t13929)*var2[5]);
  p_output1[39]=t14007 - 1.*(t14012 + t14013)*var2[0] - 0.5*t14062*var2[1] - 0.5*t14066*var2[2] - 0.5*t14058*var2[5];
  p_output1[40]=-0.5*t14062*var2[0];
  p_output1[41]=-0.5*t14066*var2[0];
  p_output1[42]=-0.5*t14058*var2[0];
  p_output1[43]=t14032;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 44, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec1_five_link_walker.hh"

namespace RightStance
{

void J_Ce3_vec1_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
