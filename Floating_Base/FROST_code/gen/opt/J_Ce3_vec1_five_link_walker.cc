/*
 * Automatically Generated from Mathematica.
 * Sun 29 Mar 2020 00:50:02 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t4637;
  double t241;
  double t2706;
  double t4943;
  double t5912;
  double t240;
  double t3159;
  double t4979;
  double t4980;
  double t5488;
  double t5939;
  double t6692;
  double t6763;
  double t6957;
  double t7365;
  double t7373;
  double t7433;
  double t7434;
  double t7453;
  double t7532;
  double t7662;
  double t7659;
  double t7660;
  double t7663;
  double t7661;
  double t7669;
  double t7670;
  double t7671;
  double t7683;
  double t8378;
  double t8492;
  double t8493;
  double t8639;
  double t9997;
  double t10000;
  double t10311;
  double t10316;
  double t10320;
  double t11525;
  double t11627;
  double t11686;
  double t11361;
  double t11483;
  double t11506;
  double t7368;
  double t7369;
  double t7370;
  double t12046;
  double t12047;
  double t12048;
  double t7649;
  double t7645;
  double t7646;
  double t7647;
  double t7648;
  double t7650;
  double t12091;
  double t12172;
  double t12235;
  double t12236;
  double t12237;
  double t12224;
  double t12225;
  double t12228;
  double t9662;
  double t9834;
  double t9837;
  double t12248;
  double t12253;
  double t12257;
  double t11193;
  double t10867;
  double t11025;
  double t11026;
  double t11063;
  double t11241;
  double t12278;
  double t12320;
  double t12160;
  double t12161;
  double t12090;
  double t12096;
  double t12077;
  double t12079;
  double t12212;
  double t12222;
  double t12314;
  double t12318;
  double t12277;
  double t12293;
  double t12264;
  double t12265;
  double t12326;
  double t12333;
  double t12415;
  double t12416;
  double t12420;
  double t12423;
  double t12429;
  double t12430;
  double t12464;
  double t12465;
  double t12489;
  double t12491;
  double t12492;
  double t12493;
  double t7372;
  double t7601;
  double t7605;
  double t7644;
  double t7533;
  double t7534;
  double t7575;
  double t7597;
  double t12539;
  double t12540;
  double t12541;
  double t12543;
  double t12544;
  double t12035;
  double t12056;
  double t12062;
  double t12066;
  double t12168;
  double t12353;
  double t12354;
  double t12355;
  double t12362;
  double t12363;
  double t12364;
  double t12568;
  double t12569;
  double t12408;
  double t12409;
  double t12410;
  double t12411;
  double t12413;
  double t12414;
  double t12422;
  double t12431;
  double t12432;
  double t12434;
  double t12435;
  double t12450;
  double t12596;
  double t12597;
  double t12599;
  double t12545;
  double t12547;
  double t12548;
  double t12557;
  double t12558;
  double t12560;
  double t12561;
  double t12562;
  double t12563;
  double t12567;
  double t12570;
  double t12573;
  double t12574;
  double t12575;
  double t12576;
  double t12595;
  double t12601;
  double t12602;
  double t12622;
  double t12666;
  double t12667;
  double t12625;
  double t12674;
  double t12715;
  double t12627;
  double t9866;
  double t10362;
  double t10368;
  double t10761;
  double t10329;
  double t10330;
  double t10331;
  double t10332;
  double t12792;
  double t12793;
  double t12810;
  double t12811;
  double t12859;
  double t12241;
  double t12261;
  double t12262;
  double t12263;
  double t12319;
  double t12380;
  double t12381;
  double t12382;
  double t12383;
  double t12385;
  double t12386;
  double t14827;
  double t14893;
  double t12453;
  double t12459;
  double t12460;
  double t12461;
  double t12462;
  double t12463;
  double t12490;
  double t12511;
  double t12516;
  double t12518;
  double t12519;
  double t12520;
  double t16099;
  double t16158;
  double t16206;
  double t13012;
  double t13013;
  double t13038;
  double t13654;
  double t13655;
  double t14474;
  double t14639;
  double t14679;
  double t14812;
  double t14818;
  double t14895;
  double t15140;
  double t15707;
  double t15746;
  double t15804;
  double t15899;
  double t16416;
  double t17042;
  double t17505;
  double t18476;
  double t18477;
  double t17567;
  double t18495;
  double t18496;
  double t17736;
  double t12373;
  double t12375;
  double t12394;
  double t12396;
  double t18680;
  double t18681;
  double t18708;
  double t18732;
  double t18733;
  double t18785;
  double t18788;
  double t18822;
  double t18824;
  double t18825;
  double t18826;
  double t18961;
  double t18992;
  double t19008;
  double t19011;
  double t19121;
  double t19174;
  double t19253;
  double t19289;
  double t19710;
  double t20068;
  double t20127;
  double t20128;
  double t20212;
  double t20227;
  double t18548;
  double t18549;
  double t18551;
  double t18552;
  double t18603;
  double t18604;
  double t18615;
  double t18616;
  double t12549;
  double t12556;
  double t12571;
  double t12572;
  double t12577;
  double t12589;
  double t12600;
  double t12603;
  double t12615;
  double t12621;
  double t12623;
  double t12626;
  double t12628;
  double t12632;
  double t12633;
  double t12634;
  double t12635;
  double t12636;
  double t12206;
  double t20496;
  double t18650;
  double t20780;
  double t20781;
  double t20782;
  double t20500;
  double t12637;
  double t12638;
  double t12639;
  double t20526;
  double t20640;
  double t12641;
  double t12642;
  double t12658;
  double t20686;
  double t20693;
  double t20694;
  double t20699;
  double t20726;
  double t20733;
  double t20739;
  double t20748;
  double t20749;
  double t20750;
  double t20751;
  double t20760;
  double t20771;
  double t20772;
  double t12668;
  double t12716;
  double t12722;
  double t20779;
  double t20787;
  double t12737;
  double t12745;
  double t12755;
  double t20792;
  double t20840;
  double t20855;
  double t20796;
  double t18643;
  double t18647;
  double t22004;
  double t22016;
  double t22031;
  double t22036;
  double t22095;
  double t22097;
  double t22118;
  double t22120;
  double t22121;
  double t22122;
  double t21295;
  double t21363;
  double t21364;
  double t12640;
  double t12659;
  double t12660;
  double t12661;
  double t12662;
  double t12663;
  double t12664;
  double t12665;
  double t12736;
  double t12769;
  double t12770;
  double t12785;
  double t12786;
  double t12791;
  double t20803;
  double t20804;
  double t20805;
  double t20806;
  double t20807;
  double t20808;
  double t20817;
  double t20821;
  double t20822;
  double t20837;
  double t20838;
  double t20839;
  double t20873;
  double t20926;
  double t20996;
  double t20998;
  double t21013;
  double t21056;
  double t21071;
  double t21085;
  double t21133;
  double t21135;
  double t21149;
  double t21156;
  double t21160;
  double t21172;
  double t21195;
  double t21232;
  double t21237;
  double t21254;
  double t21289;
  double t21433;
  double t21558;
  double t22263;
  double t22268;
  double t22269;
  double t22270;
  double t22250;
  double t22251;
  double t22252;
  double t22193;
  double t13041;
  double t13045;
  double t14931;
  double t15042;
  double t15826;
  double t15837;
  double t16344;
  double t17066;
  double t17090;
  double t17493;
  double t17530;
  double t17652;
  double t18071;
  double t18091;
  double t18160;
  double t18188;
  double t18244;
  double t18307;
  double t12323;
  double t22277;
  double t18659;
  double t22319;
  double t22320;
  double t22321;
  double t22281;
  double t18326;
  double t18327;
  double t18328;
  double t22282;
  double t22283;
  double t18341;
  double t18381;
  double t18382;
  double t22286;
  double t22287;
  double t22288;
  double t22289;
  double t22290;
  double t22291;
  double t22294;
  double t22300;
  double t22301;
  double t22302;
  double t22303;
  double t22304;
  double t22307;
  double t22308;
  double t18493;
  double t18498;
  double t18500;
  double t22315;
  double t22325;
  double t18503;
  double t18504;
  double t18505;
  double t22330;
  double t22355;
  double t22356;
  double t22334;
  double t18654;
  double t18655;
  double t22384;
  double t22385;
  double t22386;
  double t22387;
  double t22388;
  double t22390;
  double t22391;
  double t22392;
  double t22393;
  double t22394;
  double t22376;
  double t22377;
  double t22378;
  double t18330;
  double t18397;
  double t18399;
  double t18400;
  double t18401;
  double t18403;
  double t18450;
  double t18470;
  double t18502;
  double t18518;
  double t18519;
  double t18538;
  double t18539;
  double t18541;
  double t22341;
  double t22342;
  double t22343;
  double t22344;
  double t22345;
  double t22346;
  double t22347;
  double t22348;
  double t22351;
  double t22352;
  double t22353;
  double t22354;
  double t22357;
  double t22358;
  double t22359;
  double t22360;
  double t22361;
  double t22362;
  double t22363;
  double t22364;
  double t22365;
  double t22366;
  double t22367;
  double t22368;
  double t22369;
  double t22370;
  double t22371;
  double t22372;
  double t22373;
  double t22374;
  double t22375;
  double t22380;
  double t22381;
  double t22430;
  double t22432;
  double t22433;
  double t22434;
  double t22424;
  double t22425;
  double t22426;
  double t22400;
  t4637 = Cos(var1[3]);
  t241 = Cos(var1[4]);
  t2706 = Sin(var1[3]);
  t4943 = Sin(var1[4]);
  t5912 = Cos(var1[2]);
  t240 = Sin(var1[2]);
  t3159 = -1.*t241*t2706;
  t4979 = -1.*t4637*t4943;
  t4980 = t3159 + t4979;
  t5488 = -1.*t240*t4980;
  t5939 = t4637*t241;
  t6692 = -1.*t2706*t4943;
  t6763 = t5939 + t6692;
  t6957 = -1.*t5912*t6763;
  t7365 = t5488 + t6957;
  t7373 = -1.*t241;
  t7433 = 1. + t7373;
  t7434 = 0.4*t7433;
  t7453 = 0.64*t241;
  t7532 = t7434 + t7453;
  t7662 = Cos(var1[5]);
  t7659 = Cos(var1[6]);
  t7660 = Sin(var1[5]);
  t7663 = Sin(var1[6]);
  t7661 = -1.*t7659*t7660;
  t7669 = -1.*t7662*t7663;
  t7670 = t7661 + t7669;
  t7671 = -1.*t240*t7670;
  t7683 = t7662*t7659;
  t8378 = -1.*t7660*t7663;
  t8492 = t7683 + t8378;
  t8493 = -1.*t5912*t8492;
  t8639 = t7671 + t8493;
  t9997 = -1.*t7659;
  t10000 = 1. + t9997;
  t10311 = 0.4*t10000;
  t10316 = 0.64*t7659;
  t10320 = t10311 + t10316;
  t11525 = t5912*t4637;
  t11627 = -1.*t240*t2706;
  t11686 = t11525 + t11627;
  t11361 = -1.*t4637*t240;
  t11483 = -1.*t5912*t2706;
  t11506 = t11361 + t11483;
  t7368 = -1.*t5912*t4637;
  t7369 = t240*t2706;
  t7370 = t7368 + t7369;
  t12046 = t4637*t240;
  t12047 = t5912*t2706;
  t12048 = t12046 + t12047;
  t7649 = -1.*t240*t6763;
  t7645 = t241*t2706;
  t7646 = t4637*t4943;
  t7647 = t7645 + t7646;
  t7648 = -1.*t5912*t7647;
  t7650 = t7648 + t7649;
  t12091 = t5912*t6763;
  t12172 = t240*t6763;
  t12235 = t5912*t7662;
  t12236 = -1.*t240*t7660;
  t12237 = t12235 + t12236;
  t12224 = -1.*t7662*t240;
  t12225 = -1.*t5912*t7660;
  t12228 = t12224 + t12225;
  t9662 = -1.*t5912*t7662;
  t9834 = t240*t7660;
  t9837 = t9662 + t9834;
  t12248 = t7662*t240;
  t12253 = t5912*t7660;
  t12257 = t12248 + t12253;
  t11193 = -1.*t240*t8492;
  t10867 = t7659*t7660;
  t11025 = t7662*t7663;
  t11026 = t10867 + t11025;
  t11063 = -1.*t5912*t11026;
  t11241 = t11063 + t11193;
  t12278 = t5912*t8492;
  t12320 = t240*t8492;
  t12160 = t240*t4980;
  t12161 = t12160 + t12091;
  t12090 = -1.*t240*t7647;
  t12096 = t12090 + t12091;
  t12077 = t5912*t4980;
  t12079 = t12077 + t7649;
  t12212 = t5912*t7647;
  t12222 = t12212 + t12172;
  t12314 = t240*t7670;
  t12318 = t12314 + t12278;
  t12277 = -1.*t240*t11026;
  t12293 = t12277 + t12278;
  t12264 = t5912*t7670;
  t12265 = t12264 + t11193;
  t12326 = t5912*t11026;
  t12333 = t12326 + t12320;
  t12415 = t7532*t2706;
  t12416 = 0.24*t4637*t4943;
  t12420 = t12415 + t12416;
  t12423 = t4637*t7532;
  t12429 = -0.24*t2706*t4943;
  t12430 = t12423 + t12429;
  t12464 = t10320*t7660;
  t12465 = 0.24*t7662*t7663;
  t12489 = t12464 + t12465;
  t12491 = t7662*t10320;
  t12492 = -0.24*t7660*t7663;
  t12493 = t12491 + t12492;
  t7372 = -0.748*t7370;
  t7601 = t7532*t4943;
  t7605 = -0.24*t241*t4943;
  t7644 = t7601 + t7605;
  t7533 = t7532*t241;
  t7534 = Power(t4943,2);
  t7575 = 0.24*t7534;
  t7597 = t7533 + t7575;
  t12539 = -1.*t4637*t241;
  t12540 = t2706*t4943;
  t12541 = t12539 + t12540;
  t12543 = t5912*t12541;
  t12544 = t5488 + t12543;
  t12035 = -20.4*t11506*t11686;
  t12056 = -6.8*t12048*t11686;
  t12062 = -20.4*t11506*t7370;
  t12066 = -6.8*t12048*t7370;
  t12168 = -1.*t5912*t4980;
  t12353 = Power(t11506,2);
  t12354 = -13.6*t12353;
  t12355 = -13.6*t11506*t12048;
  t12362 = Power(t11686,2);
  t12363 = -13.6*t12362;
  t12364 = -13.6*t11686*t7370;
  t12568 = t240*t12541;
  t12569 = t12077 + t12568;
  t12408 = Power(t4637,2);
  t12409 = 0.11*t12408;
  t12410 = Power(t2706,2);
  t12411 = 0.11*t12410;
  t12413 = t12409 + t12411;
  t12414 = -6.8*t7370*t12413;
  t12422 = -1.*t12420*t6763;
  t12431 = -1.*t4980*t12430;
  t12432 = t12422 + t12431;
  t12434 = t12420*t7647;
  t12435 = t6763*t12430;
  t12450 = t12434 + t12435;
  t12596 = -1.*t7532*t2706;
  t12597 = -0.24*t4637*t4943;
  t12599 = t12596 + t12597;
  t12545 = 0.384*var2[4]*t12544;
  t12547 = -3.2*t7644*t12079;
  t12548 = -3.2*t7597*t12544;
  t12557 = -6.4*t12096*t12079;
  t12558 = -3.2*t12161*t7650;
  t12560 = -3.2*t7365*t12222;
  t12561 = -6.4*t12079*t12544;
  t12562 = -1.*t240*t12541;
  t12563 = t12168 + t12562;
  t12567 = -3.2*t12161*t12563;
  t12570 = -3.2*t7365*t12569;
  t12573 = -6.4*t12161*t12096;
  t12574 = -6.4*t12079*t12222;
  t12575 = -6.4*t12161*t12544;
  t12576 = -6.4*t12079*t12569;
  t12595 = -3.2*t12079*t12432;
  t12601 = t12420*t6763;
  t12602 = t4980*t12430;
  t12622 = -3.2*t12450*t12544;
  t12666 = -0.24*t241*t2706;
  t12667 = t12666 + t12597;
  t12625 = -1.*t4980*t12420;
  t12674 = 0.24*t4637*t241;
  t12715 = t12674 + t12429;
  t12627 = -1.*t12430*t12541;
  t9866 = -0.748*t9837;
  t10362 = t10320*t7663;
  t10368 = -0.24*t7659*t7663;
  t10761 = t10362 + t10368;
  t10329 = t10320*t7659;
  t10330 = Power(t7663,2);
  t10331 = 0.24*t10330;
  t10332 = t10329 + t10331;
  t12792 = -1.*t7662*t7659;
  t12793 = t7660*t7663;
  t12810 = t12792 + t12793;
  t12811 = t5912*t12810;
  t12859 = t7671 + t12811;
  t12241 = -20.4*t12228*t12237;
  t12261 = -6.8*t12257*t12237;
  t12262 = -20.4*t12228*t9837;
  t12263 = -6.8*t12257*t9837;
  t12319 = -1.*t5912*t7670;
  t12380 = Power(t12228,2);
  t12381 = -13.6*t12380;
  t12382 = -13.6*t12228*t12257;
  t12383 = Power(t12237,2);
  t12385 = -13.6*t12383;
  t12386 = -13.6*t12237*t9837;
  t14827 = t240*t12810;
  t14893 = t12264 + t14827;
  t12453 = Power(t7662,2);
  t12459 = 0.11*t12453;
  t12460 = Power(t7660,2);
  t12461 = 0.11*t12460;
  t12462 = t12459 + t12461;
  t12463 = -6.8*t9837*t12462;
  t12490 = -1.*t12489*t8492;
  t12511 = -1.*t7670*t12493;
  t12516 = t12490 + t12511;
  t12518 = t12489*t11026;
  t12519 = t8492*t12493;
  t12520 = t12518 + t12519;
  t16099 = -1.*t10320*t7660;
  t16158 = -0.24*t7662*t7663;
  t16206 = t16099 + t16158;
  t13012 = 0.384*var2[6]*t12859;
  t13013 = -3.2*t10761*t12265;
  t13038 = -3.2*t10332*t12859;
  t13654 = -6.4*t12293*t12265;
  t13655 = -3.2*t12318*t11241;
  t14474 = -3.2*t8639*t12333;
  t14639 = -6.4*t12265*t12859;
  t14679 = -1.*t240*t12810;
  t14812 = t12319 + t14679;
  t14818 = -3.2*t12318*t14812;
  t14895 = -3.2*t8639*t14893;
  t15140 = -6.4*t12318*t12293;
  t15707 = -6.4*t12265*t12333;
  t15746 = -6.4*t12318*t12859;
  t15804 = -6.4*t12265*t14893;
  t15899 = -3.2*t12265*t12516;
  t16416 = t12489*t8492;
  t17042 = t7670*t12493;
  t17505 = -3.2*t12520*t12859;
  t18476 = -0.24*t7659*t7660;
  t18477 = t18476 + t16158;
  t17567 = -1.*t7670*t12489;
  t18495 = 0.24*t7662*t7659;
  t18496 = t18495 + t12492;
  t17736 = -1.*t12493*t12810;
  t12373 = Power(t12096,2);
  t12375 = Power(t12079,2);
  t12394 = Power(t12293,2);
  t12396 = Power(t12265,2);
  t18680 = -6.8*t12353;
  t18681 = -6.8*t11506*t12048;
  t18708 = -6.8*t12362;
  t18732 = -6.8*t11686*t7370;
  t18733 = -3.2*t7365*t12161;
  t18785 = -3.2*t12373;
  t18788 = -3.2*t12375;
  t18822 = -3.2*t7650*t12222;
  t18824 = -6.8*t12380;
  t18825 = -6.8*t12228*t12257;
  t18826 = -6.8*t12383;
  t18961 = -6.8*t12237*t9837;
  t18992 = -3.2*t8639*t12318;
  t19008 = -3.2*t12394;
  t19011 = -3.2*t12396;
  t19121 = -3.2*t11241*t12333;
  t19174 = t18680 + t18681 + t18708 + t18732 + t18733 + t18785 + t18788 + t18822 + t18824 + t18825 + t18826 + t18961 + t18992 + t19008 + t19011 + t19121;
  t19253 = 2.88*t240;
  t19289 = -6.8*t11506*t12413;
  t19710 = -3.2*t12096*t12432;
  t20068 = -3.2*t12079*t12450;
  t20127 = -6.8*t12228*t12462;
  t20128 = -3.2*t12293*t12516;
  t20212 = -3.2*t12265*t12520;
  t20227 = t19253 + t19289 + t19710 + t20068 + t20127 + t20128 + t20212;
  t18548 = -0.748*t11506;
  t18549 = -3.2*t7644*t12096;
  t18551 = -3.2*t7597*t12079;
  t18552 = t18548 + t18549 + t18551;
  t18603 = -0.748*t12228;
  t18604 = -3.2*t10761*t12293;
  t18615 = -3.2*t10332*t12265;
  t18616 = t18603 + t18604 + t18615;
  t12549 = t7372 + t12547 + t12548;
  t12556 = -0.5*var2[3]*t12549;
  t12571 = t12035 + t12056 + t12062 + t12066 + t12557 + t12558 + t12560 + t12561 + t12567 + t12570;
  t12572 = -0.5*var2[1]*t12571;
  t12577 = t12354 + t12355 + t12363 + t12364 + t12573 + t12574 + t12575 + t12576;
  t12589 = -0.5*var2[0]*t12577;
  t12600 = t12599*t6763;
  t12603 = t7647*t12430;
  t12615 = t12600 + t12601 + t12602 + t12603;
  t12621 = -3.2*t12079*t12615;
  t12623 = -1.*t4980*t12599;
  t12626 = -1.*t6763*t12430;
  t12628 = t12623 + t12625 + t12626 + t12627;
  t12632 = -3.2*t12096*t12628;
  t12633 = t12414 + t12595 + t12621 + t12622 + t12632;
  t12634 = -0.5*var2[2]*t12633;
  t12635 = t12545 + t12556 + t12572 + t12589 + t12634;
  t12636 = var2[0]*t12635;
  t12206 = t240*t7647;
  t20496 = t12206 + t12543;
  t18650 = -6.4*t12161*t12079;
  t20780 = -1.*t4637*t7532;
  t20781 = 0.24*t2706*t4943;
  t20782 = t20780 + t20781;
  t20500 = 0.384*var2[4]*t20496;
  t12637 = Power(t241,2);
  t12638 = -0.24*t12637;
  t12639 = t7533 + t12638;
  t20526 = -3.2*t7597*t20496;
  t20640 = -3.2*t7644*t12569;
  t12641 = -1.*t7532*t4943;
  t12642 = 0.24*t241*t4943;
  t12658 = t12641 + t12642;
  t20686 = -3.2*t12222*t12544;
  t20693 = -3.2*t12079*t20496;
  t20694 = t12212 + t12562;
  t20699 = -3.2*t12161*t20694;
  t20726 = -3.2*t12096*t12569;
  t20733 = -6.4*t12544*t12569;
  t20739 = Power(t12161,2);
  t20748 = -6.4*t20739;
  t20749 = -6.4*t12161*t20496;
  t20750 = -6.4*t12222*t12569;
  t20751 = Power(t12569,2);
  t20760 = -6.4*t20751;
  t20771 = -3.2*t12450*t20496;
  t20772 = -3.2*t12432*t12569;
  t12668 = t12667*t6763;
  t12716 = t7647*t12715;
  t12722 = t12668 + t12601 + t12602 + t12716;
  t20779 = -1.*t7647*t12430;
  t20787 = -1.*t12420*t12541;
  t12737 = -1.*t4980*t12667;
  t12745 = -1.*t6763*t12715;
  t12755 = t12737 + t12625 + t12745 + t12627;
  t20792 = t4980*t12420;
  t20840 = -0.24*t4637*t241;
  t20855 = t20840 + t20781;
  t20796 = t12430*t12541;
  t18643 = -13.6*t11506*t11686;
  t18647 = -13.6*t12048*t11686;
  t22004 = -3.2*t12161*t12096;
  t22016 = -3.2*t12079*t12222;
  t22031 = -3.2*t12161*t12544;
  t22036 = -3.2*t12079*t12569;
  t22095 = t18680 + t18681 + t18708 + t18732 + t22004 + t22016 + t22031 + t22036;
  t22097 = -3.2*t12161*t12432;
  t22118 = -3.2*t12161*t12615;
  t22120 = -3.2*t12450*t12569;
  t22121 = -3.2*t12222*t12628;
  t22122 = t19289 + t22097 + t22118 + t22120 + t22121;
  t21295 = -3.2*t7644*t12161;
  t21363 = -3.2*t7597*t12569;
  t21364 = t18548 + t21295 + t21363;
  t12640 = -3.2*t12639*t12096;
  t12659 = -3.2*t12658*t12079;
  t12660 = t12640 + t12547 + t12659 + t12548;
  t12661 = -0.5*var2[3]*t12660;
  t12662 = t12557 + t12558 + t12560 + t12561 + t12567 + t12570;
  t12663 = -0.5*var2[1]*t12662;
  t12664 = t12573 + t12574 + t12575 + t12576;
  t12665 = -0.5*var2[0]*t12664;
  t12736 = -3.2*t12079*t12722;
  t12769 = -3.2*t12096*t12755;
  t12770 = t12595 + t12736 + t12622 + t12769;
  t12785 = -0.5*var2[2]*t12770;
  t12786 = t12545 + t12661 + t12663 + t12665 + t12785;
  t12791 = var2[0]*t12786;
  t20803 = -3.2*t12639*t12161;
  t20804 = -3.2*t12658*t12569;
  t20805 = t20803 + t20526 + t20640 + t20804;
  t20806 = -0.5*var2[3]*t20805;
  t20807 = t18650 + t20686 + t20693 + t20699 + t20726 + t20733;
  t20808 = -0.5*var2[1]*t20807;
  t20817 = t20748 + t20749 + t20750 + t20760;
  t20821 = -0.5*var2[0]*t20817;
  t20822 = -3.2*t12615*t12569;
  t20837 = -3.2*t12722*t12569;
  t20838 = -1.*t12667*t6763;
  t20839 = -1.*t4980*t12715;
  t20873 = -1.*t4980*t20855;
  t20926 = -1.*t12599*t12541;
  t20996 = -1.*t12667*t12541;
  t20998 = t20838 + t12431 + t20779 + t20839 + t20873 + t20926 + t20996 + t20787;
  t21013 = -3.2*t12222*t20998;
  t21056 = -3.2*t12161*t12628;
  t21071 = -3.2*t12161*t12755;
  t21085 = t4980*t12599;
  t21133 = t4980*t12667;
  t21135 = t12667*t7647;
  t21149 = t6763*t12715;
  t21156 = t6763*t20855;
  t21160 = t21085 + t21133 + t20792 + t21135 + t12435 + t21149 + t21156 + t20796;
  t21172 = -3.2*t12161*t21160;
  t21195 = t20771 + t20772 + t20822 + t20837 + t21013 + t21056 + t21071 + t21172;
  t21232 = -0.5*var2[2]*t21195;
  t21237 = t20500 + t20806 + t20808 + t20821 + t21232;
  t21254 = var2[0]*t21237;
  t21289 = 0.384*var2[4]*t12569;
  t21433 = -6.4*t12161*t12222;
  t21558 = -6.4*t12161*t12569;
  t22263 = t22004 + t22016 + t22031 + t22036;
  t22268 = -3.2*t12161*t12722;
  t22269 = -3.2*t12222*t12755;
  t22270 = t22097 + t22268 + t22120 + t22269;
  t22250 = -3.2*t12658*t12161;
  t22251 = -3.2*t12639*t12222;
  t22252 = t21295 + t22250 + t22251 + t21363;
  t22193 = 0.384*var2[0]*t12569;
  t13041 = t9866 + t13013 + t13038;
  t13045 = -0.5*var2[5]*t13041;
  t14931 = t12241 + t12261 + t12262 + t12263 + t13654 + t13655 + t14474 + t14639 + t14818 + t14895;
  t15042 = -0.5*var2[1]*t14931;
  t15826 = t12381 + t12382 + t12385 + t12386 + t15140 + t15707 + t15746 + t15804;
  t15837 = -0.5*var2[0]*t15826;
  t16344 = t16206*t8492;
  t17066 = t11026*t12493;
  t17090 = t16344 + t16416 + t17042 + t17066;
  t17493 = -3.2*t12265*t17090;
  t17530 = -1.*t7670*t16206;
  t17652 = -1.*t8492*t12493;
  t18071 = t17530 + t17567 + t17652 + t17736;
  t18091 = -3.2*t12293*t18071;
  t18160 = t12463 + t15899 + t17493 + t17505 + t18091;
  t18188 = -0.5*var2[2]*t18160;
  t18244 = t13012 + t13045 + t15042 + t15837 + t18188;
  t18307 = var2[0]*t18244;
  t12323 = t240*t11026;
  t22277 = t12323 + t12811;
  t18659 = -6.4*t12318*t12265;
  t22319 = -1.*t7662*t10320;
  t22320 = 0.24*t7660*t7663;
  t22321 = t22319 + t22320;
  t22281 = 0.384*var2[6]*t22277;
  t18326 = Power(t7659,2);
  t18327 = -0.24*t18326;
  t18328 = t10329 + t18327;
  t22282 = -3.2*t10332*t22277;
  t22283 = -3.2*t10761*t14893;
  t18341 = -1.*t10320*t7663;
  t18381 = 0.24*t7659*t7663;
  t18382 = t18341 + t18381;
  t22286 = -3.2*t12333*t12859;
  t22287 = -3.2*t12265*t22277;
  t22288 = t12326 + t14679;
  t22289 = -3.2*t12318*t22288;
  t22290 = -3.2*t12293*t14893;
  t22291 = -6.4*t12859*t14893;
  t22294 = Power(t12318,2);
  t22300 = -6.4*t22294;
  t22301 = -6.4*t12318*t22277;
  t22302 = -6.4*t12333*t14893;
  t22303 = Power(t14893,2);
  t22304 = -6.4*t22303;
  t22307 = -3.2*t12520*t22277;
  t22308 = -3.2*t12516*t14893;
  t18493 = t18477*t8492;
  t18498 = t11026*t18496;
  t18500 = t18493 + t16416 + t17042 + t18498;
  t22315 = -1.*t11026*t12493;
  t22325 = -1.*t12489*t12810;
  t18503 = -1.*t7670*t18477;
  t18504 = -1.*t8492*t18496;
  t18505 = t18503 + t17567 + t18504 + t17736;
  t22330 = t7670*t12489;
  t22355 = -0.24*t7662*t7659;
  t22356 = t22355 + t22320;
  t22334 = t12493*t12810;
  t18654 = -13.6*t12228*t12237;
  t18655 = -13.6*t12257*t12237;
  t22384 = -3.2*t12318*t12293;
  t22385 = -3.2*t12265*t12333;
  t22386 = -3.2*t12318*t12859;
  t22387 = -3.2*t12265*t14893;
  t22388 = t18824 + t18825 + t18826 + t18961 + t22384 + t22385 + t22386 + t22387;
  t22390 = -3.2*t12318*t12516;
  t22391 = -3.2*t12318*t17090;
  t22392 = -3.2*t12520*t14893;
  t22393 = -3.2*t12333*t18071;
  t22394 = t20127 + t22390 + t22391 + t22392 + t22393;
  t22376 = -3.2*t10761*t12318;
  t22377 = -3.2*t10332*t14893;
  t22378 = t18603 + t22376 + t22377;
  t18330 = -3.2*t18328*t12293;
  t18397 = -3.2*t18382*t12265;
  t18399 = t18330 + t13013 + t18397 + t13038;
  t18400 = -0.5*var2[5]*t18399;
  t18401 = t13654 + t13655 + t14474 + t14639 + t14818 + t14895;
  t18403 = -0.5*var2[1]*t18401;
  t18450 = t15140 + t15707 + t15746 + t15804;
  t18470 = -0.5*var2[0]*t18450;
  t18502 = -3.2*t12265*t18500;
  t18518 = -3.2*t12293*t18505;
  t18519 = t15899 + t18502 + t17505 + t18518;
  t18538 = -0.5*var2[2]*t18519;
  t18539 = t13012 + t18400 + t18403 + t18470 + t18538;
  t18541 = var2[0]*t18539;
  t22341 = -3.2*t18328*t12318;
  t22342 = -3.2*t18382*t14893;
  t22343 = t22341 + t22282 + t22283 + t22342;
  t22344 = -0.5*var2[5]*t22343;
  t22345 = t18659 + t22286 + t22287 + t22289 + t22290 + t22291;
  t22346 = -0.5*var2[1]*t22345;
  t22347 = t22300 + t22301 + t22302 + t22304;
  t22348 = -0.5*var2[0]*t22347;
  t22351 = -3.2*t17090*t14893;
  t22352 = -3.2*t18500*t14893;
  t22353 = -1.*t18477*t8492;
  t22354 = -1.*t7670*t18496;
  t22357 = -1.*t7670*t22356;
  t22358 = -1.*t16206*t12810;
  t22359 = -1.*t18477*t12810;
  t22360 = t22353 + t12511 + t22315 + t22354 + t22357 + t22358 + t22359 + t22325;
  t22361 = -3.2*t12333*t22360;
  t22362 = -3.2*t12318*t18071;
  t22363 = -3.2*t12318*t18505;
  t22364 = t7670*t16206;
  t22365 = t7670*t18477;
  t22366 = t18477*t11026;
  t22367 = t8492*t18496;
  t22368 = t8492*t22356;
  t22369 = t22364 + t22365 + t22330 + t22366 + t12519 + t22367 + t22368 + t22334;
  t22370 = -3.2*t12318*t22369;
  t22371 = t22307 + t22308 + t22351 + t22352 + t22361 + t22362 + t22363 + t22370;
  t22372 = -0.5*var2[2]*t22371;
  t22373 = t22281 + t22344 + t22346 + t22348 + t22372;
  t22374 = var2[0]*t22373;
  t22375 = 0.384*var2[6]*t14893;
  t22380 = -6.4*t12318*t12333;
  t22381 = -6.4*t12318*t14893;
  t22430 = t22384 + t22385 + t22386 + t22387;
  t22432 = -3.2*t12318*t18500;
  t22433 = -3.2*t12333*t18505;
  t22434 = t22390 + t22432 + t22392 + t22433;
  t22424 = -3.2*t18382*t12318;
  t22425 = -3.2*t18328*t12333;
  t22426 = t22376 + t22424 + t22425 + t22377;
  t22400 = 0.384*var2[0]*t14893;
  p_output1[0]=var2[0]*(-0.5*(-6.4*t11241*t12333 + t12354 + t12355 + t12363 + t12364 - 6.4*t12373 - 6.4*t12375 + t12381 + t12382 + t12385 + t12386 - 6.4*t12394 - 6.4*t12396 - 6.4*t12161*t7365 - 6.4*t12222*t7650 - 6.4*t12318*t8639)*var2[0] - 0.5*(t12035 + t12056 + t12062 + t12066 - 3.2*t12161*(t12168 + t12172) + t12241 + t12261 + t12262 + t12263 - 9.6*t11241*t12293 - 3.2*t12318*(t12319 + t12320) - 3.2*t12222*(t12206 + t6957) - 9.6*t12079*t7365 - 9.6*t12096*t7650 - 3.2*t12333*(t12323 + t8493) - 9.6*t12265*t8639)*var2[1] - 0.5*(t12414 + t12463 - 3.2*t11241*t12516 + 2.88*t5912 - 3.2*t12450*t7365 - 3.2*t12432*t7650 - 3.2*t12520*t8639)*var2[2] - 0.5*(t7372 - 3.2*t7365*t7597 - 3.2*t7644*t7650)*var2[3] + 0.384*t7365*var2[4] - 0.5*(-3.2*t10761*t11241 - 3.2*t10332*t8639 + t9866)*var2[5] + 0.384*t8639*var2[6]);
  p_output1[1]=t12636;
  p_output1[2]=t12791;
  p_output1[3]=t18307;
  p_output1[4]=t18541;
  p_output1[5]=-1.*(-6.4*t12096*t12222 - 6.4*t12293*t12333 + t18643 + t18647 + t18650 + t18654 + t18655 + t18659)*var2[0] - 0.5*t19174*var2[1] - 0.5*t20227*var2[2] - 0.5*t18552*var2[3] + 0.384*t12079*var2[4] - 0.5*t18616*var2[5] + 0.384*t12265*var2[6];
  p_output1[6]=-0.5*t19174*var2[0];
  p_output1[7]=-0.5*t20227*var2[0];
  p_output1[8]=-0.5*t18552*var2[0];
  p_output1[9]=0.384*t12079*var2[0];
  p_output1[10]=-0.5*t18616*var2[0];
  p_output1[11]=0.384*t12265*var2[0];
  p_output1[12]=t12636;
  p_output1[13]=var2[0]*(t20500 - 0.5*(t12354 + t12355 + t12363 + t12364 + t20748 + t20749 + t20750 + t20760)*var2[0] - 0.5*(t12035 + t12056 + t12062 + t12066 + t18650 + t20686 + t20693 + t20699 + t20726 + t20733)*var2[1] - 0.5*(t12414 - 6.4*t12569*t12615 - 6.4*t12161*t12628 + t20771 + t20772 - 3.2*t12222*(-2.*t12541*t12599 + t20779 + t20787 - 2.*t12430*t4980 - 1.*t20782*t4980 - 1.*t12599*t6763) - 3.2*t12161*(t20792 + t20796 + 2.*t12599*t4980 + 2.*t12430*t6763 + t20782*t6763 + t12599*t7647))*var2[2] - 0.5*(t20526 + t20640 + t7372)*var2[3]);
  p_output1[14]=t21254;
  p_output1[15]=t21289 - 1.*(t18643 + t18647 + t21433 + t21558)*var2[0] - 0.5*t22095*var2[1] - 0.5*t22122*var2[2] - 0.5*t21364*var2[3];
  p_output1[16]=-0.5*t22095*var2[0];
  p_output1[17]=-0.5*t22122*var2[0];
  p_output1[18]=-0.5*t21364*var2[0];
  p_output1[19]=t22193;
  p_output1[20]=t12791;
  p_output1[21]=t21254;
  p_output1[22]=var2[0]*(t20500 + t20808 + t20821 - 0.5*(-6.4*t12569*t12722 - 6.4*t12161*t12755 + t20771 + t20772 - 3.2*t12222*(-2.*t12541*t12667 + t20779 + t20787 + t20838 + t20873 - 2.*t12715*t4980) - 3.2*t12161*(t20792 + t20796 + t21135 + t21156 + 2.*t12667*t4980 + 2.*t12715*t6763))*var2[2] - 0.5*(-6.4*t12161*t12639 - 3.2*t12222*t12658 - 6.4*t12569*t12658 + t20526 + t20640 - 3.2*t12161*(0.24*t12637 - 1.*t241*t7532))*var2[3]);
  p_output1[23]=t21289 - 1.*(t21433 + t21558)*var2[0] - 0.5*t22263*var2[1] - 0.5*t22270*var2[2] - 0.5*t22252*var2[3];
  p_output1[24]=-0.5*t22263*var2[0];
  p_output1[25]=-0.5*t22270*var2[0];
  p_output1[26]=-0.5*t22252*var2[0];
  p_output1[27]=t22193;
  p_output1[28]=t18307;
  p_output1[29]=var2[0]*(t22281 - 0.5*(t12381 + t12382 + t12385 + t12386 + t22300 + t22301 + t22302 + t22304)*var2[0] - 0.5*(t12241 + t12261 + t12262 + t12263 + t18659 + t22286 + t22287 + t22289 + t22290 + t22291)*var2[1] - 0.5*(t12463 - 6.4*t14893*t17090 - 6.4*t12318*t18071 + t22307 + t22308 - 3.2*t12333*(-2.*t12810*t16206 + t22315 + t22325 - 2.*t12493*t7670 - 1.*t22321*t7670 - 1.*t16206*t8492) - 3.2*t12318*(t11026*t16206 + t22330 + t22334 + 2.*t16206*t7670 + 2.*t12493*t8492 + t22321*t8492))*var2[2] - 0.5*(t22282 + t22283 + t9866)*var2[5]);
  p_output1[30]=t22374;
  p_output1[31]=t22375 - 1.*(t18654 + t18655 + t22380 + t22381)*var2[0] - 0.5*t22388*var2[1] - 0.5*t22394*var2[2] - 0.5*t22378*var2[5];
  p_output1[32]=-0.5*t22388*var2[0];
  p_output1[33]=-0.5*t22394*var2[0];
  p_output1[34]=-0.5*t22378*var2[0];
  p_output1[35]=t22400;
  p_output1[36]=t18541;
  p_output1[37]=t22374;
  p_output1[38]=var2[0]*(t22281 + t22346 + t22348 - 0.5*(-6.4*t14893*t18500 - 6.4*t12318*t18505 + t22307 + t22308 - 3.2*t12333*(-2.*t12810*t18477 + t22315 + t22325 + t22353 + t22357 - 2.*t18496*t7670) - 3.2*t12318*(t22330 + t22334 + t22366 + t22368 + 2.*t18477*t7670 + 2.*t18496*t8492))*var2[2] - 0.5*(-6.4*t12318*t18328 - 3.2*t12333*t18382 - 6.4*t14893*t18382 + t22282 + t22283 - 3.2*t12318*(0.24*t18326 - 1.*t10320*t7659))*var2[5]);
  p_output1[39]=t22375 - 1.*(t22380 + t22381)*var2[0] - 0.5*t22430*var2[1] - 0.5*t22434*var2[2] - 0.5*t22426*var2[5];
  p_output1[40]=-0.5*t22430*var2[0];
  p_output1[41]=-0.5*t22434*var2[0];
  p_output1[42]=-0.5*t22426*var2[0];
  p_output1[43]=t22400;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 44, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec1_five_link_walker.hh"

namespace RightStance
{

void J_Ce3_vec1_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
