/*
 * Automatically Generated from Mathematica.
 * Wed 1 Apr 2020 22:04:34 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t1114;
  double t189;
  double t1167;
  double t1510;
  double t2496;
  double t2668;
  double t2891;
  double t2904;
  double t2906;
  double t3339;
  double t3374;
  double t3570;
  double t3582;
  double t3595;
  double t3598;
  double t3628;
  double t1601;
  double t1609;
  double t1638;
  double t1225;
  double t1556;
  double t1561;
  double t2656;
  double t2747;
  double t2869;
  double t2870;
  double t2911;
  double t2923;
  double t3090;
  double t3111;
  double t3141;
  double t3154;
  double t3186;
  double t3217;
  double t3438;
  double t3532;
  double t3552;
  double t3369;
  double t3377;
  double t3395;
  double t3574;
  double t3589;
  double t3590;
  double t3594;
  double t3632;
  double t3647;
  double t3685;
  double t3686;
  double t3689;
  double t3703;
  double t3711;
  double t3717;
  double t4888;
  double t4902;
  double t4907;
  double t5186;
  double t5343;
  double t5819;
  double t5875;
  double t6435;
  double t6727;
  double t6774;
  double t6781;
  double t6805;
  double t6806;
  double t6807;
  double t6808;
  double t6809;
  double t6810;
  double t6811;
  double t6814;
  double t6816;
  double t6817;
  double t6818;
  double t4142;
  double t4146;
  double t4147;
  double t3930;
  double t3986;
  double t4007;
  double t6835;
  double t6836;
  double t6837;
  double t4200;
  double t4214;
  double t6830;
  double t6831;
  double t6832;
  double t6833;
  double t4568;
  double t4580;
  double t4581;
  double t4250;
  double t4252;
  double t4254;
  double t6849;
  double t6850;
  double t6851;
  double t4610;
  double t4611;
  double t6842;
  double t6843;
  double t6844;
  double t6845;
  double t2303;
  double t3558;
  double t4724;
  double t4726;
  double t4737;
  double t4794;
  double t4873;
  double t6716;
  double t6786;
  double t6789;
  double t6795;
  double t6796;
  double t6797;
  double t6799;
  double t6800;
  double t6801;
  double t6802;
  double t6803;
  double t6815;
  double t6819;
  double t6820;
  double t6822;
  double t6825;
  double t6826;
  double t6855;
  double t6856;
  double t6858;
  double t6859;
  double t6860;
  double t6941;
  double t6942;
  double t6943;
  double t6944;
  double t6945;
  double t6875;
  double t6876;
  double t6877;
  double t6878;
  double t6887;
  double t6888;
  double t6889;
  double t6890;
  double t6891;
  double t6892;
  double t6893;
  double t6894;
  double t6895;
  double t6896;
  double t6897;
  double t6929;
  double t6930;
  double t6932;
  double t6964;
  double t6965;
  double t6966;
  double t6946;
  double t6947;
  double t6948;
  double t6951;
  double t6952;
  double t6955;
  double t6956;
  double t6957;
  double t6958;
  double t6959;
  double t6960;
  double t6963;
  double t6968;
  double t6969;
  double t6973;
  double t6997;
  double t6998;
  double t6975;
  double t7000;
  double t7001;
  double t6977;
  double t6865;
  double t6866;
  double t6868;
  double t6869;
  double t6870;
  double t7012;
  double t7013;
  double t7014;
  double t7015;
  double t7016;
  double t6881;
  double t6882;
  double t6908;
  double t6909;
  double t6910;
  double t6911;
  double t6912;
  double t6913;
  double t6914;
  double t6915;
  double t6916;
  double t6935;
  double t7035;
  double t7036;
  double t7037;
  double t7017;
  double t7018;
  double t7019;
  double t7022;
  double t7023;
  double t7026;
  double t7027;
  double t7028;
  double t7029;
  double t7030;
  double t7031;
  double t7034;
  double t7039;
  double t7040;
  double t7044;
  double t7068;
  double t7069;
  double t7046;
  double t7071;
  double t7072;
  double t7048;
  double t243;
  double t1152;
  double t1590;
  double t2936;
  double t3297;
  double t3416;
  double t3660;
  double t3750;
  double t4030;
  double t4103;
  double t4151;
  double t4248;
  double t4317;
  double t4384;
  double t4607;
  double t4627;
  double t4653;
  double t1056;
  double t1161;
  double t2472;
  double t6901;
  double t6903;
  double t3569;
  double t6920;
  double t6922;
  double t6898;
  double t6899;
  double t6905;
  double t6906;
  double t6917;
  double t6918;
  double t6924;
  double t6925;
  double t6900;
  double t6902;
  double t6904;
  double t6907;
  double t6919;
  double t6921;
  double t6923;
  double t6926;
  double t6927;
  double t4655;
  double t7145;
  double t7156;
  double t6961;
  double t7165;
  double t6967;
  double t6970;
  double t6971;
  double t6974;
  double t6976;
  double t6978;
  double t7174;
  double t6987;
  double t6988;
  double t6989;
  double t7175;
  double t6983;
  double t6984;
  double t6985;
  double t7176;
  double t7179;
  double t7180;
  double t6995;
  double t7184;
  double t6999;
  double t7002;
  double t7003;
  double t7186;
  double t7005;
  double t7006;
  double t7007;
  double t7151;
  double t7159;
  double t7032;
  double t7168;
  double t7038;
  double t7041;
  double t7042;
  double t7045;
  double t7047;
  double t7049;
  double t7203;
  double t7058;
  double t7059;
  double t7060;
  double t7204;
  double t7054;
  double t7055;
  double t7056;
  double t7205;
  double t7208;
  double t7209;
  double t7066;
  double t7213;
  double t7070;
  double t7073;
  double t7074;
  double t7215;
  double t7076;
  double t7077;
  double t7078;
  double t7092;
  double t7093;
  double t7094;
  double t7095;
  double t7096;
  double t7097;
  double t7098;
  double t7099;
  double t7100;
  double t7083;
  double t7084;
  double t6931;
  double t6933;
  double t6934;
  double t6936;
  double t6937;
  double t6938;
  double t6861;
  double t6862;
  double t6863;
  double t6871;
  double t6872;
  double t6873;
  double t4877;
  double t6794;
  double t6798;
  double t6804;
  double t6821;
  double t6827;
  double t6828;
  double t7126;
  double t7127;
  double t7128;
  double t7129;
  double t7130;
  double t7131;
  double t7132;
  double t7133;
  double t7166;
  double t7167;
  double t7169;
  double t7170;
  double t7171;
  double t7260;
  double t7261;
  double t7262;
  double t7263;
  double t7264;
  double t7265;
  double t7266;
  double t7267;
  double t7268;
  double t7269;
  double t7270;
  double t7271;
  double t7272;
  double t7273;
  double t7274;
  double t7275;
  double t7185;
  double t7187;
  double t7188;
  double t6972;
  double t6979;
  double t6980;
  double t7198;
  double t7199;
  double t7200;
  double t7004;
  double t7008;
  double t7009;
  double t7214;
  double t7216;
  double t7217;
  double t7043;
  double t7050;
  double t7051;
  double t7227;
  double t7228;
  double t7229;
  double t7075;
  double t7079;
  double t7080;
  double t7101;
  double t7102;
  double t7103;
  double t7104;
  double t7105;
  double t7106;
  double t7107;
  double t7108;
  double t7235;
  double t7237;
  double t7239;
  double t7241;
  double t7243;
  double t7245;
  double t7293;
  double t6829;
  double t6834;
  double t6838;
  double t6839;
  double t7134;
  double t7135;
  double t7136;
  double t7137;
  double t7248;
  double t7249;
  double t7250;
  double t7251;
  double t7146;
  double t7147;
  double t7148;
  double t7177;
  double t6949;
  double t7280;
  double t7281;
  double t7282;
  double t7292;
  double t7294;
  double t7295;
  double t7296;
  double t7297;
  double t7298;
  double t7299;
  double t7300;
  double t7301;
  double t7302;
  double t7303;
  double t7304;
  double t7305;
  double t7191;
  double t7192;
  double t7193;
  double t6986;
  double t6990;
  double t6991;
  double t7306;
  double t7307;
  double t7308;
  double t7309;
  double t7310;
  double t7109;
  double t7110;
  double t7111;
  double t7112;
  double t7352;
  double t7353;
  double t7354;
  double t7355;
  double t7374;
  double t7376;
  double t7364;
  double t7365;
  double t7366;
  double t7367;
  double t7368;
  double t7369;
  double t7370;
  double t7371;
  double t7372;
  double t7373;
  double t6840;
  double t7138;
  double t7252;
  double t7253;
  double t7379;
  double t7380;
  double t7406;
  double t7407;
  double t7113;
  double t7233;
  double t7356;
  double t7357;
  double t7400;
  double t7401;
  double t7411;
  double t6841;
  double t6846;
  double t6852;
  double t6853;
  double t7139;
  double t7140;
  double t7141;
  double t7142;
  double t7254;
  double t7255;
  double t7256;
  double t7257;
  double t7152;
  double t7153;
  double t7154;
  double t7206;
  double t7020;
  double t7320;
  double t7321;
  double t7322;
  double t7220;
  double t7221;
  double t7222;
  double t7057;
  double t7061;
  double t7062;
  double t7332;
  double t7333;
  double t7334;
  double t7335;
  double t7336;
  double t7114;
  double t7115;
  double t7116;
  double t7117;
  double t7358;
  double t7359;
  double t7360;
  double t7361;
  double t7432;
  double t7434;
  double t6854;
  double t7143;
  double t7258;
  double t7259;
  double t7437;
  double t7438;
  double t7464;
  double t7465;
  double t7118;
  double t7234;
  double t7362;
  double t7363;
  double t7458;
  double t7459;
  t1114 = Sin(var2[2]);
  t189 = Cos(var2[2]);
  t1167 = Cos(var2[3]);
  t1510 = Sin(var2[3]);
  t2496 = Cos(var2[4]);
  t2668 = Sin(var2[4]);
  t2891 = t1167*t2496;
  t2904 = -1.*t1510*t2668;
  t2906 = t2891 + t2904;
  t3339 = Cos(var2[5]);
  t3374 = Sin(var2[5]);
  t3570 = Cos(var2[6]);
  t3582 = Sin(var2[6]);
  t3595 = t3339*t3570;
  t3598 = -1.*t3374*t3582;
  t3628 = t3595 + t3598;
  t1601 = t189*t1167;
  t1609 = -1.*t1114*t1510;
  t1638 = t1601 + t1609;
  t1225 = t1167*t1114;
  t1556 = t189*t1510;
  t1561 = t1225 + t1556;
  t2656 = -1.*t2496*t1510;
  t2747 = -1.*t1167*t2668;
  t2869 = t2656 + t2747;
  t2870 = t1114*t2869;
  t2911 = t189*t2906;
  t2923 = t2870 + t2911;
  t3090 = t2496*t1510;
  t3111 = t1167*t2668;
  t3141 = t3090 + t3111;
  t3154 = t189*t3141;
  t3186 = t1114*t2906;
  t3217 = t3154 + t3186;
  t3438 = t189*t3339;
  t3532 = -1.*t1114*t3374;
  t3552 = t3438 + t3532;
  t3369 = t3339*t1114;
  t3377 = t189*t3374;
  t3395 = t3369 + t3377;
  t3574 = -1.*t3570*t3374;
  t3589 = -1.*t3339*t3582;
  t3590 = t3574 + t3589;
  t3594 = t1114*t3590;
  t3632 = t189*t3628;
  t3647 = t3594 + t3632;
  t3685 = t3570*t3374;
  t3686 = t3339*t3582;
  t3689 = t3685 + t3686;
  t3703 = t189*t3689;
  t3711 = t1114*t3628;
  t3717 = t3703 + t3711;
  t4888 = -1.*t2496;
  t4902 = 1. + t4888;
  t4907 = 0.4*t4902;
  t5186 = 0.64*t2496;
  t5343 = t4907 + t5186;
  t5819 = t5343*t1510;
  t5875 = 0.24*t1167*t2668;
  t6435 = t5819 + t5875;
  t6727 = t1167*t5343;
  t6774 = -0.24*t1510*t2668;
  t6781 = t6727 + t6774;
  t6805 = -1.*t3570;
  t6806 = 1. + t6805;
  t6807 = 0.4*t6806;
  t6808 = 0.64*t3570;
  t6809 = t6807 + t6808;
  t6810 = t6809*t3374;
  t6811 = 0.24*t3339*t3582;
  t6814 = t6810 + t6811;
  t6816 = t3339*t6809;
  t6817 = -0.24*t3374*t3582;
  t6818 = t6816 + t6817;
  t4142 = t189*t2869;
  t4146 = -1.*t1114*t2906;
  t4147 = t4142 + t4146;
  t3930 = -1.*t1167*t1114;
  t3986 = -1.*t189*t1510;
  t4007 = t3930 + t3986;
  t6835 = t5343*t2668;
  t6836 = -0.24*t2496*t2668;
  t6837 = t6835 + t6836;
  t4200 = -1.*t1114*t3141;
  t4214 = t4200 + t2911;
  t6830 = t5343*t2496;
  t6831 = Power(t2668,2);
  t6832 = 0.24*t6831;
  t6833 = t6830 + t6832;
  t4568 = t189*t3590;
  t4580 = -1.*t1114*t3628;
  t4581 = t4568 + t4580;
  t4250 = -1.*t3339*t1114;
  t4252 = -1.*t189*t3374;
  t4254 = t4250 + t4252;
  t6849 = t6809*t3582;
  t6850 = -0.24*t3570*t3582;
  t6851 = t6849 + t6850;
  t4610 = -1.*t1114*t3689;
  t4611 = t4610 + t3632;
  t6842 = t6809*t3570;
  t6843 = Power(t3582,2);
  t6844 = 0.24*t6843;
  t6845 = t6842 + t6844;
  t2303 = Power(t1638,2);
  t3558 = Power(t3552,2);
  t4724 = Power(t1167,2);
  t4726 = 0.11*t4724;
  t4737 = Power(t1510,2);
  t4794 = 0.11*t4737;
  t4873 = t4726 + t4794;
  t6716 = -1.*t6435*t2906;
  t6786 = -1.*t2869*t6781;
  t6789 = t6716 + t6786;
  t6795 = t6435*t3141;
  t6796 = t2906*t6781;
  t6797 = t6795 + t6796;
  t6799 = Power(t3339,2);
  t6800 = 0.11*t6799;
  t6801 = Power(t3374,2);
  t6802 = 0.11*t6801;
  t6803 = t6800 + t6802;
  t6815 = -1.*t6814*t3628;
  t6819 = -1.*t3590*t6818;
  t6820 = t6815 + t6819;
  t6822 = t6814*t3689;
  t6825 = t3628*t6818;
  t6826 = t6822 + t6825;
  t6855 = -1.*var1[4];
  t6856 = var3[4] + t6855;
  t6858 = -1.*var1[3];
  t6859 = var3[3] + t6858;
  t6860 = 0.748*t4007;
  t6941 = -1.*t1167*t2496;
  t6942 = t1510*t2668;
  t6943 = t6941 + t6942;
  t6944 = t1114*t6943;
  t6945 = t4142 + t6944;
  t6875 = -1.*var1[0];
  t6876 = var3[0] + t6875;
  t6877 = 13.6*t4007*t1638;
  t6878 = 13.6*t1561*t1638;
  t6887 = -1.*var1[1];
  t6888 = var3[1] + t6887;
  t6889 = Power(t4007,2);
  t6890 = 6.8*t6889;
  t6891 = 6.8*t4007*t1561;
  t6892 = 6.8*t2303;
  t6893 = -1.*t189*t1167;
  t6894 = t1114*t1510;
  t6895 = t6893 + t6894;
  t6896 = 6.8*t1638*t6895;
  t6897 = -1.*t1114*t2869;
  t6929 = -1.*var1[2];
  t6930 = var3[2] + t6929;
  t6932 = 6.8*t4007*t4873;
  t6964 = -1.*t5343*t1510;
  t6965 = -0.24*t1167*t2668;
  t6966 = t6964 + t6965;
  t6946 = 0.768*t6856*t6945;
  t6947 = 3.2*t6837*t2923;
  t6948 = 3.2*t6833*t6945;
  t6951 = 6.4*t2923*t3217;
  t6952 = 6.4*t2923*t6945;
  t6955 = 3.2*t2923*t4214;
  t6956 = 3.2*t4147*t3217;
  t6957 = t189*t6943;
  t6958 = t6897 + t6957;
  t6959 = 3.2*t2923*t6958;
  t6960 = 3.2*t4147*t6945;
  t6963 = 3.2*t2923*t6789;
  t6968 = t6435*t2906;
  t6969 = t2869*t6781;
  t6973 = 3.2*t6797*t6945;
  t6997 = -0.24*t2496*t1510;
  t6998 = t6997 + t6965;
  t6975 = -1.*t2869*t6435;
  t7000 = 0.24*t1167*t2496;
  t7001 = t7000 + t6774;
  t6977 = -1.*t6781*t6943;
  t6865 = -1.*var1[6];
  t6866 = var3[6] + t6865;
  t6868 = -1.*var1[5];
  t6869 = var3[5] + t6868;
  t6870 = 0.748*t4254;
  t7012 = -1.*t3339*t3570;
  t7013 = t3374*t3582;
  t7014 = t7012 + t7013;
  t7015 = t1114*t7014;
  t7016 = t4568 + t7015;
  t6881 = 13.6*t4254*t3552;
  t6882 = 13.6*t3395*t3552;
  t6908 = Power(t4254,2);
  t6909 = 6.8*t6908;
  t6910 = 6.8*t4254*t3395;
  t6911 = 6.8*t3558;
  t6912 = -1.*t189*t3339;
  t6913 = t1114*t3374;
  t6914 = t6912 + t6913;
  t6915 = 6.8*t3552*t6914;
  t6916 = -1.*t1114*t3590;
  t6935 = 6.8*t4254*t6803;
  t7035 = -1.*t6809*t3374;
  t7036 = -0.24*t3339*t3582;
  t7037 = t7035 + t7036;
  t7017 = 0.768*t6866*t7016;
  t7018 = 3.2*t6851*t3647;
  t7019 = 3.2*t6845*t7016;
  t7022 = 6.4*t3647*t3717;
  t7023 = 6.4*t3647*t7016;
  t7026 = 3.2*t3647*t4611;
  t7027 = 3.2*t4581*t3717;
  t7028 = t189*t7014;
  t7029 = t6916 + t7028;
  t7030 = 3.2*t3647*t7029;
  t7031 = 3.2*t4581*t7016;
  t7034 = 3.2*t3647*t6820;
  t7039 = t6814*t3628;
  t7040 = t3590*t6818;
  t7044 = 3.2*t6826*t7016;
  t7068 = -0.24*t3570*t3374;
  t7069 = t7068 + t7036;
  t7046 = -1.*t3590*t6814;
  t7071 = 0.24*t3339*t3570;
  t7072 = t7071 + t6817;
  t7048 = -1.*t6818*t7014;
  t243 = Power(t189,2);
  t1152 = Power(t1114,2);
  t1590 = Power(t1561,2);
  t2936 = Power(t2923,2);
  t3297 = Power(t3217,2);
  t3416 = Power(t3395,2);
  t3660 = Power(t3647,2);
  t3750 = Power(t3717,2);
  t4030 = -6.8*t4007*t1638;
  t4103 = -6.8*t1561*t1638;
  t4151 = -3.2*t2923*t4147;
  t4248 = -3.2*t4214*t3217;
  t4317 = -6.8*t4254*t3552;
  t4384 = -6.8*t3395*t3552;
  t4607 = -3.2*t3647*t4581;
  t4627 = -3.2*t4611*t3717;
  t4653 = t4030 + t4103 + t4151 + t4248 + t4317 + t4384 + t4607 + t4627;
  t1056 = -12.*t243;
  t1161 = -12.*t1152;
  t2472 = -6.8*t2303;
  t6901 = Power(t4214,2);
  t6903 = Power(t4147,2);
  t3569 = -6.8*t3558;
  t6920 = Power(t4611,2);
  t6922 = Power(t4581,2);
  t6898 = -1.*t189*t2906;
  t6899 = t6897 + t6898;
  t6905 = -1.*t189*t3141;
  t6906 = t6905 + t4146;
  t6917 = -1.*t189*t3628;
  t6918 = t6916 + t6917;
  t6924 = -1.*t189*t3689;
  t6925 = t6924 + t4580;
  t6900 = 3.2*t6899*t2923;
  t6902 = 3.2*t6901;
  t6904 = 3.2*t6903;
  t6907 = 3.2*t6906*t3217;
  t6919 = 3.2*t6918*t3647;
  t6921 = 3.2*t6920;
  t6923 = 3.2*t6922;
  t6926 = 3.2*t6925*t3717;
  t6927 = t6890 + t6891 + t6892 + t6896 + t6900 + t6902 + t6904 + t6907 + t6909 + t6910 + t6911 + t6915 + t6919 + t6921 + t6923 + t6926;
  t4655 = -2.88*t189;
  t7145 = 0.748*t6895;
  t7156 = 13.6*t4007*t6895;
  t6961 = t6890 + t6891 + t6892 + t6896 + t6955 + t6956 + t6959 + t6960;
  t7165 = 6.8*t6895*t4873;
  t6967 = t6966*t2906;
  t6970 = t3141*t6781;
  t6971 = t6967 + t6968 + t6969 + t6970;
  t6974 = -1.*t2869*t6966;
  t6976 = -1.*t2906*t6781;
  t6978 = t6974 + t6975 + t6976 + t6977;
  t7174 = 0.768*t6856*t6958;
  t6987 = Power(t2496,2);
  t6988 = -0.24*t6987;
  t6989 = t6830 + t6988;
  t7175 = 3.2*t6837*t4147;
  t6983 = -1.*t5343*t2668;
  t6984 = 0.24*t2496*t2668;
  t6985 = t6983 + t6984;
  t7176 = 3.2*t6833*t6958;
  t7179 = 6.4*t4214*t4147;
  t7180 = 6.4*t4147*t6958;
  t6995 = t6955 + t6956 + t6959 + t6960;
  t7184 = 3.2*t4147*t6789;
  t6999 = t6998*t2906;
  t7002 = t3141*t7001;
  t7003 = t6999 + t6968 + t6969 + t7002;
  t7186 = 3.2*t6797*t6958;
  t7005 = -1.*t2869*t6998;
  t7006 = -1.*t2906*t7001;
  t7007 = t7005 + t6975 + t7006 + t6977;
  t7151 = 0.748*t6914;
  t7159 = 13.6*t4254*t6914;
  t7032 = t6909 + t6910 + t6911 + t6915 + t7026 + t7027 + t7030 + t7031;
  t7168 = 6.8*t6914*t6803;
  t7038 = t7037*t3628;
  t7041 = t3689*t6818;
  t7042 = t7038 + t7039 + t7040 + t7041;
  t7045 = -1.*t3590*t7037;
  t7047 = -1.*t3628*t6818;
  t7049 = t7045 + t7046 + t7047 + t7048;
  t7203 = 0.768*t6866*t7029;
  t7058 = Power(t3570,2);
  t7059 = -0.24*t7058;
  t7060 = t6842 + t7059;
  t7204 = 3.2*t6851*t4581;
  t7054 = -1.*t6809*t3582;
  t7055 = 0.24*t3570*t3582;
  t7056 = t7054 + t7055;
  t7205 = 3.2*t6845*t7029;
  t7208 = 6.4*t4611*t4581;
  t7209 = 6.4*t4581*t7029;
  t7066 = t7026 + t7027 + t7030 + t7031;
  t7213 = 3.2*t4581*t6820;
  t7070 = t7069*t3628;
  t7073 = t3689*t7072;
  t7074 = t7070 + t7039 + t7040 + t7073;
  t7215 = 3.2*t6826*t7029;
  t7076 = -1.*t3590*t7069;
  t7077 = -1.*t3628*t7072;
  t7078 = t7076 + t7046 + t7077 + t7048;
  t7092 = 6.8*t4007*t1638;
  t7093 = 6.8*t1561*t1638;
  t7094 = 3.2*t2923*t4147;
  t7095 = 3.2*t4214*t3217;
  t7096 = 6.8*t4254*t3552;
  t7097 = 6.8*t3395*t3552;
  t7098 = 3.2*t3647*t4581;
  t7099 = 3.2*t4611*t3717;
  t7100 = t7092 + t7093 + t7094 + t7095 + t7096 + t7097 + t7098 + t7099;
  t7083 = 12.*t243;
  t7084 = 12.*t1152;
  t6931 = -2.88*t1114;
  t6933 = 3.2*t4214*t6789;
  t6934 = 3.2*t4147*t6797;
  t6936 = 3.2*t4611*t6820;
  t6937 = 3.2*t4581*t6826;
  t6938 = t6931 + t6932 + t6933 + t6934 + t6935 + t6936 + t6937;
  t6861 = 3.2*t6837*t4214;
  t6862 = 3.2*t6833*t4147;
  t6863 = t6860 + t6861 + t6862;
  t6871 = 3.2*t6851*t4611;
  t6872 = 3.2*t6845*t4581;
  t6873 = t6870 + t6871 + t6872;
  t4877 = -6.8*t1638*t4873;
  t6794 = -3.2*t3217*t6789;
  t6798 = -3.2*t2923*t6797;
  t6804 = -6.8*t3552*t6803;
  t6821 = -3.2*t3717*t6820;
  t6827 = -3.2*t3647*t6826;
  t6828 = t4655 + t4877 + t6794 + t6798 + t6804 + t6821 + t6827;
  t7126 = 2.88*t1114;
  t7127 = -6.8*t4007*t4873;
  t7128 = -3.2*t4214*t6789;
  t7129 = -3.2*t4147*t6797;
  t7130 = -6.8*t4254*t6803;
  t7131 = -3.2*t4611*t6820;
  t7132 = -3.2*t4581*t6826;
  t7133 = t7126 + t7127 + t7128 + t7129 + t7130 + t7131 + t7132;
  t7166 = 3.2*t6906*t6789;
  t7167 = 3.2*t6899*t6797;
  t7169 = 3.2*t6925*t6820;
  t7170 = 3.2*t6918*t6826;
  t7171 = t4655 + t7165 + t7166 + t7167 + t7168 + t7169 + t7170;
  t7260 = 0.4*t4902*t6895;
  t7261 = -0.4*t1561*t2668;
  t7262 = t2496*t6895;
  t7263 = t1561*t2668;
  t7264 = t7262 + t7263;
  t7265 = 0.8*t7264;
  t7266 = t7260 + t7261 + t7265;
  t7267 = -1.*var4[2]*t7266;
  t7268 = 0.4*t4902*t4007;
  t7269 = -0.4*t6895*t2668;
  t7270 = t2496*t4007;
  t7271 = t6895*t2668;
  t7272 = t7270 + t7271;
  t7273 = 0.8*t7272;
  t7274 = t7268 + t7269 + t7273;
  t7275 = -1.*var4[0]*t7274;
  t7185 = 3.2*t4147*t6971;
  t7187 = 3.2*t4214*t6978;
  t7188 = t7165 + t7184 + t7185 + t7186 + t7187;
  t6972 = 3.2*t2923*t6971;
  t6979 = 3.2*t3217*t6978;
  t6980 = t6932 + t6963 + t6972 + t6973 + t6979;
  t7198 = 3.2*t4147*t7003;
  t7199 = 3.2*t4214*t7007;
  t7200 = t7184 + t7198 + t7186 + t7199;
  t7004 = 3.2*t2923*t7003;
  t7008 = 3.2*t3217*t7007;
  t7009 = t6963 + t7004 + t6973 + t7008;
  t7214 = 3.2*t4581*t7042;
  t7216 = 3.2*t4611*t7049;
  t7217 = t7168 + t7213 + t7214 + t7215 + t7216;
  t7043 = 3.2*t3647*t7042;
  t7050 = 3.2*t3717*t7049;
  t7051 = t6935 + t7034 + t7043 + t7044 + t7050;
  t7227 = 3.2*t4581*t7074;
  t7228 = 3.2*t4611*t7078;
  t7229 = t7213 + t7227 + t7215 + t7228;
  t7075 = 3.2*t3647*t7074;
  t7079 = 3.2*t3717*t7078;
  t7080 = t7034 + t7075 + t7044 + t7079;
  t7101 = 2.88*t189;
  t7102 = 6.8*t1638*t4873;
  t7103 = 3.2*t3217*t6789;
  t7104 = 3.2*t2923*t6797;
  t7105 = 6.8*t3552*t6803;
  t7106 = 3.2*t3717*t6820;
  t7107 = 3.2*t3647*t6826;
  t7108 = t7101 + t7102 + t7103 + t7104 + t7105 + t7106 + t7107;
  t7235 = Power(t4873,2);
  t7237 = Power(t6789,2);
  t7239 = Power(t6797,2);
  t7241 = Power(t6803,2);
  t7243 = Power(t6820,2);
  t7245 = Power(t6826,2);
  t7293 = 0.4*t4007*t2668;
  t6829 = -0.748*t1638;
  t6834 = -3.2*t6833*t2923;
  t6838 = -3.2*t6837*t3217;
  t6839 = t6829 + t6834 + t6838;
  t7134 = -0.748*t4007;
  t7135 = -3.2*t6837*t4214;
  t7136 = -3.2*t6833*t4147;
  t7137 = t7134 + t7135 + t7136;
  t7248 = -0.748*t4873;
  t7249 = -3.2*t6837*t6789;
  t7250 = -3.2*t6833*t6797;
  t7251 = -0.67 + t7248 + t7249 + t7250;
  t7146 = 3.2*t6833*t6899;
  t7147 = 3.2*t6837*t6906;
  t7148 = t7145 + t7146 + t7147;
  t7177 = t7145 + t7175 + t7176;
  t6949 = t6860 + t6947 + t6948;
  t7280 = 3.2*t6833*t6971;
  t7281 = 3.2*t6837*t6978;
  t7282 = t7280 + t7281;
  t7292 = -0.4*t2496*t6895;
  t7294 = -1.*t4007*t2668;
  t7295 = t7262 + t7294;
  t7296 = 0.8*t7295;
  t7297 = t7292 + t7293 + t7296;
  t7298 = -1.*var4[2]*t7297;
  t7299 = -0.4*t2496*t4007;
  t7300 = 0.4*t1638*t2668;
  t7301 = -1.*t1638*t2668;
  t7302 = t7270 + t7301;
  t7303 = 0.8*t7302;
  t7304 = t7299 + t7300 + t7303;
  t7305 = -1.*var4[0]*t7304;
  t7191 = 3.2*t6989*t4214;
  t7192 = 3.2*t6985*t4147;
  t7193 = t7191 + t7175 + t7192 + t7176;
  t6986 = 3.2*t6985*t2923;
  t6990 = 3.2*t6989*t3217;
  t6991 = t6947 + t6986 + t6990 + t6948;
  t7306 = 3.2*t6989*t6789;
  t7307 = 3.2*t6985*t6797;
  t7308 = 3.2*t6833*t7003;
  t7309 = 3.2*t6837*t7007;
  t7310 = t7306 + t7307 + t7308 + t7309;
  t7109 = 0.748*t1638;
  t7110 = 3.2*t6833*t2923;
  t7111 = 3.2*t6837*t3217;
  t7112 = t7109 + t7110 + t7111;
  t7352 = 0.748*t4873;
  t7353 = 3.2*t6837*t6789;
  t7354 = 3.2*t6833*t6797;
  t7355 = 0.67 + t7352 + t7353 + t7354;
  t7374 = Power(t6837,2);
  t7376 = Power(t6833,2);
  t7364 = -0.4*t4902*t1638;
  t7365 = t2496*t1638;
  t7366 = t4007*t2668;
  t7367 = t7365 + t7366;
  t7368 = -0.8*t7367;
  t7369 = t7364 + t7293 + t7368;
  t7370 = -0.4*t4902*t4007;
  t7371 = 0.4*t6895*t2668;
  t7372 = -0.8*t7272;
  t7373 = t7370 + t7371 + t7372;
  t6840 = -0.768*t2923;
  t7138 = -0.768*t4147;
  t7252 = -0.768*t6797;
  t7253 = -0.2 + t7252;
  t7379 = -0.768*t6833;
  t7380 = -0.2 + t7379;
  t7406 = 0.768*t6888*t6958;
  t7407 = 0.768*t6876*t6945;
  t7113 = 0.768*t2923;
  t7233 = 0.768*t4147;
  t7356 = 0.768*t6797;
  t7357 = 0.2 + t7356;
  t7400 = 0.768*t6833;
  t7401 = 0.2 + t7400;
  t7411 = 0.4*t2496*t1638;
  t6841 = -0.748*t3552;
  t6846 = -3.2*t6845*t3647;
  t6852 = -3.2*t6851*t3717;
  t6853 = t6841 + t6846 + t6852;
  t7139 = -0.748*t4254;
  t7140 = -3.2*t6851*t4611;
  t7141 = -3.2*t6845*t4581;
  t7142 = t7139 + t7140 + t7141;
  t7254 = -0.748*t6803;
  t7255 = -3.2*t6851*t6820;
  t7256 = -3.2*t6845*t6826;
  t7257 = -0.67 + t7254 + t7255 + t7256;
  t7152 = 3.2*t6845*t6918;
  t7153 = 3.2*t6851*t6925;
  t7154 = t7151 + t7152 + t7153;
  t7206 = t7151 + t7204 + t7205;
  t7020 = t6870 + t7018 + t7019;
  t7320 = 3.2*t6845*t7042;
  t7321 = 3.2*t6851*t7049;
  t7322 = t7320 + t7321;
  t7220 = 3.2*t7060*t4611;
  t7221 = 3.2*t7056*t4581;
  t7222 = t7220 + t7204 + t7221 + t7205;
  t7057 = 3.2*t7056*t3647;
  t7061 = 3.2*t7060*t3717;
  t7062 = t7018 + t7057 + t7061 + t7019;
  t7332 = 3.2*t7060*t6820;
  t7333 = 3.2*t7056*t6826;
  t7334 = 3.2*t6845*t7074;
  t7335 = 3.2*t6851*t7078;
  t7336 = t7332 + t7333 + t7334 + t7335;
  t7114 = 0.748*t3552;
  t7115 = 3.2*t6845*t3647;
  t7116 = 3.2*t6851*t3717;
  t7117 = t7114 + t7115 + t7116;
  t7358 = 0.748*t6803;
  t7359 = 3.2*t6851*t6820;
  t7360 = 3.2*t6845*t6826;
  t7361 = 0.67 + t7358 + t7359 + t7360;
  t7432 = Power(t6851,2);
  t7434 = Power(t6845,2);
  t6854 = -0.768*t3647;
  t7143 = -0.768*t4581;
  t7258 = -0.768*t6826;
  t7259 = -0.2 + t7258;
  t7437 = -0.768*t6845;
  t7438 = -0.2 + t7437;
  t7464 = 0.768*t6888*t7029;
  t7465 = 0.768*t6876*t7016;
  t7118 = 0.768*t3647;
  t7234 = 0.768*t4581;
  t7362 = 0.768*t6826;
  t7363 = 0.2 + t7362;
  t7458 = 0.768*t6845;
  t7459 = 0.2 + t7458;
  p_output1[0]=t1056 + t1161 - 6.8*t1590 + t2472 - 3.2*t2936 - 3.2*t3297 - 6.8*t3416 + t3569 - 3.2*t3660 - 3.2*t3750;
  p_output1[1]=t4653;
  p_output1[2]=t6828;
  p_output1[3]=t6839;
  p_output1[4]=t6840;
  p_output1[5]=t6853;
  p_output1[6]=t6854;
  p_output1[7]=0.768*t4147*t6856 + t6859*t6863 + 0.768*t4581*t6866 + t6869*t6873 + t6876*(6.4*t2923*t4147 + 6.4*t3217*t4214 + 6.4*t3647*t4581 + 6.4*t3717*t4611 + t6877 + t6878 + t6881 + t6882) + t6888*t6927 + t6930*t6938;
  p_output1[8]=t6946 + t6859*t6949 + t6876*(t6877 + t6878 + t6951 + t6952) + t6888*t6961 + t6930*t6980;
  p_output1[9]=t6946 + t6876*(t6951 + t6952) + t6859*t6991 + t6888*t6995 + t6930*t7009;
  p_output1[10]=t7017 + t6869*t7020 + t6876*(t6881 + t6882 + t7022 + t7023) + t6888*t7032 + t6930*t7051;
  p_output1[11]=t7017 + t6876*(t7022 + t7023) + t6869*t7062 + t6888*t7066 + t6930*t7080;
  p_output1[12]=6.8*t1590 + 3.2*t2936 + 3.2*t3297 + 6.8*t3416 + 3.2*t3660 + 3.2*t3750 + t6892 + t6911 + t7083 + t7084;
  p_output1[13]=t7100;
  p_output1[14]=t7108;
  p_output1[15]=t7112;
  p_output1[16]=t7113;
  p_output1[17]=t7117;
  p_output1[18]=t7118;
  p_output1[19]=-1.;
  p_output1[20]=t4653;
  p_output1[21]=t1056 + t1161 + t2472 + t3569 - 6.8*t6889 - 3.2*t6901 - 3.2*t6903 - 6.8*t6908 - 3.2*t6920 - 3.2*t6922;
  p_output1[22]=t7133;
  p_output1[23]=t7137;
  p_output1[24]=t7138;
  p_output1[25]=t7142;
  p_output1[26]=t7143;
  p_output1[27]=0.768*t6856*t6899 + 0.768*t6866*t6918 + t6876*t6927 + t6859*t7148 + t6869*t7154 + t6888*(t6877 + t6881 + 6.4*t4147*t6899 + 6.4*t4214*t6906 + 6.4*t4581*t6918 + 6.4*t4611*t6925 + t7156 + t7159) + t6930*t7171;
  p_output1[28]=t6876*t6961 + t7174 + t6859*t7177 + t6888*(t6877 + t7156 + t7179 + t7180) + t6930*t7188;
  p_output1[29]=t6876*t6995 + t7174 + t6888*(t7179 + t7180) + t6859*t7193 + t6930*t7200;
  p_output1[30]=t6876*t7032 + t7203 + t6869*t7206 + t6888*(t6881 + t7159 + t7208 + t7209) + t6930*t7217;
  p_output1[31]=t6876*t7066 + t7203 + t6888*(t7208 + t7209) + t6869*t7222 + t6930*t7229;
  p_output1[32]=t7100;
  p_output1[33]=t6890 + t6892 + t6902 + t6904 + t6909 + t6911 + t6921 + t6923 + t7083 + t7084;
  p_output1[34]=t6938;
  p_output1[35]=t6863;
  p_output1[36]=t7233;
  p_output1[37]=t6873;
  p_output1[38]=t7234;
  p_output1[39]=-1.;
  p_output1[40]=t6828;
  p_output1[41]=t7133;
  p_output1[42]=-3.3612 - 6.8*t7235 - 3.2*t7237 - 3.2*t7239 - 6.8*t7241 - 3.2*t7243 - 3.2*t7245;
  p_output1[43]=t7251;
  p_output1[44]=t7253;
  p_output1[45]=t7257;
  p_output1[46]=t7259;
  p_output1[47]=t6876*t6938 + t6888*t7171 + t7267 + t7275;
  p_output1[48]=0.768*t6856*t6971 + t6930*(6.4*t6797*t6971 + 6.4*t6789*t6978) + t6876*t6980 + t6888*t7188 + t7267 + t7275 + t6859*t7282;
  p_output1[49]=0.768*t6856*t7003 + t6930*(6.4*t6797*t7003 + 6.4*t6789*t7007) + t6876*t7009 + t6888*t7200 + t7298 + t7305 + t6859*t7310;
  p_output1[50]=0.768*t6866*t7042 + t6930*(6.4*t6826*t7042 + 6.4*t6820*t7049) + t6876*t7051 + t6888*t7217 + t6869*t7322;
  p_output1[51]=0.768*t6866*t7074 + t6930*(6.4*t6826*t7074 + 6.4*t6820*t7078) + t6876*t7080 + t6888*t7229 + t6869*t7336;
  p_output1[52]=t7108;
  p_output1[53]=t6938;
  p_output1[54]=3.3612 + 6.8*t7235 + 3.2*t7237 + 3.2*t7239 + 6.8*t7241 + 3.2*t7243 + 3.2*t7245;
  p_output1[55]=t7355;
  p_output1[56]=t7357;
  p_output1[57]=t7361;
  p_output1[58]=t7363;
  p_output1[59]=t7369;
  p_output1[60]=t7373;
  p_output1[61]=t6839;
  p_output1[62]=t7137;
  p_output1[63]=t7251;
  p_output1[64]=-1.58228 - 3.2*t7374 - 3.2*t7376;
  p_output1[65]=t7380;
  p_output1[66]=t6863*t6876 + t6888*t7148 + t7267 + t7275;
  p_output1[67]=t6876*t6949 + t6888*t7177 + t7267 + t7275 + t6930*t7282;
  p_output1[68]=0.768*t6856*t6985 + t6859*(6.4*t6833*t6985 + 6.4*t6837*t6989) + t6876*t6991 + t6888*t7193 + t7298 + t7305 + t6930*t7310;
  p_output1[69]=t7112;
  p_output1[70]=t6863;
  p_output1[71]=t7355;
  p_output1[72]=1.58228 + 3.2*t7374 + 3.2*t7376;
  p_output1[73]=t7401;
  p_output1[74]=t7369;
  p_output1[75]=t7373;
  p_output1[76]=t6840;
  p_output1[77]=t7138;
  p_output1[78]=t7253;
  p_output1[79]=t7380;
  p_output1[80]=-1.2143199999999998;
  p_output1[81]=0.768*t4147*t6876 + 0.768*t6888*t6899 + t7298 + t7305;
  p_output1[82]=0.768*t6930*t6971 + t7298 + t7305 + t7406 + t7407;
  p_output1[83]=0.768*t6859*t6985 + 0.768*t6930*t7003 + t7406 + t7407 - 1.*(0.4*t1561*t2496 + t7300 + 0.8*(-1.*t1561*t2496 + t7301))*var4[0] - 1.*(t7293 + 0.8*(-1.*t1638*t2496 + t7294) + t7411)*var4[2];
  p_output1[84]=t7113;
  p_output1[85]=t7233;
  p_output1[86]=t7357;
  p_output1[87]=t7401;
  p_output1[88]=1.2143199999999998;
  p_output1[89]=t7261 - 0.8*(-1.*t1561*t2668 + t7365) + t7411;
  p_output1[90]=-0.4*t1638*t2668 + 0.4*t2496*t4007 - 0.8*t7302;
  p_output1[91]=t6853;
  p_output1[92]=t7142;
  p_output1[93]=t7257;
  p_output1[94]=-1.58228 - 3.2*t7432 - 3.2*t7434;
  p_output1[95]=t7438;
  p_output1[96]=t6873*t6876 + t6888*t7154;
  p_output1[97]=t6876*t7020 + t6888*t7206 + t6930*t7322;
  p_output1[98]=0.768*t6866*t7056 + t6869*(6.4*t6845*t7056 + 6.4*t6851*t7060) + t6876*t7062 + t6888*t7222 + t6930*t7336;
  p_output1[99]=t7117;
  p_output1[100]=t6873;
  p_output1[101]=t7361;
  p_output1[102]=1.58228 + 3.2*t7432 + 3.2*t7434;
  p_output1[103]=t7459;
  p_output1[104]=t6854;
  p_output1[105]=t7143;
  p_output1[106]=t7259;
  p_output1[107]=t7438;
  p_output1[108]=-1.2143199999999998;
  p_output1[109]=0.768*t4581*t6876 + 0.768*t6888*t6918;
  p_output1[110]=0.768*t6930*t7042 + t7464 + t7465;
  p_output1[111]=0.768*t6869*t7056 + 0.768*t6930*t7074 + t7464 + t7465;
  p_output1[112]=t7118;
  p_output1[113]=t7234;
  p_output1[114]=t7363;
  p_output1[115]=t7459;
  p_output1[116]=1.2143199999999998;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 117, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "J_dxDiscreteMapRightImpact.hh"

namespace RightImpact
{

void J_dxDiscreteMapRightImpact_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
