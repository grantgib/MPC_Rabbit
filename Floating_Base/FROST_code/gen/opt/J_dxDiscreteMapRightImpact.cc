/*
 * Automatically Generated from Mathematica.
 * Sun 29 Mar 2020 00:53:28 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t4666;
  double t646;
  double t4755;
  double t4795;
  double t11318;
  double t12812;
  double t17788;
  double t17939;
  double t18342;
  double t23068;
  double t23081;
  double t23122;
  double t23124;
  double t23130;
  double t23131;
  double t23132;
  double t7933;
  double t9937;
  double t9942;
  double t4793;
  double t5335;
  double t5584;
  double t12532;
  double t12814;
  double t14056;
  double t16646;
  double t18645;
  double t19006;
  double t21291;
  double t21317;
  double t23035;
  double t23052;
  double t23053;
  double t23056;
  double t23115;
  double t23116;
  double t23119;
  double t23078;
  double t23096;
  double t23097;
  double t23123;
  double t23127;
  double t23128;
  double t23129;
  double t23142;
  double t23146;
  double t23162;
  double t23166;
  double t23172;
  double t23173;
  double t23177;
  double t23178;
  double t23258;
  double t23259;
  double t23260;
  double t23261;
  double t23262;
  double t23263;
  double t23264;
  double t23265;
  double t23267;
  double t23268;
  double t23271;
  double t23285;
  double t23286;
  double t23287;
  double t23288;
  double t23289;
  double t23290;
  double t23291;
  double t23292;
  double t23294;
  double t23295;
  double t23296;
  double t23195;
  double t23196;
  double t23197;
  double t23186;
  double t23191;
  double t23192;
  double t23313;
  double t23314;
  double t23315;
  double t23199;
  double t23200;
  double t23308;
  double t23309;
  double t23310;
  double t23311;
  double t23215;
  double t23216;
  double t23220;
  double t23202;
  double t23203;
  double t23204;
  double t23325;
  double t23326;
  double t23327;
  double t23231;
  double t23238;
  double t23320;
  double t23321;
  double t23322;
  double t23323;
  double t10655;
  double t23120;
  double t23252;
  double t23253;
  double t23254;
  double t23255;
  double t23256;
  double t23266;
  double t23272;
  double t23273;
  double t23275;
  double t23276;
  double t23277;
  double t23279;
  double t23280;
  double t23281;
  double t23282;
  double t23283;
  double t23293;
  double t23297;
  double t23298;
  double t23300;
  double t23301;
  double t23304;
  double t23331;
  double t23332;
  double t23334;
  double t23335;
  double t23336;
  double t23417;
  double t23418;
  double t23419;
  double t23420;
  double t23421;
  double t23351;
  double t23352;
  double t23353;
  double t23354;
  double t23363;
  double t23364;
  double t23365;
  double t23366;
  double t23367;
  double t23368;
  double t23369;
  double t23370;
  double t23371;
  double t23372;
  double t23373;
  double t23405;
  double t23406;
  double t23408;
  double t23440;
  double t23441;
  double t23442;
  double t23422;
  double t23423;
  double t23424;
  double t23427;
  double t23428;
  double t23431;
  double t23432;
  double t23433;
  double t23434;
  double t23435;
  double t23436;
  double t23439;
  double t23444;
  double t23445;
  double t23449;
  double t23473;
  double t23474;
  double t23451;
  double t23476;
  double t23477;
  double t23453;
  double t23341;
  double t23342;
  double t23344;
  double t23345;
  double t23346;
  double t23488;
  double t23489;
  double t23490;
  double t23491;
  double t23492;
  double t23357;
  double t23358;
  double t23384;
  double t23385;
  double t23386;
  double t23387;
  double t23388;
  double t23389;
  double t23390;
  double t23391;
  double t23392;
  double t23411;
  double t23511;
  double t23512;
  double t23513;
  double t23493;
  double t23494;
  double t23495;
  double t23498;
  double t23499;
  double t23502;
  double t23503;
  double t23504;
  double t23505;
  double t23506;
  double t23507;
  double t23510;
  double t23515;
  double t23516;
  double t23520;
  double t23544;
  double t23545;
  double t23522;
  double t23547;
  double t23548;
  double t23524;
  double t1955;
  double t4731;
  double t5880;
  double t21222;
  double t23057;
  double t23100;
  double t23152;
  double t23179;
  double t23193;
  double t23194;
  double t23198;
  double t23201;
  double t23205;
  double t23206;
  double t23227;
  double t23243;
  double t23246;
  double t3362;
  double t4753;
  double t10914;
  double t23377;
  double t23379;
  double t23121;
  double t23396;
  double t23398;
  double t23374;
  double t23375;
  double t23381;
  double t23382;
  double t23393;
  double t23394;
  double t23400;
  double t23401;
  double t23376;
  double t23378;
  double t23380;
  double t23383;
  double t23395;
  double t23397;
  double t23399;
  double t23402;
  double t23403;
  double t23251;
  double t23621;
  double t23632;
  double t23437;
  double t23641;
  double t23443;
  double t23446;
  double t23447;
  double t23450;
  double t23452;
  double t23454;
  double t23650;
  double t23463;
  double t23464;
  double t23465;
  double t23651;
  double t23459;
  double t23460;
  double t23461;
  double t23652;
  double t23655;
  double t23656;
  double t23471;
  double t23660;
  double t23475;
  double t23478;
  double t23479;
  double t23662;
  double t23481;
  double t23482;
  double t23483;
  double t23627;
  double t23635;
  double t23508;
  double t23644;
  double t23514;
  double t23517;
  double t23518;
  double t23521;
  double t23523;
  double t23525;
  double t23679;
  double t23534;
  double t23535;
  double t23536;
  double t23680;
  double t23530;
  double t23531;
  double t23532;
  double t23681;
  double t23684;
  double t23685;
  double t23542;
  double t23689;
  double t23546;
  double t23549;
  double t23550;
  double t23691;
  double t23552;
  double t23553;
  double t23554;
  double t23568;
  double t23569;
  double t23570;
  double t23571;
  double t23572;
  double t23573;
  double t23574;
  double t23575;
  double t23576;
  double t23559;
  double t23560;
  double t23407;
  double t23409;
  double t23410;
  double t23412;
  double t23413;
  double t23414;
  double t23337;
  double t23338;
  double t23339;
  double t23347;
  double t23348;
  double t23349;
  double t23257;
  double t23274;
  double t23278;
  double t23284;
  double t23299;
  double t23305;
  double t23306;
  double t23602;
  double t23603;
  double t23604;
  double t23605;
  double t23606;
  double t23607;
  double t23608;
  double t23609;
  double t23642;
  double t23643;
  double t23645;
  double t23646;
  double t23647;
  double t23736;
  double t23737;
  double t23738;
  double t23739;
  double t23740;
  double t23741;
  double t23742;
  double t23743;
  double t23744;
  double t23745;
  double t23746;
  double t23747;
  double t23748;
  double t23749;
  double t23750;
  double t23751;
  double t23661;
  double t23663;
  double t23664;
  double t23448;
  double t23455;
  double t23456;
  double t23674;
  double t23675;
  double t23676;
  double t23480;
  double t23484;
  double t23485;
  double t23690;
  double t23692;
  double t23693;
  double t23519;
  double t23526;
  double t23527;
  double t23703;
  double t23704;
  double t23705;
  double t23551;
  double t23555;
  double t23556;
  double t23577;
  double t23578;
  double t23579;
  double t23580;
  double t23581;
  double t23582;
  double t23583;
  double t23584;
  double t23711;
  double t23713;
  double t23715;
  double t23717;
  double t23719;
  double t23721;
  double t23769;
  double t23307;
  double t23312;
  double t23316;
  double t23317;
  double t23610;
  double t23611;
  double t23612;
  double t23613;
  double t23724;
  double t23725;
  double t23726;
  double t23727;
  double t23622;
  double t23623;
  double t23624;
  double t23653;
  double t23425;
  double t23756;
  double t23757;
  double t23758;
  double t23768;
  double t23770;
  double t23771;
  double t23772;
  double t23773;
  double t23774;
  double t23775;
  double t23776;
  double t23777;
  double t23778;
  double t23779;
  double t23780;
  double t23781;
  double t23667;
  double t23668;
  double t23669;
  double t23462;
  double t23466;
  double t23467;
  double t23782;
  double t23783;
  double t23784;
  double t23785;
  double t23786;
  double t23585;
  double t23586;
  double t23587;
  double t23588;
  double t23828;
  double t23829;
  double t23830;
  double t23831;
  double t23850;
  double t23852;
  double t23840;
  double t23841;
  double t23842;
  double t23843;
  double t23844;
  double t23845;
  double t23846;
  double t23847;
  double t23848;
  double t23849;
  double t23318;
  double t23614;
  double t23728;
  double t23729;
  double t23855;
  double t23856;
  double t23882;
  double t23883;
  double t23589;
  double t23709;
  double t23832;
  double t23833;
  double t23876;
  double t23877;
  double t23887;
  double t23319;
  double t23324;
  double t23328;
  double t23329;
  double t23615;
  double t23616;
  double t23617;
  double t23618;
  double t23730;
  double t23731;
  double t23732;
  double t23733;
  double t23628;
  double t23629;
  double t23630;
  double t23682;
  double t23496;
  double t23796;
  double t23797;
  double t23798;
  double t23696;
  double t23697;
  double t23698;
  double t23533;
  double t23537;
  double t23538;
  double t23808;
  double t23809;
  double t23810;
  double t23811;
  double t23812;
  double t23590;
  double t23591;
  double t23592;
  double t23593;
  double t23834;
  double t23835;
  double t23836;
  double t23837;
  double t23908;
  double t23910;
  double t23330;
  double t23619;
  double t23734;
  double t23735;
  double t23913;
  double t23914;
  double t23940;
  double t23941;
  double t23594;
  double t23710;
  double t23838;
  double t23839;
  double t23934;
  double t23935;
  t4666 = Sin(var2[2]);
  t646 = Cos(var2[2]);
  t4755 = Cos(var2[3]);
  t4795 = Sin(var2[3]);
  t11318 = Cos(var2[4]);
  t12812 = Sin(var2[4]);
  t17788 = t4755*t11318;
  t17939 = -1.*t4795*t12812;
  t18342 = t17788 + t17939;
  t23068 = Cos(var2[5]);
  t23081 = Sin(var2[5]);
  t23122 = Cos(var2[6]);
  t23124 = Sin(var2[6]);
  t23130 = t23068*t23122;
  t23131 = -1.*t23081*t23124;
  t23132 = t23130 + t23131;
  t7933 = t646*t4755;
  t9937 = -1.*t4666*t4795;
  t9942 = t7933 + t9937;
  t4793 = t4755*t4666;
  t5335 = t646*t4795;
  t5584 = t4793 + t5335;
  t12532 = -1.*t11318*t4795;
  t12814 = -1.*t4755*t12812;
  t14056 = t12532 + t12814;
  t16646 = t4666*t14056;
  t18645 = t646*t18342;
  t19006 = t16646 + t18645;
  t21291 = t11318*t4795;
  t21317 = t4755*t12812;
  t23035 = t21291 + t21317;
  t23052 = t646*t23035;
  t23053 = t4666*t18342;
  t23056 = t23052 + t23053;
  t23115 = t646*t23068;
  t23116 = -1.*t4666*t23081;
  t23119 = t23115 + t23116;
  t23078 = t23068*t4666;
  t23096 = t646*t23081;
  t23097 = t23078 + t23096;
  t23123 = -1.*t23122*t23081;
  t23127 = -1.*t23068*t23124;
  t23128 = t23123 + t23127;
  t23129 = t4666*t23128;
  t23142 = t646*t23132;
  t23146 = t23129 + t23142;
  t23162 = t23122*t23081;
  t23166 = t23068*t23124;
  t23172 = t23162 + t23166;
  t23173 = t646*t23172;
  t23177 = t4666*t23132;
  t23178 = t23173 + t23177;
  t23258 = -1.*t11318;
  t23259 = 1. + t23258;
  t23260 = 0.4*t23259;
  t23261 = 0.64*t11318;
  t23262 = t23260 + t23261;
  t23263 = t23262*t4795;
  t23264 = 0.24*t4755*t12812;
  t23265 = t23263 + t23264;
  t23267 = t4755*t23262;
  t23268 = -0.24*t4795*t12812;
  t23271 = t23267 + t23268;
  t23285 = -1.*t23122;
  t23286 = 1. + t23285;
  t23287 = 0.4*t23286;
  t23288 = 0.64*t23122;
  t23289 = t23287 + t23288;
  t23290 = t23289*t23081;
  t23291 = 0.24*t23068*t23124;
  t23292 = t23290 + t23291;
  t23294 = t23068*t23289;
  t23295 = -0.24*t23081*t23124;
  t23296 = t23294 + t23295;
  t23195 = t646*t14056;
  t23196 = -1.*t4666*t18342;
  t23197 = t23195 + t23196;
  t23186 = -1.*t4755*t4666;
  t23191 = -1.*t646*t4795;
  t23192 = t23186 + t23191;
  t23313 = t23262*t12812;
  t23314 = -0.24*t11318*t12812;
  t23315 = t23313 + t23314;
  t23199 = -1.*t4666*t23035;
  t23200 = t23199 + t18645;
  t23308 = t23262*t11318;
  t23309 = Power(t12812,2);
  t23310 = 0.24*t23309;
  t23311 = t23308 + t23310;
  t23215 = t646*t23128;
  t23216 = -1.*t4666*t23132;
  t23220 = t23215 + t23216;
  t23202 = -1.*t23068*t4666;
  t23203 = -1.*t646*t23081;
  t23204 = t23202 + t23203;
  t23325 = t23289*t23124;
  t23326 = -0.24*t23122*t23124;
  t23327 = t23325 + t23326;
  t23231 = -1.*t4666*t23172;
  t23238 = t23231 + t23142;
  t23320 = t23289*t23122;
  t23321 = Power(t23124,2);
  t23322 = 0.24*t23321;
  t23323 = t23320 + t23322;
  t10655 = Power(t9942,2);
  t23120 = Power(t23119,2);
  t23252 = Power(t4755,2);
  t23253 = 0.11*t23252;
  t23254 = Power(t4795,2);
  t23255 = 0.11*t23254;
  t23256 = t23253 + t23255;
  t23266 = -1.*t23265*t18342;
  t23272 = -1.*t14056*t23271;
  t23273 = t23266 + t23272;
  t23275 = t23265*t23035;
  t23276 = t18342*t23271;
  t23277 = t23275 + t23276;
  t23279 = Power(t23068,2);
  t23280 = 0.11*t23279;
  t23281 = Power(t23081,2);
  t23282 = 0.11*t23281;
  t23283 = t23280 + t23282;
  t23293 = -1.*t23292*t23132;
  t23297 = -1.*t23128*t23296;
  t23298 = t23293 + t23297;
  t23300 = t23292*t23172;
  t23301 = t23132*t23296;
  t23304 = t23300 + t23301;
  t23331 = -1.*var1[4];
  t23332 = var3[4] + t23331;
  t23334 = -1.*var1[3];
  t23335 = var3[3] + t23334;
  t23336 = 0.748*t23192;
  t23417 = -1.*t4755*t11318;
  t23418 = t4795*t12812;
  t23419 = t23417 + t23418;
  t23420 = t4666*t23419;
  t23421 = t23195 + t23420;
  t23351 = -1.*var1[0];
  t23352 = var3[0] + t23351;
  t23353 = 13.6*t23192*t9942;
  t23354 = 13.6*t5584*t9942;
  t23363 = -1.*var1[1];
  t23364 = var3[1] + t23363;
  t23365 = Power(t23192,2);
  t23366 = 6.8*t23365;
  t23367 = 6.8*t23192*t5584;
  t23368 = 6.8*t10655;
  t23369 = -1.*t646*t4755;
  t23370 = t4666*t4795;
  t23371 = t23369 + t23370;
  t23372 = 6.8*t9942*t23371;
  t23373 = -1.*t4666*t14056;
  t23405 = -1.*var1[2];
  t23406 = var3[2] + t23405;
  t23408 = 6.8*t23192*t23256;
  t23440 = -1.*t23262*t4795;
  t23441 = -0.24*t4755*t12812;
  t23442 = t23440 + t23441;
  t23422 = 0.768*t23332*t23421;
  t23423 = 3.2*t23315*t19006;
  t23424 = 3.2*t23311*t23421;
  t23427 = 6.4*t19006*t23056;
  t23428 = 6.4*t19006*t23421;
  t23431 = 3.2*t19006*t23200;
  t23432 = 3.2*t23197*t23056;
  t23433 = t646*t23419;
  t23434 = t23373 + t23433;
  t23435 = 3.2*t19006*t23434;
  t23436 = 3.2*t23197*t23421;
  t23439 = 3.2*t19006*t23273;
  t23444 = t23265*t18342;
  t23445 = t14056*t23271;
  t23449 = 3.2*t23277*t23421;
  t23473 = -0.24*t11318*t4795;
  t23474 = t23473 + t23441;
  t23451 = -1.*t14056*t23265;
  t23476 = 0.24*t4755*t11318;
  t23477 = t23476 + t23268;
  t23453 = -1.*t23271*t23419;
  t23341 = -1.*var1[6];
  t23342 = var3[6] + t23341;
  t23344 = -1.*var1[5];
  t23345 = var3[5] + t23344;
  t23346 = 0.748*t23204;
  t23488 = -1.*t23068*t23122;
  t23489 = t23081*t23124;
  t23490 = t23488 + t23489;
  t23491 = t4666*t23490;
  t23492 = t23215 + t23491;
  t23357 = 13.6*t23204*t23119;
  t23358 = 13.6*t23097*t23119;
  t23384 = Power(t23204,2);
  t23385 = 6.8*t23384;
  t23386 = 6.8*t23204*t23097;
  t23387 = 6.8*t23120;
  t23388 = -1.*t646*t23068;
  t23389 = t4666*t23081;
  t23390 = t23388 + t23389;
  t23391 = 6.8*t23119*t23390;
  t23392 = -1.*t4666*t23128;
  t23411 = 6.8*t23204*t23283;
  t23511 = -1.*t23289*t23081;
  t23512 = -0.24*t23068*t23124;
  t23513 = t23511 + t23512;
  t23493 = 0.768*t23342*t23492;
  t23494 = 3.2*t23327*t23146;
  t23495 = 3.2*t23323*t23492;
  t23498 = 6.4*t23146*t23178;
  t23499 = 6.4*t23146*t23492;
  t23502 = 3.2*t23146*t23238;
  t23503 = 3.2*t23220*t23178;
  t23504 = t646*t23490;
  t23505 = t23392 + t23504;
  t23506 = 3.2*t23146*t23505;
  t23507 = 3.2*t23220*t23492;
  t23510 = 3.2*t23146*t23298;
  t23515 = t23292*t23132;
  t23516 = t23128*t23296;
  t23520 = 3.2*t23304*t23492;
  t23544 = -0.24*t23122*t23081;
  t23545 = t23544 + t23512;
  t23522 = -1.*t23128*t23292;
  t23547 = 0.24*t23068*t23122;
  t23548 = t23547 + t23295;
  t23524 = -1.*t23296*t23490;
  t1955 = Power(t646,2);
  t4731 = Power(t4666,2);
  t5880 = Power(t5584,2);
  t21222 = Power(t19006,2);
  t23057 = Power(t23056,2);
  t23100 = Power(t23097,2);
  t23152 = Power(t23146,2);
  t23179 = Power(t23178,2);
  t23193 = -6.8*t23192*t9942;
  t23194 = -6.8*t5584*t9942;
  t23198 = -3.2*t19006*t23197;
  t23201 = -3.2*t23200*t23056;
  t23205 = -6.8*t23204*t23119;
  t23206 = -6.8*t23097*t23119;
  t23227 = -3.2*t23146*t23220;
  t23243 = -3.2*t23238*t23178;
  t23246 = t23193 + t23194 + t23198 + t23201 + t23205 + t23206 + t23227 + t23243;
  t3362 = -12.*t1955;
  t4753 = -12.*t4731;
  t10914 = -6.8*t10655;
  t23377 = Power(t23200,2);
  t23379 = Power(t23197,2);
  t23121 = -6.8*t23120;
  t23396 = Power(t23238,2);
  t23398 = Power(t23220,2);
  t23374 = -1.*t646*t18342;
  t23375 = t23373 + t23374;
  t23381 = -1.*t646*t23035;
  t23382 = t23381 + t23196;
  t23393 = -1.*t646*t23132;
  t23394 = t23392 + t23393;
  t23400 = -1.*t646*t23172;
  t23401 = t23400 + t23216;
  t23376 = 3.2*t23375*t19006;
  t23378 = 3.2*t23377;
  t23380 = 3.2*t23379;
  t23383 = 3.2*t23382*t23056;
  t23395 = 3.2*t23394*t23146;
  t23397 = 3.2*t23396;
  t23399 = 3.2*t23398;
  t23402 = 3.2*t23401*t23178;
  t23403 = t23366 + t23367 + t23368 + t23372 + t23376 + t23378 + t23380 + t23383 + t23385 + t23386 + t23387 + t23391 + t23395 + t23397 + t23399 + t23402;
  t23251 = -2.88*t646;
  t23621 = 0.748*t23371;
  t23632 = 13.6*t23192*t23371;
  t23437 = t23366 + t23367 + t23368 + t23372 + t23431 + t23432 + t23435 + t23436;
  t23641 = 6.8*t23371*t23256;
  t23443 = t23442*t18342;
  t23446 = t23035*t23271;
  t23447 = t23443 + t23444 + t23445 + t23446;
  t23450 = -1.*t14056*t23442;
  t23452 = -1.*t18342*t23271;
  t23454 = t23450 + t23451 + t23452 + t23453;
  t23650 = 0.768*t23332*t23434;
  t23463 = Power(t11318,2);
  t23464 = -0.24*t23463;
  t23465 = t23308 + t23464;
  t23651 = 3.2*t23315*t23197;
  t23459 = -1.*t23262*t12812;
  t23460 = 0.24*t11318*t12812;
  t23461 = t23459 + t23460;
  t23652 = 3.2*t23311*t23434;
  t23655 = 6.4*t23200*t23197;
  t23656 = 6.4*t23197*t23434;
  t23471 = t23431 + t23432 + t23435 + t23436;
  t23660 = 3.2*t23197*t23273;
  t23475 = t23474*t18342;
  t23478 = t23035*t23477;
  t23479 = t23475 + t23444 + t23445 + t23478;
  t23662 = 3.2*t23277*t23434;
  t23481 = -1.*t14056*t23474;
  t23482 = -1.*t18342*t23477;
  t23483 = t23481 + t23451 + t23482 + t23453;
  t23627 = 0.748*t23390;
  t23635 = 13.6*t23204*t23390;
  t23508 = t23385 + t23386 + t23387 + t23391 + t23502 + t23503 + t23506 + t23507;
  t23644 = 6.8*t23390*t23283;
  t23514 = t23513*t23132;
  t23517 = t23172*t23296;
  t23518 = t23514 + t23515 + t23516 + t23517;
  t23521 = -1.*t23128*t23513;
  t23523 = -1.*t23132*t23296;
  t23525 = t23521 + t23522 + t23523 + t23524;
  t23679 = 0.768*t23342*t23505;
  t23534 = Power(t23122,2);
  t23535 = -0.24*t23534;
  t23536 = t23320 + t23535;
  t23680 = 3.2*t23327*t23220;
  t23530 = -1.*t23289*t23124;
  t23531 = 0.24*t23122*t23124;
  t23532 = t23530 + t23531;
  t23681 = 3.2*t23323*t23505;
  t23684 = 6.4*t23238*t23220;
  t23685 = 6.4*t23220*t23505;
  t23542 = t23502 + t23503 + t23506 + t23507;
  t23689 = 3.2*t23220*t23298;
  t23546 = t23545*t23132;
  t23549 = t23172*t23548;
  t23550 = t23546 + t23515 + t23516 + t23549;
  t23691 = 3.2*t23304*t23505;
  t23552 = -1.*t23128*t23545;
  t23553 = -1.*t23132*t23548;
  t23554 = t23552 + t23522 + t23553 + t23524;
  t23568 = 6.8*t23192*t9942;
  t23569 = 6.8*t5584*t9942;
  t23570 = 3.2*t19006*t23197;
  t23571 = 3.2*t23200*t23056;
  t23572 = 6.8*t23204*t23119;
  t23573 = 6.8*t23097*t23119;
  t23574 = 3.2*t23146*t23220;
  t23575 = 3.2*t23238*t23178;
  t23576 = t23568 + t23569 + t23570 + t23571 + t23572 + t23573 + t23574 + t23575;
  t23559 = 12.*t1955;
  t23560 = 12.*t4731;
  t23407 = -2.88*t4666;
  t23409 = 3.2*t23200*t23273;
  t23410 = 3.2*t23197*t23277;
  t23412 = 3.2*t23238*t23298;
  t23413 = 3.2*t23220*t23304;
  t23414 = t23407 + t23408 + t23409 + t23410 + t23411 + t23412 + t23413;
  t23337 = 3.2*t23315*t23200;
  t23338 = 3.2*t23311*t23197;
  t23339 = t23336 + t23337 + t23338;
  t23347 = 3.2*t23327*t23238;
  t23348 = 3.2*t23323*t23220;
  t23349 = t23346 + t23347 + t23348;
  t23257 = -6.8*t9942*t23256;
  t23274 = -3.2*t23056*t23273;
  t23278 = -3.2*t19006*t23277;
  t23284 = -6.8*t23119*t23283;
  t23299 = -3.2*t23178*t23298;
  t23305 = -3.2*t23146*t23304;
  t23306 = t23251 + t23257 + t23274 + t23278 + t23284 + t23299 + t23305;
  t23602 = 2.88*t4666;
  t23603 = -6.8*t23192*t23256;
  t23604 = -3.2*t23200*t23273;
  t23605 = -3.2*t23197*t23277;
  t23606 = -6.8*t23204*t23283;
  t23607 = -3.2*t23238*t23298;
  t23608 = -3.2*t23220*t23304;
  t23609 = t23602 + t23603 + t23604 + t23605 + t23606 + t23607 + t23608;
  t23642 = 3.2*t23382*t23273;
  t23643 = 3.2*t23375*t23277;
  t23645 = 3.2*t23401*t23298;
  t23646 = 3.2*t23394*t23304;
  t23647 = t23251 + t23641 + t23642 + t23643 + t23644 + t23645 + t23646;
  t23736 = 0.4*t23259*t23371;
  t23737 = -0.4*t5584*t12812;
  t23738 = t11318*t23371;
  t23739 = t5584*t12812;
  t23740 = t23738 + t23739;
  t23741 = 0.8*t23740;
  t23742 = t23736 + t23737 + t23741;
  t23743 = -1.*var4[2]*t23742;
  t23744 = 0.4*t23259*t23192;
  t23745 = -0.4*t23371*t12812;
  t23746 = t11318*t23192;
  t23747 = t23371*t12812;
  t23748 = t23746 + t23747;
  t23749 = 0.8*t23748;
  t23750 = t23744 + t23745 + t23749;
  t23751 = -1.*var4[0]*t23750;
  t23661 = 3.2*t23197*t23447;
  t23663 = 3.2*t23200*t23454;
  t23664 = t23641 + t23660 + t23661 + t23662 + t23663;
  t23448 = 3.2*t19006*t23447;
  t23455 = 3.2*t23056*t23454;
  t23456 = t23408 + t23439 + t23448 + t23449 + t23455;
  t23674 = 3.2*t23197*t23479;
  t23675 = 3.2*t23200*t23483;
  t23676 = t23660 + t23674 + t23662 + t23675;
  t23480 = 3.2*t19006*t23479;
  t23484 = 3.2*t23056*t23483;
  t23485 = t23439 + t23480 + t23449 + t23484;
  t23690 = 3.2*t23220*t23518;
  t23692 = 3.2*t23238*t23525;
  t23693 = t23644 + t23689 + t23690 + t23691 + t23692;
  t23519 = 3.2*t23146*t23518;
  t23526 = 3.2*t23178*t23525;
  t23527 = t23411 + t23510 + t23519 + t23520 + t23526;
  t23703 = 3.2*t23220*t23550;
  t23704 = 3.2*t23238*t23554;
  t23705 = t23689 + t23703 + t23691 + t23704;
  t23551 = 3.2*t23146*t23550;
  t23555 = 3.2*t23178*t23554;
  t23556 = t23510 + t23551 + t23520 + t23555;
  t23577 = 2.88*t646;
  t23578 = 6.8*t9942*t23256;
  t23579 = 3.2*t23056*t23273;
  t23580 = 3.2*t19006*t23277;
  t23581 = 6.8*t23119*t23283;
  t23582 = 3.2*t23178*t23298;
  t23583 = 3.2*t23146*t23304;
  t23584 = t23577 + t23578 + t23579 + t23580 + t23581 + t23582 + t23583;
  t23711 = Power(t23256,2);
  t23713 = Power(t23273,2);
  t23715 = Power(t23277,2);
  t23717 = Power(t23283,2);
  t23719 = Power(t23298,2);
  t23721 = Power(t23304,2);
  t23769 = 0.4*t23192*t12812;
  t23307 = -0.748*t9942;
  t23312 = -3.2*t23311*t19006;
  t23316 = -3.2*t23315*t23056;
  t23317 = t23307 + t23312 + t23316;
  t23610 = -0.748*t23192;
  t23611 = -3.2*t23315*t23200;
  t23612 = -3.2*t23311*t23197;
  t23613 = t23610 + t23611 + t23612;
  t23724 = -0.748*t23256;
  t23725 = -3.2*t23315*t23273;
  t23726 = -3.2*t23311*t23277;
  t23727 = -0.67 + t23724 + t23725 + t23726;
  t23622 = 3.2*t23311*t23375;
  t23623 = 3.2*t23315*t23382;
  t23624 = t23621 + t23622 + t23623;
  t23653 = t23621 + t23651 + t23652;
  t23425 = t23336 + t23423 + t23424;
  t23756 = 3.2*t23311*t23447;
  t23757 = 3.2*t23315*t23454;
  t23758 = t23756 + t23757;
  t23768 = -0.4*t11318*t23371;
  t23770 = -1.*t23192*t12812;
  t23771 = t23738 + t23770;
  t23772 = 0.8*t23771;
  t23773 = t23768 + t23769 + t23772;
  t23774 = -1.*var4[2]*t23773;
  t23775 = -0.4*t11318*t23192;
  t23776 = 0.4*t9942*t12812;
  t23777 = -1.*t9942*t12812;
  t23778 = t23746 + t23777;
  t23779 = 0.8*t23778;
  t23780 = t23775 + t23776 + t23779;
  t23781 = -1.*var4[0]*t23780;
  t23667 = 3.2*t23465*t23200;
  t23668 = 3.2*t23461*t23197;
  t23669 = t23667 + t23651 + t23668 + t23652;
  t23462 = 3.2*t23461*t19006;
  t23466 = 3.2*t23465*t23056;
  t23467 = t23423 + t23462 + t23466 + t23424;
  t23782 = 3.2*t23465*t23273;
  t23783 = 3.2*t23461*t23277;
  t23784 = 3.2*t23311*t23479;
  t23785 = 3.2*t23315*t23483;
  t23786 = t23782 + t23783 + t23784 + t23785;
  t23585 = 0.748*t9942;
  t23586 = 3.2*t23311*t19006;
  t23587 = 3.2*t23315*t23056;
  t23588 = t23585 + t23586 + t23587;
  t23828 = 0.748*t23256;
  t23829 = 3.2*t23315*t23273;
  t23830 = 3.2*t23311*t23277;
  t23831 = 0.67 + t23828 + t23829 + t23830;
  t23850 = Power(t23315,2);
  t23852 = Power(t23311,2);
  t23840 = -0.4*t23259*t9942;
  t23841 = t11318*t9942;
  t23842 = t23192*t12812;
  t23843 = t23841 + t23842;
  t23844 = -0.8*t23843;
  t23845 = t23840 + t23769 + t23844;
  t23846 = -0.4*t23259*t23192;
  t23847 = 0.4*t23371*t12812;
  t23848 = -0.8*t23748;
  t23849 = t23846 + t23847 + t23848;
  t23318 = -0.768*t19006;
  t23614 = -0.768*t23197;
  t23728 = -0.768*t23277;
  t23729 = -0.2 + t23728;
  t23855 = -0.768*t23311;
  t23856 = -0.2 + t23855;
  t23882 = 0.768*t23364*t23434;
  t23883 = 0.768*t23352*t23421;
  t23589 = 0.768*t19006;
  t23709 = 0.768*t23197;
  t23832 = 0.768*t23277;
  t23833 = 0.2 + t23832;
  t23876 = 0.768*t23311;
  t23877 = 0.2 + t23876;
  t23887 = 0.4*t11318*t9942;
  t23319 = -0.748*t23119;
  t23324 = -3.2*t23323*t23146;
  t23328 = -3.2*t23327*t23178;
  t23329 = t23319 + t23324 + t23328;
  t23615 = -0.748*t23204;
  t23616 = -3.2*t23327*t23238;
  t23617 = -3.2*t23323*t23220;
  t23618 = t23615 + t23616 + t23617;
  t23730 = -0.748*t23283;
  t23731 = -3.2*t23327*t23298;
  t23732 = -3.2*t23323*t23304;
  t23733 = -0.67 + t23730 + t23731 + t23732;
  t23628 = 3.2*t23323*t23394;
  t23629 = 3.2*t23327*t23401;
  t23630 = t23627 + t23628 + t23629;
  t23682 = t23627 + t23680 + t23681;
  t23496 = t23346 + t23494 + t23495;
  t23796 = 3.2*t23323*t23518;
  t23797 = 3.2*t23327*t23525;
  t23798 = t23796 + t23797;
  t23696 = 3.2*t23536*t23238;
  t23697 = 3.2*t23532*t23220;
  t23698 = t23696 + t23680 + t23697 + t23681;
  t23533 = 3.2*t23532*t23146;
  t23537 = 3.2*t23536*t23178;
  t23538 = t23494 + t23533 + t23537 + t23495;
  t23808 = 3.2*t23536*t23298;
  t23809 = 3.2*t23532*t23304;
  t23810 = 3.2*t23323*t23550;
  t23811 = 3.2*t23327*t23554;
  t23812 = t23808 + t23809 + t23810 + t23811;
  t23590 = 0.748*t23119;
  t23591 = 3.2*t23323*t23146;
  t23592 = 3.2*t23327*t23178;
  t23593 = t23590 + t23591 + t23592;
  t23834 = 0.748*t23283;
  t23835 = 3.2*t23327*t23298;
  t23836 = 3.2*t23323*t23304;
  t23837 = 0.67 + t23834 + t23835 + t23836;
  t23908 = Power(t23327,2);
  t23910 = Power(t23323,2);
  t23330 = -0.768*t23146;
  t23619 = -0.768*t23220;
  t23734 = -0.768*t23304;
  t23735 = -0.2 + t23734;
  t23913 = -0.768*t23323;
  t23914 = -0.2 + t23913;
  t23940 = 0.768*t23364*t23505;
  t23941 = 0.768*t23352*t23492;
  t23594 = 0.768*t23146;
  t23710 = 0.768*t23220;
  t23838 = 0.768*t23304;
  t23839 = 0.2 + t23838;
  t23934 = 0.768*t23323;
  t23935 = 0.2 + t23934;
  p_output1[0]=t10914 - 3.2*t21222 - 3.2*t23057 - 6.8*t23100 + t23121 - 3.2*t23152 - 3.2*t23179 + t3362 + t4753 - 6.8*t5880;
  p_output1[1]=t23246;
  p_output1[2]=t23306;
  p_output1[3]=t23317;
  p_output1[4]=t23318;
  p_output1[5]=t23329;
  p_output1[6]=t23330;
  p_output1[7]=0.768*t23197*t23332 + t23335*t23339 + 0.768*t23220*t23342 + t23345*t23349 + t23352*(6.4*t19006*t23197 + 6.4*t23056*t23200 + 6.4*t23146*t23220 + 6.4*t23178*t23238 + t23353 + t23354 + t23357 + t23358) + t23364*t23403 + t23406*t23414;
  p_output1[8]=t23422 + t23335*t23425 + t23352*(t23353 + t23354 + t23427 + t23428) + t23364*t23437 + t23406*t23456;
  p_output1[9]=t23422 + t23352*(t23427 + t23428) + t23335*t23467 + t23364*t23471 + t23406*t23485;
  p_output1[10]=t23493 + t23345*t23496 + t23352*(t23357 + t23358 + t23498 + t23499) + t23364*t23508 + t23406*t23527;
  p_output1[11]=t23493 + t23352*(t23498 + t23499) + t23345*t23538 + t23364*t23542 + t23406*t23556;
  p_output1[12]=3.2*t21222 + 3.2*t23057 + 6.8*t23100 + 3.2*t23152 + 3.2*t23179 + t23368 + t23387 + t23559 + t23560 + 6.8*t5880;
  p_output1[13]=t23576;
  p_output1[14]=t23584;
  p_output1[15]=t23588;
  p_output1[16]=t23589;
  p_output1[17]=t23593;
  p_output1[18]=t23594;
  p_output1[19]=-1.;
  p_output1[20]=t23246;
  p_output1[21]=t10914 + t23121 - 6.8*t23365 - 3.2*t23377 - 3.2*t23379 - 6.8*t23384 - 3.2*t23396 - 3.2*t23398 + t3362 + t4753;
  p_output1[22]=t23609;
  p_output1[23]=t23613;
  p_output1[24]=t23614;
  p_output1[25]=t23618;
  p_output1[26]=t23619;
  p_output1[27]=0.768*t23332*t23375 + 0.768*t23342*t23394 + t23352*t23403 + t23335*t23624 + t23345*t23630 + t23364*(t23353 + t23357 + 6.4*t23197*t23375 + 6.4*t23200*t23382 + 6.4*t23220*t23394 + 6.4*t23238*t23401 + t23632 + t23635) + t23406*t23647;
  p_output1[28]=t23352*t23437 + t23650 + t23335*t23653 + t23364*(t23353 + t23632 + t23655 + t23656) + t23406*t23664;
  p_output1[29]=t23352*t23471 + t23650 + t23364*(t23655 + t23656) + t23335*t23669 + t23406*t23676;
  p_output1[30]=t23352*t23508 + t23679 + t23345*t23682 + t23364*(t23357 + t23635 + t23684 + t23685) + t23406*t23693;
  p_output1[31]=t23352*t23542 + t23679 + t23364*(t23684 + t23685) + t23345*t23698 + t23406*t23705;
  p_output1[32]=t23576;
  p_output1[33]=t23366 + t23368 + t23378 + t23380 + t23385 + t23387 + t23397 + t23399 + t23559 + t23560;
  p_output1[34]=t23414;
  p_output1[35]=t23339;
  p_output1[36]=t23709;
  p_output1[37]=t23349;
  p_output1[38]=t23710;
  p_output1[39]=-1.;
  p_output1[40]=t23306;
  p_output1[41]=t23609;
  p_output1[42]=-3.3612 - 6.8*t23711 - 3.2*t23713 - 3.2*t23715 - 6.8*t23717 - 3.2*t23719 - 3.2*t23721;
  p_output1[43]=t23727;
  p_output1[44]=t23729;
  p_output1[45]=t23733;
  p_output1[46]=t23735;
  p_output1[47]=t23352*t23414 + t23364*t23647 + t23743 + t23751;
  p_output1[48]=0.768*t23332*t23447 + t23406*(6.4*t23277*t23447 + 6.4*t23273*t23454) + t23352*t23456 + t23364*t23664 + t23743 + t23751 + t23335*t23758;
  p_output1[49]=0.768*t23332*t23479 + t23406*(6.4*t23277*t23479 + 6.4*t23273*t23483) + t23352*t23485 + t23364*t23676 + t23774 + t23781 + t23335*t23786;
  p_output1[50]=0.768*t23342*t23518 + t23406*(6.4*t23304*t23518 + 6.4*t23298*t23525) + t23352*t23527 + t23364*t23693 + t23345*t23798;
  p_output1[51]=0.768*t23342*t23550 + t23406*(6.4*t23304*t23550 + 6.4*t23298*t23554) + t23352*t23556 + t23364*t23705 + t23345*t23812;
  p_output1[52]=t23584;
  p_output1[53]=t23414;
  p_output1[54]=3.3612 + 6.8*t23711 + 3.2*t23713 + 3.2*t23715 + 6.8*t23717 + 3.2*t23719 + 3.2*t23721;
  p_output1[55]=t23831;
  p_output1[56]=t23833;
  p_output1[57]=t23837;
  p_output1[58]=t23839;
  p_output1[59]=t23845;
  p_output1[60]=t23849;
  p_output1[61]=t23317;
  p_output1[62]=t23613;
  p_output1[63]=t23727;
  p_output1[64]=-1.58228 - 3.2*t23850 - 3.2*t23852;
  p_output1[65]=t23856;
  p_output1[66]=t23339*t23352 + t23364*t23624 + t23743 + t23751;
  p_output1[67]=t23352*t23425 + t23364*t23653 + t23743 + t23751 + t23406*t23758;
  p_output1[68]=0.768*t23332*t23461 + t23335*(6.4*t23311*t23461 + 6.4*t23315*t23465) + t23352*t23467 + t23364*t23669 + t23774 + t23781 + t23406*t23786;
  p_output1[69]=t23588;
  p_output1[70]=t23339;
  p_output1[71]=t23831;
  p_output1[72]=1.58228 + 3.2*t23850 + 3.2*t23852;
  p_output1[73]=t23877;
  p_output1[74]=t23845;
  p_output1[75]=t23849;
  p_output1[76]=t23318;
  p_output1[77]=t23614;
  p_output1[78]=t23729;
  p_output1[79]=t23856;
  p_output1[80]=-1.2143199999999998;
  p_output1[81]=0.768*t23197*t23352 + 0.768*t23364*t23375 + t23774 + t23781;
  p_output1[82]=0.768*t23406*t23447 + t23774 + t23781 + t23882 + t23883;
  p_output1[83]=0.768*t23335*t23461 + 0.768*t23406*t23479 + t23882 + t23883 - 1.*(t23776 + 0.4*t11318*t5584 + 0.8*(t23777 - 1.*t11318*t5584))*var4[0] - 1.*(t23769 + t23887 + 0.8*(t23770 - 1.*t11318*t9942))*var4[2];
  p_output1[84]=t23589;
  p_output1[85]=t23709;
  p_output1[86]=t23833;
  p_output1[87]=t23877;
  p_output1[88]=1.2143199999999998;
  p_output1[89]=t23737 + t23887 - 0.8*(t23841 - 1.*t12812*t5584);
  p_output1[90]=0.4*t11318*t23192 - 0.8*t23778 - 0.4*t12812*t9942;
  p_output1[91]=t23329;
  p_output1[92]=t23618;
  p_output1[93]=t23733;
  p_output1[94]=-1.58228 - 3.2*t23908 - 3.2*t23910;
  p_output1[95]=t23914;
  p_output1[96]=t23349*t23352 + t23364*t23630;
  p_output1[97]=t23352*t23496 + t23364*t23682 + t23406*t23798;
  p_output1[98]=0.768*t23342*t23532 + t23345*(6.4*t23323*t23532 + 6.4*t23327*t23536) + t23352*t23538 + t23364*t23698 + t23406*t23812;
  p_output1[99]=t23593;
  p_output1[100]=t23349;
  p_output1[101]=t23837;
  p_output1[102]=1.58228 + 3.2*t23908 + 3.2*t23910;
  p_output1[103]=t23935;
  p_output1[104]=t23330;
  p_output1[105]=t23619;
  p_output1[106]=t23735;
  p_output1[107]=t23914;
  p_output1[108]=-1.2143199999999998;
  p_output1[109]=0.768*t23220*t23352 + 0.768*t23364*t23394;
  p_output1[110]=0.768*t23406*t23518 + t23940 + t23941;
  p_output1[111]=0.768*t23345*t23532 + 0.768*t23406*t23550 + t23940 + t23941;
  p_output1[112]=t23594;
  p_output1[113]=t23710;
  p_output1[114]=t23839;
  p_output1[115]=t23935;
  p_output1[116]=1.2143199999999998;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 117, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "J_dxDiscreteMapRightImpact.hh"

namespace RightImpact
{

void J_dxDiscreteMapRightImpact_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
