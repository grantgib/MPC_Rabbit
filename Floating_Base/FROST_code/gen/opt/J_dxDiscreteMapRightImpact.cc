/*
 * Automatically Generated from Mathematica.
 * Wed 25 Mar 2020 22:55:43 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t2212;
  double t171;
  double t4437;
  double t5381;
  double t9523;
  double t10211;
  double t10307;
  double t10310;
  double t10327;
  double t10435;
  double t10469;
  double t11864;
  double t12098;
  double t12235;
  double t12238;
  double t12241;
  double t7512;
  double t8118;
  double t8366;
  double t5365;
  double t6687;
  double t6831;
  double t10003;
  double t10229;
  double t10239;
  double t10285;
  double t10333;
  double t10334;
  double t10358;
  double t10380;
  double t10390;
  double t10395;
  double t10398;
  double t10402;
  double t11613;
  double t11703;
  double t11740;
  double t10461;
  double t10488;
  double t11316;
  double t11883;
  double t12103;
  double t12136;
  double t12155;
  double t12243;
  double t12247;
  double t12299;
  double t12320;
  double t12321;
  double t12325;
  double t12328;
  double t12331;
  double t14943;
  double t14945;
  double t14946;
  double t14947;
  double t14948;
  double t14949;
  double t14950;
  double t14951;
  double t14956;
  double t14974;
  double t14975;
  double t15068;
  double t15069;
  double t15070;
  double t15071;
  double t15072;
  double t15073;
  double t15074;
  double t15075;
  double t15077;
  double t15078;
  double t15079;
  double t12442;
  double t12523;
  double t12868;
  double t12347;
  double t12351;
  double t12360;
  double t15096;
  double t15097;
  double t15098;
  double t12938;
  double t12960;
  double t15091;
  double t15092;
  double t15093;
  double t15094;
  double t13078;
  double t13092;
  double t13129;
  double t12985;
  double t12999;
  double t13011;
  double t15108;
  double t15109;
  double t15112;
  double t13155;
  double t13175;
  double t15103;
  double t15104;
  double t15105;
  double t15106;
  double t8376;
  double t11763;
  double t13233;
  double t13234;
  double t14915;
  double t14917;
  double t14941;
  double t14952;
  double t14976;
  double t14977;
  double t14987;
  double t14991;
  double t15000;
  double t15011;
  double t15016;
  double t15060;
  double t15065;
  double t15066;
  double t15076;
  double t15080;
  double t15081;
  double t15085;
  double t15086;
  double t15087;
  double t15116;
  double t15117;
  double t15121;
  double t15122;
  double t15123;
  double t15204;
  double t15205;
  double t15206;
  double t15207;
  double t15208;
  double t15138;
  double t15139;
  double t15140;
  double t15141;
  double t15150;
  double t15151;
  double t15152;
  double t15153;
  double t15154;
  double t15155;
  double t15156;
  double t15157;
  double t15158;
  double t15159;
  double t15160;
  double t15192;
  double t15193;
  double t15195;
  double t15227;
  double t15228;
  double t15229;
  double t15209;
  double t15210;
  double t15211;
  double t15214;
  double t15215;
  double t15218;
  double t15219;
  double t15220;
  double t15221;
  double t15222;
  double t15223;
  double t15226;
  double t15231;
  double t15232;
  double t15236;
  double t15260;
  double t15261;
  double t15238;
  double t15263;
  double t15264;
  double t15240;
  double t15128;
  double t15129;
  double t15131;
  double t15132;
  double t15133;
  double t15275;
  double t15276;
  double t15277;
  double t15278;
  double t15279;
  double t15144;
  double t15145;
  double t15171;
  double t15172;
  double t15173;
  double t15174;
  double t15175;
  double t15176;
  double t15177;
  double t15178;
  double t15179;
  double t15198;
  double t15298;
  double t15299;
  double t15300;
  double t15280;
  double t15281;
  double t15282;
  double t15285;
  double t15286;
  double t15289;
  double t15290;
  double t15291;
  double t15292;
  double t15293;
  double t15294;
  double t15297;
  double t15302;
  double t15303;
  double t15307;
  double t15331;
  double t15332;
  double t15309;
  double t15334;
  double t15335;
  double t15311;
  double t219;
  double t2731;
  double t7327;
  double t10343;
  double t10409;
  double t11370;
  double t12274;
  double t12336;
  double t12362;
  double t12412;
  double t12934;
  double t12965;
  double t13062;
  double t13077;
  double t13154;
  double t13181;
  double t13214;
  double t460;
  double t4060;
  double t9404;
  double t15164;
  double t15166;
  double t11860;
  double t15183;
  double t15185;
  double t15161;
  double t15162;
  double t15168;
  double t15169;
  double t15180;
  double t15181;
  double t15187;
  double t15188;
  double t15163;
  double t15165;
  double t15167;
  double t15170;
  double t15182;
  double t15184;
  double t15186;
  double t15189;
  double t15190;
  double t13229;
  double t15408;
  double t15419;
  double t15224;
  double t15428;
  double t15230;
  double t15233;
  double t15234;
  double t15237;
  double t15239;
  double t15241;
  double t15437;
  double t15250;
  double t15251;
  double t15252;
  double t15438;
  double t15246;
  double t15247;
  double t15248;
  double t15439;
  double t15442;
  double t15443;
  double t15258;
  double t15447;
  double t15262;
  double t15265;
  double t15266;
  double t15449;
  double t15268;
  double t15269;
  double t15270;
  double t15414;
  double t15422;
  double t15295;
  double t15431;
  double t15301;
  double t15304;
  double t15305;
  double t15308;
  double t15310;
  double t15312;
  double t15466;
  double t15321;
  double t15322;
  double t15323;
  double t15467;
  double t15317;
  double t15318;
  double t15319;
  double t15468;
  double t15471;
  double t15472;
  double t15329;
  double t15476;
  double t15333;
  double t15336;
  double t15337;
  double t15478;
  double t15339;
  double t15340;
  double t15341;
  double t15355;
  double t15356;
  double t15357;
  double t15358;
  double t15359;
  double t15360;
  double t15361;
  double t15362;
  double t15363;
  double t15346;
  double t15347;
  double t15194;
  double t15196;
  double t15197;
  double t15199;
  double t15200;
  double t15201;
  double t15124;
  double t15125;
  double t15126;
  double t15134;
  double t15135;
  double t15136;
  double t14942;
  double t14986;
  double t15004;
  double t15067;
  double t15082;
  double t15088;
  double t15089;
  double t15389;
  double t15390;
  double t15391;
  double t15392;
  double t15393;
  double t15394;
  double t15395;
  double t15396;
  double t15429;
  double t15430;
  double t15432;
  double t15433;
  double t15434;
  double t15523;
  double t15524;
  double t15525;
  double t15526;
  double t15527;
  double t15528;
  double t15529;
  double t15530;
  double t15531;
  double t15532;
  double t15533;
  double t15534;
  double t15535;
  double t15536;
  double t15537;
  double t15538;
  double t15448;
  double t15450;
  double t15451;
  double t15235;
  double t15242;
  double t15243;
  double t15461;
  double t15462;
  double t15463;
  double t15267;
  double t15271;
  double t15272;
  double t15477;
  double t15479;
  double t15480;
  double t15306;
  double t15313;
  double t15314;
  double t15490;
  double t15491;
  double t15492;
  double t15338;
  double t15342;
  double t15343;
  double t15364;
  double t15365;
  double t15366;
  double t15367;
  double t15368;
  double t15369;
  double t15370;
  double t15371;
  double t15498;
  double t15500;
  double t15502;
  double t15504;
  double t15506;
  double t15508;
  double t15556;
  double t15090;
  double t15095;
  double t15099;
  double t15100;
  double t15397;
  double t15398;
  double t15399;
  double t15400;
  double t15511;
  double t15512;
  double t15513;
  double t15514;
  double t15409;
  double t15410;
  double t15411;
  double t15440;
  double t15212;
  double t15543;
  double t15544;
  double t15545;
  double t15555;
  double t15557;
  double t15558;
  double t15559;
  double t15560;
  double t15561;
  double t15562;
  double t15563;
  double t15564;
  double t15565;
  double t15566;
  double t15567;
  double t15568;
  double t15454;
  double t15455;
  double t15456;
  double t15249;
  double t15253;
  double t15254;
  double t15569;
  double t15570;
  double t15571;
  double t15572;
  double t15573;
  double t15372;
  double t15373;
  double t15374;
  double t15375;
  double t15615;
  double t15616;
  double t15617;
  double t15618;
  double t15637;
  double t15639;
  double t15627;
  double t15628;
  double t15629;
  double t15630;
  double t15631;
  double t15632;
  double t15633;
  double t15634;
  double t15635;
  double t15636;
  double t15101;
  double t15401;
  double t15515;
  double t15516;
  double t15642;
  double t15643;
  double t15669;
  double t15670;
  double t15376;
  double t15496;
  double t15619;
  double t15620;
  double t15663;
  double t15664;
  double t15674;
  double t15102;
  double t15107;
  double t15113;
  double t15114;
  double t15402;
  double t15403;
  double t15404;
  double t15405;
  double t15517;
  double t15518;
  double t15519;
  double t15520;
  double t15415;
  double t15416;
  double t15417;
  double t15469;
  double t15283;
  double t15583;
  double t15584;
  double t15585;
  double t15483;
  double t15484;
  double t15485;
  double t15320;
  double t15324;
  double t15325;
  double t15595;
  double t15596;
  double t15597;
  double t15598;
  double t15599;
  double t15377;
  double t15378;
  double t15379;
  double t15380;
  double t15621;
  double t15622;
  double t15623;
  double t15624;
  double t15695;
  double t15697;
  double t15115;
  double t15406;
  double t15521;
  double t15522;
  double t15700;
  double t15701;
  double t15727;
  double t15728;
  double t15381;
  double t15497;
  double t15625;
  double t15626;
  double t15721;
  double t15722;
  t2212 = Sin(var2[2]);
  t171 = Cos(var2[2]);
  t4437 = Cos(var2[3]);
  t5381 = Sin(var2[3]);
  t9523 = Cos(var2[4]);
  t10211 = Sin(var2[4]);
  t10307 = t4437*t9523;
  t10310 = -1.*t5381*t10211;
  t10327 = t10307 + t10310;
  t10435 = Cos(var2[5]);
  t10469 = Sin(var2[5]);
  t11864 = Cos(var2[6]);
  t12098 = Sin(var2[6]);
  t12235 = t10435*t11864;
  t12238 = -1.*t10469*t12098;
  t12241 = t12235 + t12238;
  t7512 = t171*t4437;
  t8118 = -1.*t2212*t5381;
  t8366 = t7512 + t8118;
  t5365 = t4437*t2212;
  t6687 = t171*t5381;
  t6831 = t5365 + t6687;
  t10003 = -1.*t9523*t5381;
  t10229 = -1.*t4437*t10211;
  t10239 = t10003 + t10229;
  t10285 = t2212*t10239;
  t10333 = t171*t10327;
  t10334 = t10285 + t10333;
  t10358 = t9523*t5381;
  t10380 = t4437*t10211;
  t10390 = t10358 + t10380;
  t10395 = t171*t10390;
  t10398 = t2212*t10327;
  t10402 = t10395 + t10398;
  t11613 = t171*t10435;
  t11703 = -1.*t2212*t10469;
  t11740 = t11613 + t11703;
  t10461 = t10435*t2212;
  t10488 = t171*t10469;
  t11316 = t10461 + t10488;
  t11883 = -1.*t11864*t10469;
  t12103 = -1.*t10435*t12098;
  t12136 = t11883 + t12103;
  t12155 = t2212*t12136;
  t12243 = t171*t12241;
  t12247 = t12155 + t12243;
  t12299 = t11864*t10469;
  t12320 = t10435*t12098;
  t12321 = t12299 + t12320;
  t12325 = t171*t12321;
  t12328 = t2212*t12241;
  t12331 = t12325 + t12328;
  t14943 = -1.*t9523;
  t14945 = 1. + t14943;
  t14946 = 0.4*t14945;
  t14947 = 0.64*t9523;
  t14948 = t14946 + t14947;
  t14949 = t14948*t5381;
  t14950 = 0.24*t4437*t10211;
  t14951 = t14949 + t14950;
  t14956 = t4437*t14948;
  t14974 = -0.24*t5381*t10211;
  t14975 = t14956 + t14974;
  t15068 = -1.*t11864;
  t15069 = 1. + t15068;
  t15070 = 0.4*t15069;
  t15071 = 0.64*t11864;
  t15072 = t15070 + t15071;
  t15073 = t15072*t10469;
  t15074 = 0.24*t10435*t12098;
  t15075 = t15073 + t15074;
  t15077 = t10435*t15072;
  t15078 = -0.24*t10469*t12098;
  t15079 = t15077 + t15078;
  t12442 = t171*t10239;
  t12523 = -1.*t2212*t10327;
  t12868 = t12442 + t12523;
  t12347 = -1.*t4437*t2212;
  t12351 = -1.*t171*t5381;
  t12360 = t12347 + t12351;
  t15096 = t14948*t10211;
  t15097 = -0.24*t9523*t10211;
  t15098 = t15096 + t15097;
  t12938 = -1.*t2212*t10390;
  t12960 = t12938 + t10333;
  t15091 = t14948*t9523;
  t15092 = Power(t10211,2);
  t15093 = 0.24*t15092;
  t15094 = t15091 + t15093;
  t13078 = t171*t12136;
  t13092 = -1.*t2212*t12241;
  t13129 = t13078 + t13092;
  t12985 = -1.*t10435*t2212;
  t12999 = -1.*t171*t10469;
  t13011 = t12985 + t12999;
  t15108 = t15072*t12098;
  t15109 = -0.24*t11864*t12098;
  t15112 = t15108 + t15109;
  t13155 = -1.*t2212*t12321;
  t13175 = t13155 + t12243;
  t15103 = t15072*t11864;
  t15104 = Power(t12098,2);
  t15105 = 0.24*t15104;
  t15106 = t15103 + t15105;
  t8376 = Power(t8366,2);
  t11763 = Power(t11740,2);
  t13233 = Power(t4437,2);
  t13234 = 0.11*t13233;
  t14915 = Power(t5381,2);
  t14917 = 0.11*t14915;
  t14941 = t13234 + t14917;
  t14952 = -1.*t14951*t10327;
  t14976 = -1.*t10239*t14975;
  t14977 = t14952 + t14976;
  t14987 = t14951*t10390;
  t14991 = t10327*t14975;
  t15000 = t14987 + t14991;
  t15011 = Power(t10435,2);
  t15016 = 0.11*t15011;
  t15060 = Power(t10469,2);
  t15065 = 0.11*t15060;
  t15066 = t15016 + t15065;
  t15076 = -1.*t15075*t12241;
  t15080 = -1.*t12136*t15079;
  t15081 = t15076 + t15080;
  t15085 = t15075*t12321;
  t15086 = t12241*t15079;
  t15087 = t15085 + t15086;
  t15116 = -1.*var1[4];
  t15117 = var3[4] + t15116;
  t15121 = -1.*var1[3];
  t15122 = var3[3] + t15121;
  t15123 = 0.748*t12360;
  t15204 = -1.*t4437*t9523;
  t15205 = t5381*t10211;
  t15206 = t15204 + t15205;
  t15207 = t2212*t15206;
  t15208 = t12442 + t15207;
  t15138 = -1.*var1[0];
  t15139 = var3[0] + t15138;
  t15140 = 13.6*t12360*t8366;
  t15141 = 13.6*t6831*t8366;
  t15150 = -1.*var1[1];
  t15151 = var3[1] + t15150;
  t15152 = Power(t12360,2);
  t15153 = 6.8*t15152;
  t15154 = 6.8*t12360*t6831;
  t15155 = 6.8*t8376;
  t15156 = -1.*t171*t4437;
  t15157 = t2212*t5381;
  t15158 = t15156 + t15157;
  t15159 = 6.8*t8366*t15158;
  t15160 = -1.*t2212*t10239;
  t15192 = -1.*var1[2];
  t15193 = var3[2] + t15192;
  t15195 = 6.8*t12360*t14941;
  t15227 = -1.*t14948*t5381;
  t15228 = -0.24*t4437*t10211;
  t15229 = t15227 + t15228;
  t15209 = 0.768*t15117*t15208;
  t15210 = 3.2*t15098*t10334;
  t15211 = 3.2*t15094*t15208;
  t15214 = 6.4*t10334*t10402;
  t15215 = 6.4*t10334*t15208;
  t15218 = 3.2*t10334*t12960;
  t15219 = 3.2*t12868*t10402;
  t15220 = t171*t15206;
  t15221 = t15160 + t15220;
  t15222 = 3.2*t10334*t15221;
  t15223 = 3.2*t12868*t15208;
  t15226 = 3.2*t10334*t14977;
  t15231 = t14951*t10327;
  t15232 = t10239*t14975;
  t15236 = 3.2*t15000*t15208;
  t15260 = -0.24*t9523*t5381;
  t15261 = t15260 + t15228;
  t15238 = -1.*t10239*t14951;
  t15263 = 0.24*t4437*t9523;
  t15264 = t15263 + t14974;
  t15240 = -1.*t14975*t15206;
  t15128 = -1.*var1[6];
  t15129 = var3[6] + t15128;
  t15131 = -1.*var1[5];
  t15132 = var3[5] + t15131;
  t15133 = 0.748*t13011;
  t15275 = -1.*t10435*t11864;
  t15276 = t10469*t12098;
  t15277 = t15275 + t15276;
  t15278 = t2212*t15277;
  t15279 = t13078 + t15278;
  t15144 = 13.6*t13011*t11740;
  t15145 = 13.6*t11316*t11740;
  t15171 = Power(t13011,2);
  t15172 = 6.8*t15171;
  t15173 = 6.8*t13011*t11316;
  t15174 = 6.8*t11763;
  t15175 = -1.*t171*t10435;
  t15176 = t2212*t10469;
  t15177 = t15175 + t15176;
  t15178 = 6.8*t11740*t15177;
  t15179 = -1.*t2212*t12136;
  t15198 = 6.8*t13011*t15066;
  t15298 = -1.*t15072*t10469;
  t15299 = -0.24*t10435*t12098;
  t15300 = t15298 + t15299;
  t15280 = 0.768*t15129*t15279;
  t15281 = 3.2*t15112*t12247;
  t15282 = 3.2*t15106*t15279;
  t15285 = 6.4*t12247*t12331;
  t15286 = 6.4*t12247*t15279;
  t15289 = 3.2*t12247*t13175;
  t15290 = 3.2*t13129*t12331;
  t15291 = t171*t15277;
  t15292 = t15179 + t15291;
  t15293 = 3.2*t12247*t15292;
  t15294 = 3.2*t13129*t15279;
  t15297 = 3.2*t12247*t15081;
  t15302 = t15075*t12241;
  t15303 = t12136*t15079;
  t15307 = 3.2*t15087*t15279;
  t15331 = -0.24*t11864*t10469;
  t15332 = t15331 + t15299;
  t15309 = -1.*t12136*t15075;
  t15334 = 0.24*t10435*t11864;
  t15335 = t15334 + t15078;
  t15311 = -1.*t15079*t15277;
  t219 = Power(t171,2);
  t2731 = Power(t2212,2);
  t7327 = Power(t6831,2);
  t10343 = Power(t10334,2);
  t10409 = Power(t10402,2);
  t11370 = Power(t11316,2);
  t12274 = Power(t12247,2);
  t12336 = Power(t12331,2);
  t12362 = -6.8*t12360*t8366;
  t12412 = -6.8*t6831*t8366;
  t12934 = -3.2*t10334*t12868;
  t12965 = -3.2*t12960*t10402;
  t13062 = -6.8*t13011*t11740;
  t13077 = -6.8*t11316*t11740;
  t13154 = -3.2*t12247*t13129;
  t13181 = -3.2*t13175*t12331;
  t13214 = t12362 + t12412 + t12934 + t12965 + t13062 + t13077 + t13154 + t13181;
  t460 = -12.*t219;
  t4060 = -12.*t2731;
  t9404 = -6.8*t8376;
  t15164 = Power(t12960,2);
  t15166 = Power(t12868,2);
  t11860 = -6.8*t11763;
  t15183 = Power(t13175,2);
  t15185 = Power(t13129,2);
  t15161 = -1.*t171*t10327;
  t15162 = t15160 + t15161;
  t15168 = -1.*t171*t10390;
  t15169 = t15168 + t12523;
  t15180 = -1.*t171*t12241;
  t15181 = t15179 + t15180;
  t15187 = -1.*t171*t12321;
  t15188 = t15187 + t13092;
  t15163 = 3.2*t15162*t10334;
  t15165 = 3.2*t15164;
  t15167 = 3.2*t15166;
  t15170 = 3.2*t15169*t10402;
  t15182 = 3.2*t15181*t12247;
  t15184 = 3.2*t15183;
  t15186 = 3.2*t15185;
  t15189 = 3.2*t15188*t12331;
  t15190 = t15153 + t15154 + t15155 + t15159 + t15163 + t15165 + t15167 + t15170 + t15172 + t15173 + t15174 + t15178 + t15182 + t15184 + t15186 + t15189;
  t13229 = -2.88*t171;
  t15408 = 0.748*t15158;
  t15419 = 13.6*t12360*t15158;
  t15224 = t15153 + t15154 + t15155 + t15159 + t15218 + t15219 + t15222 + t15223;
  t15428 = 6.8*t15158*t14941;
  t15230 = t15229*t10327;
  t15233 = t10390*t14975;
  t15234 = t15230 + t15231 + t15232 + t15233;
  t15237 = -1.*t10239*t15229;
  t15239 = -1.*t10327*t14975;
  t15241 = t15237 + t15238 + t15239 + t15240;
  t15437 = 0.768*t15117*t15221;
  t15250 = Power(t9523,2);
  t15251 = -0.24*t15250;
  t15252 = t15091 + t15251;
  t15438 = 3.2*t15098*t12868;
  t15246 = -1.*t14948*t10211;
  t15247 = 0.24*t9523*t10211;
  t15248 = t15246 + t15247;
  t15439 = 3.2*t15094*t15221;
  t15442 = 6.4*t12960*t12868;
  t15443 = 6.4*t12868*t15221;
  t15258 = t15218 + t15219 + t15222 + t15223;
  t15447 = 3.2*t12868*t14977;
  t15262 = t15261*t10327;
  t15265 = t10390*t15264;
  t15266 = t15262 + t15231 + t15232 + t15265;
  t15449 = 3.2*t15000*t15221;
  t15268 = -1.*t10239*t15261;
  t15269 = -1.*t10327*t15264;
  t15270 = t15268 + t15238 + t15269 + t15240;
  t15414 = 0.748*t15177;
  t15422 = 13.6*t13011*t15177;
  t15295 = t15172 + t15173 + t15174 + t15178 + t15289 + t15290 + t15293 + t15294;
  t15431 = 6.8*t15177*t15066;
  t15301 = t15300*t12241;
  t15304 = t12321*t15079;
  t15305 = t15301 + t15302 + t15303 + t15304;
  t15308 = -1.*t12136*t15300;
  t15310 = -1.*t12241*t15079;
  t15312 = t15308 + t15309 + t15310 + t15311;
  t15466 = 0.768*t15129*t15292;
  t15321 = Power(t11864,2);
  t15322 = -0.24*t15321;
  t15323 = t15103 + t15322;
  t15467 = 3.2*t15112*t13129;
  t15317 = -1.*t15072*t12098;
  t15318 = 0.24*t11864*t12098;
  t15319 = t15317 + t15318;
  t15468 = 3.2*t15106*t15292;
  t15471 = 6.4*t13175*t13129;
  t15472 = 6.4*t13129*t15292;
  t15329 = t15289 + t15290 + t15293 + t15294;
  t15476 = 3.2*t13129*t15081;
  t15333 = t15332*t12241;
  t15336 = t12321*t15335;
  t15337 = t15333 + t15302 + t15303 + t15336;
  t15478 = 3.2*t15087*t15292;
  t15339 = -1.*t12136*t15332;
  t15340 = -1.*t12241*t15335;
  t15341 = t15339 + t15309 + t15340 + t15311;
  t15355 = 6.8*t12360*t8366;
  t15356 = 6.8*t6831*t8366;
  t15357 = 3.2*t10334*t12868;
  t15358 = 3.2*t12960*t10402;
  t15359 = 6.8*t13011*t11740;
  t15360 = 6.8*t11316*t11740;
  t15361 = 3.2*t12247*t13129;
  t15362 = 3.2*t13175*t12331;
  t15363 = t15355 + t15356 + t15357 + t15358 + t15359 + t15360 + t15361 + t15362;
  t15346 = 12.*t219;
  t15347 = 12.*t2731;
  t15194 = -2.88*t2212;
  t15196 = 3.2*t12960*t14977;
  t15197 = 3.2*t12868*t15000;
  t15199 = 3.2*t13175*t15081;
  t15200 = 3.2*t13129*t15087;
  t15201 = t15194 + t15195 + t15196 + t15197 + t15198 + t15199 + t15200;
  t15124 = 3.2*t15098*t12960;
  t15125 = 3.2*t15094*t12868;
  t15126 = t15123 + t15124 + t15125;
  t15134 = 3.2*t15112*t13175;
  t15135 = 3.2*t15106*t13129;
  t15136 = t15133 + t15134 + t15135;
  t14942 = -6.8*t8366*t14941;
  t14986 = -3.2*t10402*t14977;
  t15004 = -3.2*t10334*t15000;
  t15067 = -6.8*t11740*t15066;
  t15082 = -3.2*t12331*t15081;
  t15088 = -3.2*t12247*t15087;
  t15089 = t13229 + t14942 + t14986 + t15004 + t15067 + t15082 + t15088;
  t15389 = 2.88*t2212;
  t15390 = -6.8*t12360*t14941;
  t15391 = -3.2*t12960*t14977;
  t15392 = -3.2*t12868*t15000;
  t15393 = -6.8*t13011*t15066;
  t15394 = -3.2*t13175*t15081;
  t15395 = -3.2*t13129*t15087;
  t15396 = t15389 + t15390 + t15391 + t15392 + t15393 + t15394 + t15395;
  t15429 = 3.2*t15169*t14977;
  t15430 = 3.2*t15162*t15000;
  t15432 = 3.2*t15188*t15081;
  t15433 = 3.2*t15181*t15087;
  t15434 = t13229 + t15428 + t15429 + t15430 + t15431 + t15432 + t15433;
  t15523 = 0.4*t14945*t15158;
  t15524 = -0.4*t6831*t10211;
  t15525 = t9523*t15158;
  t15526 = t6831*t10211;
  t15527 = t15525 + t15526;
  t15528 = 0.8*t15527;
  t15529 = t15523 + t15524 + t15528;
  t15530 = -1.*var4[2]*t15529;
  t15531 = 0.4*t14945*t12360;
  t15532 = -0.4*t15158*t10211;
  t15533 = t9523*t12360;
  t15534 = t15158*t10211;
  t15535 = t15533 + t15534;
  t15536 = 0.8*t15535;
  t15537 = t15531 + t15532 + t15536;
  t15538 = -1.*var4[0]*t15537;
  t15448 = 3.2*t12868*t15234;
  t15450 = 3.2*t12960*t15241;
  t15451 = t15428 + t15447 + t15448 + t15449 + t15450;
  t15235 = 3.2*t10334*t15234;
  t15242 = 3.2*t10402*t15241;
  t15243 = t15195 + t15226 + t15235 + t15236 + t15242;
  t15461 = 3.2*t12868*t15266;
  t15462 = 3.2*t12960*t15270;
  t15463 = t15447 + t15461 + t15449 + t15462;
  t15267 = 3.2*t10334*t15266;
  t15271 = 3.2*t10402*t15270;
  t15272 = t15226 + t15267 + t15236 + t15271;
  t15477 = 3.2*t13129*t15305;
  t15479 = 3.2*t13175*t15312;
  t15480 = t15431 + t15476 + t15477 + t15478 + t15479;
  t15306 = 3.2*t12247*t15305;
  t15313 = 3.2*t12331*t15312;
  t15314 = t15198 + t15297 + t15306 + t15307 + t15313;
  t15490 = 3.2*t13129*t15337;
  t15491 = 3.2*t13175*t15341;
  t15492 = t15476 + t15490 + t15478 + t15491;
  t15338 = 3.2*t12247*t15337;
  t15342 = 3.2*t12331*t15341;
  t15343 = t15297 + t15338 + t15307 + t15342;
  t15364 = 2.88*t171;
  t15365 = 6.8*t8366*t14941;
  t15366 = 3.2*t10402*t14977;
  t15367 = 3.2*t10334*t15000;
  t15368 = 6.8*t11740*t15066;
  t15369 = 3.2*t12331*t15081;
  t15370 = 3.2*t12247*t15087;
  t15371 = t15364 + t15365 + t15366 + t15367 + t15368 + t15369 + t15370;
  t15498 = Power(t14941,2);
  t15500 = Power(t14977,2);
  t15502 = Power(t15000,2);
  t15504 = Power(t15066,2);
  t15506 = Power(t15081,2);
  t15508 = Power(t15087,2);
  t15556 = 0.4*t12360*t10211;
  t15090 = -0.748*t8366;
  t15095 = -3.2*t15094*t10334;
  t15099 = -3.2*t15098*t10402;
  t15100 = t15090 + t15095 + t15099;
  t15397 = -0.748*t12360;
  t15398 = -3.2*t15098*t12960;
  t15399 = -3.2*t15094*t12868;
  t15400 = t15397 + t15398 + t15399;
  t15511 = -0.748*t14941;
  t15512 = -3.2*t15098*t14977;
  t15513 = -3.2*t15094*t15000;
  t15514 = -0.67 + t15511 + t15512 + t15513;
  t15409 = 3.2*t15094*t15162;
  t15410 = 3.2*t15098*t15169;
  t15411 = t15408 + t15409 + t15410;
  t15440 = t15408 + t15438 + t15439;
  t15212 = t15123 + t15210 + t15211;
  t15543 = 3.2*t15094*t15234;
  t15544 = 3.2*t15098*t15241;
  t15545 = t15543 + t15544;
  t15555 = -0.4*t9523*t15158;
  t15557 = -1.*t12360*t10211;
  t15558 = t15525 + t15557;
  t15559 = 0.8*t15558;
  t15560 = t15555 + t15556 + t15559;
  t15561 = -1.*var4[2]*t15560;
  t15562 = -0.4*t9523*t12360;
  t15563 = 0.4*t8366*t10211;
  t15564 = -1.*t8366*t10211;
  t15565 = t15533 + t15564;
  t15566 = 0.8*t15565;
  t15567 = t15562 + t15563 + t15566;
  t15568 = -1.*var4[0]*t15567;
  t15454 = 3.2*t15252*t12960;
  t15455 = 3.2*t15248*t12868;
  t15456 = t15454 + t15438 + t15455 + t15439;
  t15249 = 3.2*t15248*t10334;
  t15253 = 3.2*t15252*t10402;
  t15254 = t15210 + t15249 + t15253 + t15211;
  t15569 = 3.2*t15252*t14977;
  t15570 = 3.2*t15248*t15000;
  t15571 = 3.2*t15094*t15266;
  t15572 = 3.2*t15098*t15270;
  t15573 = t15569 + t15570 + t15571 + t15572;
  t15372 = 0.748*t8366;
  t15373 = 3.2*t15094*t10334;
  t15374 = 3.2*t15098*t10402;
  t15375 = t15372 + t15373 + t15374;
  t15615 = 0.748*t14941;
  t15616 = 3.2*t15098*t14977;
  t15617 = 3.2*t15094*t15000;
  t15618 = 0.67 + t15615 + t15616 + t15617;
  t15637 = Power(t15098,2);
  t15639 = Power(t15094,2);
  t15627 = -0.4*t14945*t8366;
  t15628 = t9523*t8366;
  t15629 = t12360*t10211;
  t15630 = t15628 + t15629;
  t15631 = -0.8*t15630;
  t15632 = t15627 + t15556 + t15631;
  t15633 = -0.4*t14945*t12360;
  t15634 = 0.4*t15158*t10211;
  t15635 = -0.8*t15535;
  t15636 = t15633 + t15634 + t15635;
  t15101 = -0.768*t10334;
  t15401 = -0.768*t12868;
  t15515 = -0.768*t15000;
  t15516 = -0.2 + t15515;
  t15642 = -0.768*t15094;
  t15643 = -0.2 + t15642;
  t15669 = 0.768*t15151*t15221;
  t15670 = 0.768*t15139*t15208;
  t15376 = 0.768*t10334;
  t15496 = 0.768*t12868;
  t15619 = 0.768*t15000;
  t15620 = 0.2 + t15619;
  t15663 = 0.768*t15094;
  t15664 = 0.2 + t15663;
  t15674 = 0.4*t9523*t8366;
  t15102 = -0.748*t11740;
  t15107 = -3.2*t15106*t12247;
  t15113 = -3.2*t15112*t12331;
  t15114 = t15102 + t15107 + t15113;
  t15402 = -0.748*t13011;
  t15403 = -3.2*t15112*t13175;
  t15404 = -3.2*t15106*t13129;
  t15405 = t15402 + t15403 + t15404;
  t15517 = -0.748*t15066;
  t15518 = -3.2*t15112*t15081;
  t15519 = -3.2*t15106*t15087;
  t15520 = -0.67 + t15517 + t15518 + t15519;
  t15415 = 3.2*t15106*t15181;
  t15416 = 3.2*t15112*t15188;
  t15417 = t15414 + t15415 + t15416;
  t15469 = t15414 + t15467 + t15468;
  t15283 = t15133 + t15281 + t15282;
  t15583 = 3.2*t15106*t15305;
  t15584 = 3.2*t15112*t15312;
  t15585 = t15583 + t15584;
  t15483 = 3.2*t15323*t13175;
  t15484 = 3.2*t15319*t13129;
  t15485 = t15483 + t15467 + t15484 + t15468;
  t15320 = 3.2*t15319*t12247;
  t15324 = 3.2*t15323*t12331;
  t15325 = t15281 + t15320 + t15324 + t15282;
  t15595 = 3.2*t15323*t15081;
  t15596 = 3.2*t15319*t15087;
  t15597 = 3.2*t15106*t15337;
  t15598 = 3.2*t15112*t15341;
  t15599 = t15595 + t15596 + t15597 + t15598;
  t15377 = 0.748*t11740;
  t15378 = 3.2*t15106*t12247;
  t15379 = 3.2*t15112*t12331;
  t15380 = t15377 + t15378 + t15379;
  t15621 = 0.748*t15066;
  t15622 = 3.2*t15112*t15081;
  t15623 = 3.2*t15106*t15087;
  t15624 = 0.67 + t15621 + t15622 + t15623;
  t15695 = Power(t15112,2);
  t15697 = Power(t15106,2);
  t15115 = -0.768*t12247;
  t15406 = -0.768*t13129;
  t15521 = -0.768*t15087;
  t15522 = -0.2 + t15521;
  t15700 = -0.768*t15106;
  t15701 = -0.2 + t15700;
  t15727 = 0.768*t15151*t15292;
  t15728 = 0.768*t15139*t15279;
  t15381 = 0.768*t12247;
  t15497 = 0.768*t13129;
  t15625 = 0.768*t15087;
  t15626 = 0.2 + t15625;
  t15721 = 0.768*t15106;
  t15722 = 0.2 + t15721;
  p_output1[0]=-3.2*t10343 - 3.2*t10409 - 6.8*t11370 + t11860 - 3.2*t12274 - 3.2*t12336 + t4060 + t460 - 6.8*t7327 + t9404;
  p_output1[1]=t13214;
  p_output1[2]=t15089;
  p_output1[3]=t15100;
  p_output1[4]=t15101;
  p_output1[5]=t15114;
  p_output1[6]=t15115;
  p_output1[7]=0.768*t12868*t15117 + t15122*t15126 + 0.768*t13129*t15129 + t15132*t15136 + t15139*(6.4*t10334*t12868 + 6.4*t10402*t12960 + 6.4*t12247*t13129 + 6.4*t12331*t13175 + t15140 + t15141 + t15144 + t15145) + t15151*t15190 + t15193*t15201;
  p_output1[8]=t15209 + t15122*t15212 + t15139*(t15140 + t15141 + t15214 + t15215) + t15151*t15224 + t15193*t15243;
  p_output1[9]=t15209 + t15139*(t15214 + t15215) + t15122*t15254 + t15151*t15258 + t15193*t15272;
  p_output1[10]=t15280 + t15132*t15283 + t15139*(t15144 + t15145 + t15285 + t15286) + t15151*t15295 + t15193*t15314;
  p_output1[11]=t15280 + t15139*(t15285 + t15286) + t15132*t15325 + t15151*t15329 + t15193*t15343;
  p_output1[12]=3.2*t10343 + 3.2*t10409 + 6.8*t11370 + 3.2*t12274 + 3.2*t12336 + t15155 + t15174 + t15346 + t15347 + 6.8*t7327;
  p_output1[13]=t15363;
  p_output1[14]=t15371;
  p_output1[15]=t15375;
  p_output1[16]=t15376;
  p_output1[17]=t15380;
  p_output1[18]=t15381;
  p_output1[19]=-1.;
  p_output1[20]=t13214;
  p_output1[21]=t11860 - 6.8*t15152 - 3.2*t15164 - 3.2*t15166 - 6.8*t15171 - 3.2*t15183 - 3.2*t15185 + t4060 + t460 + t9404;
  p_output1[22]=t15396;
  p_output1[23]=t15400;
  p_output1[24]=t15401;
  p_output1[25]=t15405;
  p_output1[26]=t15406;
  p_output1[27]=0.768*t15117*t15162 + 0.768*t15129*t15181 + t15139*t15190 + t15122*t15411 + t15132*t15417 + t15151*(t15140 + t15144 + 6.4*t12868*t15162 + 6.4*t12960*t15169 + 6.4*t13129*t15181 + 6.4*t13175*t15188 + t15419 + t15422) + t15193*t15434;
  p_output1[28]=t15139*t15224 + t15437 + t15122*t15440 + t15151*(t15140 + t15419 + t15442 + t15443) + t15193*t15451;
  p_output1[29]=t15139*t15258 + t15437 + t15151*(t15442 + t15443) + t15122*t15456 + t15193*t15463;
  p_output1[30]=t15139*t15295 + t15466 + t15132*t15469 + t15151*(t15144 + t15422 + t15471 + t15472) + t15193*t15480;
  p_output1[31]=t15139*t15329 + t15466 + t15151*(t15471 + t15472) + t15132*t15485 + t15193*t15492;
  p_output1[32]=t15363;
  p_output1[33]=t15153 + t15155 + t15165 + t15167 + t15172 + t15174 + t15184 + t15186 + t15346 + t15347;
  p_output1[34]=t15201;
  p_output1[35]=t15126;
  p_output1[36]=t15496;
  p_output1[37]=t15136;
  p_output1[38]=t15497;
  p_output1[39]=-1.;
  p_output1[40]=t15089;
  p_output1[41]=t15396;
  p_output1[42]=-3.3612 - 6.8*t15498 - 3.2*t15500 - 3.2*t15502 - 6.8*t15504 - 3.2*t15506 - 3.2*t15508;
  p_output1[43]=t15514;
  p_output1[44]=t15516;
  p_output1[45]=t15520;
  p_output1[46]=t15522;
  p_output1[47]=t15139*t15201 + t15151*t15434 + t15530 + t15538;
  p_output1[48]=0.768*t15117*t15234 + t15193*(6.4*t15000*t15234 + 6.4*t14977*t15241) + t15139*t15243 + t15151*t15451 + t15530 + t15538 + t15122*t15545;
  p_output1[49]=0.768*t15117*t15266 + t15193*(6.4*t15000*t15266 + 6.4*t14977*t15270) + t15139*t15272 + t15151*t15463 + t15561 + t15568 + t15122*t15573;
  p_output1[50]=0.768*t15129*t15305 + t15193*(6.4*t15087*t15305 + 6.4*t15081*t15312) + t15139*t15314 + t15151*t15480 + t15132*t15585;
  p_output1[51]=0.768*t15129*t15337 + t15193*(6.4*t15087*t15337 + 6.4*t15081*t15341) + t15139*t15343 + t15151*t15492 + t15132*t15599;
  p_output1[52]=t15371;
  p_output1[53]=t15201;
  p_output1[54]=3.3612 + 6.8*t15498 + 3.2*t15500 + 3.2*t15502 + 6.8*t15504 + 3.2*t15506 + 3.2*t15508;
  p_output1[55]=t15618;
  p_output1[56]=t15620;
  p_output1[57]=t15624;
  p_output1[58]=t15626;
  p_output1[59]=t15632;
  p_output1[60]=t15636;
  p_output1[61]=t15100;
  p_output1[62]=t15400;
  p_output1[63]=t15514;
  p_output1[64]=-1.58228 - 3.2*t15637 - 3.2*t15639;
  p_output1[65]=t15643;
  p_output1[66]=t15126*t15139 + t15151*t15411 + t15530 + t15538;
  p_output1[67]=t15139*t15212 + t15151*t15440 + t15530 + t15538 + t15193*t15545;
  p_output1[68]=0.768*t15117*t15248 + t15122*(6.4*t15094*t15248 + 6.4*t15098*t15252) + t15139*t15254 + t15151*t15456 + t15561 + t15568 + t15193*t15573;
  p_output1[69]=t15375;
  p_output1[70]=t15126;
  p_output1[71]=t15618;
  p_output1[72]=1.58228 + 3.2*t15637 + 3.2*t15639;
  p_output1[73]=t15664;
  p_output1[74]=t15632;
  p_output1[75]=t15636;
  p_output1[76]=t15101;
  p_output1[77]=t15401;
  p_output1[78]=t15516;
  p_output1[79]=t15643;
  p_output1[80]=-1.2143199999999998;
  p_output1[81]=0.768*t12868*t15139 + 0.768*t15151*t15162 + t15561 + t15568;
  p_output1[82]=0.768*t15193*t15234 + t15561 + t15568 + t15669 + t15670;
  p_output1[83]=0.768*t15122*t15248 + 0.768*t15193*t15266 + t15669 + t15670 - 1.*(t15563 + 0.4*t6831*t9523 + 0.8*(t15564 - 1.*t6831*t9523))*var4[0] - 1.*(t15556 + t15674 + 0.8*(t15557 - 1.*t8366*t9523))*var4[2];
  p_output1[84]=t15376;
  p_output1[85]=t15496;
  p_output1[86]=t15620;
  p_output1[87]=t15664;
  p_output1[88]=1.2143199999999998;
  p_output1[89]=t15524 + t15674 - 0.8*(t15628 - 1.*t10211*t6831);
  p_output1[90]=-0.8*t15565 - 0.4*t10211*t8366 + 0.4*t12360*t9523;
  p_output1[91]=t15114;
  p_output1[92]=t15405;
  p_output1[93]=t15520;
  p_output1[94]=-1.58228 - 3.2*t15695 - 3.2*t15697;
  p_output1[95]=t15701;
  p_output1[96]=t15136*t15139 + t15151*t15417;
  p_output1[97]=t15139*t15283 + t15151*t15469 + t15193*t15585;
  p_output1[98]=0.768*t15129*t15319 + t15132*(6.4*t15106*t15319 + 6.4*t15112*t15323) + t15139*t15325 + t15151*t15485 + t15193*t15599;
  p_output1[99]=t15380;
  p_output1[100]=t15136;
  p_output1[101]=t15624;
  p_output1[102]=1.58228 + 3.2*t15695 + 3.2*t15697;
  p_output1[103]=t15722;
  p_output1[104]=t15115;
  p_output1[105]=t15406;
  p_output1[106]=t15522;
  p_output1[107]=t15701;
  p_output1[108]=-1.2143199999999998;
  p_output1[109]=0.768*t13129*t15139 + 0.768*t15151*t15181;
  p_output1[110]=0.768*t15193*t15305 + t15727 + t15728;
  p_output1[111]=0.768*t15132*t15319 + 0.768*t15193*t15337 + t15727 + t15728;
  p_output1[112]=t15381;
  p_output1[113]=t15497;
  p_output1[114]=t15626;
  p_output1[115]=t15722;
  p_output1[116]=1.2143199999999998;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 117, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "J_dxDiscreteMapRightImpact.hh"

namespace RightImpact
{

void J_dxDiscreteMapRightImpact_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
