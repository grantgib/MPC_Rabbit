/*
 * Automatically Generated from Mathematica.
 * Tue 17 Mar 2020 21:37:17 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t11479;
  double t211;
  double t11565;
  double t11653;
  double t15861;
  double t15865;
  double t15883;
  double t15884;
  double t15887;
  double t15969;
  double t15981;
  double t16010;
  double t16014;
  double t16018;
  double t16028;
  double t16032;
  double t15837;
  double t15841;
  double t15844;
  double t11646;
  double t12018;
  double t12674;
  double t15864;
  double t15868;
  double t15869;
  double t15873;
  double t15889;
  double t15892;
  double t15906;
  double t15909;
  double t15910;
  double t15953;
  double t15954;
  double t15958;
  double t16005;
  double t16006;
  double t16007;
  double t15980;
  double t15984;
  double t15992;
  double t16013;
  double t16015;
  double t16016;
  double t16017;
  double t16038;
  double t16039;
  double t16058;
  double t16059;
  double t16063;
  double t16064;
  double t16065;
  double t16066;
  double t16146;
  double t16147;
  double t16148;
  double t16149;
  double t16150;
  double t16151;
  double t16152;
  double t16153;
  double t16157;
  double t16158;
  double t16159;
  double t16173;
  double t16174;
  double t16175;
  double t16176;
  double t16177;
  double t16178;
  double t16179;
  double t16180;
  double t16182;
  double t16183;
  double t16184;
  double t16083;
  double t16084;
  double t16085;
  double t16078;
  double t16079;
  double t16080;
  double t16213;
  double t16214;
  double t16215;
  double t16087;
  double t16088;
  double t16208;
  double t16209;
  double t16210;
  double t16211;
  double t16106;
  double t16113;
  double t16117;
  double t16090;
  double t16091;
  double t16092;
  double t16201;
  double t16202;
  double t16203;
  double t16129;
  double t16132;
  double t16196;
  double t16197;
  double t16198;
  double t16199;
  double t15854;
  double t16008;
  double t16140;
  double t16141;
  double t16142;
  double t16143;
  double t16144;
  double t16154;
  double t16160;
  double t16161;
  double t16163;
  double t16164;
  double t16165;
  double t16167;
  double t16168;
  double t16169;
  double t16170;
  double t16171;
  double t16181;
  double t16185;
  double t16186;
  double t16190;
  double t16191;
  double t16192;
  double t16219;
  double t16220;
  double t16222;
  double t16223;
  double t16224;
  double t16305;
  double t16306;
  double t16307;
  double t16308;
  double t16309;
  double t16239;
  double t16240;
  double t16241;
  double t16242;
  double t16251;
  double t16252;
  double t16253;
  double t16254;
  double t16255;
  double t16256;
  double t16257;
  double t16258;
  double t16259;
  double t16260;
  double t16261;
  double t16293;
  double t16294;
  double t16296;
  double t16328;
  double t16329;
  double t16330;
  double t16310;
  double t16311;
  double t16312;
  double t16315;
  double t16316;
  double t16319;
  double t16320;
  double t16321;
  double t16322;
  double t16323;
  double t16324;
  double t16327;
  double t16332;
  double t16333;
  double t16337;
  double t16361;
  double t16362;
  double t16339;
  double t16364;
  double t16365;
  double t16341;
  double t16229;
  double t16230;
  double t16232;
  double t16233;
  double t16234;
  double t16376;
  double t16377;
  double t16378;
  double t16379;
  double t16380;
  double t16245;
  double t16246;
  double t16272;
  double t16273;
  double t16274;
  double t16275;
  double t16276;
  double t16277;
  double t16278;
  double t16279;
  double t16280;
  double t16299;
  double t16399;
  double t16400;
  double t16401;
  double t16381;
  double t16382;
  double t16383;
  double t16386;
  double t16387;
  double t16390;
  double t16391;
  double t16392;
  double t16393;
  double t16394;
  double t16395;
  double t16398;
  double t16403;
  double t16404;
  double t16408;
  double t16432;
  double t16433;
  double t16410;
  double t16435;
  double t16436;
  double t16412;
  double t9819;
  double t11530;
  double t15826;
  double t15900;
  double t15965;
  double t15999;
  double t16048;
  double t16071;
  double t16081;
  double t16082;
  double t16086;
  double t16089;
  double t16101;
  double t16102;
  double t16124;
  double t16137;
  double t16138;
  double t10853;
  double t11559;
  double t15855;
  double t16265;
  double t16267;
  double t16009;
  double t16284;
  double t16286;
  double t16262;
  double t16263;
  double t16269;
  double t16270;
  double t16281;
  double t16282;
  double t16288;
  double t16289;
  double t16264;
  double t16266;
  double t16268;
  double t16271;
  double t16283;
  double t16285;
  double t16287;
  double t16290;
  double t16291;
  double t16139;
  double t16509;
  double t16520;
  double t16325;
  double t16529;
  double t16331;
  double t16334;
  double t16335;
  double t16338;
  double t16340;
  double t16342;
  double t16538;
  double t16351;
  double t16352;
  double t16353;
  double t16539;
  double t16347;
  double t16348;
  double t16349;
  double t16540;
  double t16543;
  double t16544;
  double t16359;
  double t16548;
  double t16363;
  double t16366;
  double t16367;
  double t16550;
  double t16369;
  double t16370;
  double t16371;
  double t16515;
  double t16523;
  double t16396;
  double t16532;
  double t16402;
  double t16405;
  double t16406;
  double t16409;
  double t16411;
  double t16413;
  double t16567;
  double t16422;
  double t16423;
  double t16424;
  double t16568;
  double t16418;
  double t16419;
  double t16420;
  double t16569;
  double t16572;
  double t16573;
  double t16430;
  double t16577;
  double t16434;
  double t16437;
  double t16438;
  double t16579;
  double t16440;
  double t16441;
  double t16442;
  double t16456;
  double t16457;
  double t16458;
  double t16459;
  double t16460;
  double t16461;
  double t16462;
  double t16463;
  double t16464;
  double t16447;
  double t16448;
  double t16295;
  double t16297;
  double t16298;
  double t16300;
  double t16301;
  double t16302;
  double t16225;
  double t16226;
  double t16227;
  double t16235;
  double t16236;
  double t16237;
  double t16145;
  double t16162;
  double t16166;
  double t16172;
  double t16187;
  double t16193;
  double t16194;
  double t16490;
  double t16491;
  double t16492;
  double t16493;
  double t16494;
  double t16495;
  double t16496;
  double t16497;
  double t16530;
  double t16531;
  double t16533;
  double t16534;
  double t16535;
  double t16624;
  double t16625;
  double t16626;
  double t16627;
  double t16628;
  double t16629;
  double t16630;
  double t16631;
  double t16632;
  double t16633;
  double t16634;
  double t16635;
  double t16636;
  double t16637;
  double t16638;
  double t16639;
  double t16549;
  double t16551;
  double t16552;
  double t16336;
  double t16343;
  double t16344;
  double t16562;
  double t16563;
  double t16564;
  double t16368;
  double t16372;
  double t16373;
  double t16578;
  double t16580;
  double t16581;
  double t16407;
  double t16414;
  double t16415;
  double t16591;
  double t16592;
  double t16593;
  double t16439;
  double t16443;
  double t16444;
  double t16465;
  double t16466;
  double t16467;
  double t16468;
  double t16469;
  double t16470;
  double t16471;
  double t16472;
  double t16599;
  double t16601;
  double t16603;
  double t16605;
  double t16607;
  double t16609;
  double t16657;
  double t16207;
  double t16212;
  double t16216;
  double t16217;
  double t16503;
  double t16504;
  double t16505;
  double t16506;
  double t16618;
  double t16619;
  double t16620;
  double t16621;
  double t16510;
  double t16511;
  double t16512;
  double t16541;
  double t16313;
  double t16644;
  double t16645;
  double t16646;
  double t16656;
  double t16658;
  double t16659;
  double t16660;
  double t16661;
  double t16662;
  double t16663;
  double t16664;
  double t16665;
  double t16666;
  double t16667;
  double t16668;
  double t16669;
  double t16555;
  double t16556;
  double t16557;
  double t16350;
  double t16354;
  double t16355;
  double t16670;
  double t16671;
  double t16672;
  double t16673;
  double t16674;
  double t16473;
  double t16474;
  double t16475;
  double t16476;
  double t16716;
  double t16717;
  double t16718;
  double t16719;
  double t16738;
  double t16740;
  double t16728;
  double t16729;
  double t16730;
  double t16731;
  double t16732;
  double t16733;
  double t16734;
  double t16735;
  double t16736;
  double t16737;
  double t16218;
  double t16507;
  double t16622;
  double t16623;
  double t16743;
  double t16744;
  double t16770;
  double t16771;
  double t16477;
  double t16597;
  double t16720;
  double t16721;
  double t16764;
  double t16765;
  double t16775;
  double t16195;
  double t16200;
  double t16204;
  double t16205;
  double t16498;
  double t16499;
  double t16500;
  double t16501;
  double t16612;
  double t16613;
  double t16614;
  double t16615;
  double t16516;
  double t16517;
  double t16518;
  double t16570;
  double t16384;
  double t16684;
  double t16685;
  double t16686;
  double t16584;
  double t16585;
  double t16586;
  double t16421;
  double t16425;
  double t16426;
  double t16696;
  double t16697;
  double t16698;
  double t16699;
  double t16700;
  double t16478;
  double t16479;
  double t16480;
  double t16481;
  double t16722;
  double t16723;
  double t16724;
  double t16725;
  double t16796;
  double t16798;
  double t16206;
  double t16502;
  double t16616;
  double t16617;
  double t16801;
  double t16802;
  double t16828;
  double t16829;
  double t16482;
  double t16598;
  double t16726;
  double t16727;
  double t16822;
  double t16823;
  t11479 = Sin(var2[2]);
  t211 = Cos(var2[2]);
  t11565 = Cos(var2[3]);
  t11653 = Sin(var2[3]);
  t15861 = Cos(var2[4]);
  t15865 = Sin(var2[4]);
  t15883 = t11565*t15861;
  t15884 = -1.*t11653*t15865;
  t15887 = t15883 + t15884;
  t15969 = Cos(var2[5]);
  t15981 = Sin(var2[5]);
  t16010 = Cos(var2[6]);
  t16014 = Sin(var2[6]);
  t16018 = t15969*t16010;
  t16028 = -1.*t15981*t16014;
  t16032 = t16018 + t16028;
  t15837 = t211*t11565;
  t15841 = -1.*t11479*t11653;
  t15844 = t15837 + t15841;
  t11646 = t11565*t11479;
  t12018 = t211*t11653;
  t12674 = t11646 + t12018;
  t15864 = -1.*t15861*t11653;
  t15868 = -1.*t11565*t15865;
  t15869 = t15864 + t15868;
  t15873 = t11479*t15869;
  t15889 = t211*t15887;
  t15892 = t15873 + t15889;
  t15906 = t15861*t11653;
  t15909 = t11565*t15865;
  t15910 = t15906 + t15909;
  t15953 = t211*t15910;
  t15954 = t11479*t15887;
  t15958 = t15953 + t15954;
  t16005 = t211*t15969;
  t16006 = -1.*t11479*t15981;
  t16007 = t16005 + t16006;
  t15980 = t15969*t11479;
  t15984 = t211*t15981;
  t15992 = t15980 + t15984;
  t16013 = -1.*t16010*t15981;
  t16015 = -1.*t15969*t16014;
  t16016 = t16013 + t16015;
  t16017 = t11479*t16016;
  t16038 = t211*t16032;
  t16039 = t16017 + t16038;
  t16058 = t16010*t15981;
  t16059 = t15969*t16014;
  t16063 = t16058 + t16059;
  t16064 = t211*t16063;
  t16065 = t11479*t16032;
  t16066 = t16064 + t16065;
  t16146 = -1.*t15861;
  t16147 = 1. + t16146;
  t16148 = 0.4*t16147;
  t16149 = 0.64*t15861;
  t16150 = t16148 + t16149;
  t16151 = t16150*t11653;
  t16152 = 0.24*t11565*t15865;
  t16153 = t16151 + t16152;
  t16157 = t11565*t16150;
  t16158 = -0.24*t11653*t15865;
  t16159 = t16157 + t16158;
  t16173 = -1.*t16010;
  t16174 = 1. + t16173;
  t16175 = 0.4*t16174;
  t16176 = 0.64*t16010;
  t16177 = t16175 + t16176;
  t16178 = t16177*t15981;
  t16179 = 0.24*t15969*t16014;
  t16180 = t16178 + t16179;
  t16182 = t15969*t16177;
  t16183 = -0.24*t15981*t16014;
  t16184 = t16182 + t16183;
  t16083 = t211*t15869;
  t16084 = -1.*t11479*t15887;
  t16085 = t16083 + t16084;
  t16078 = -1.*t11565*t11479;
  t16079 = -1.*t211*t11653;
  t16080 = t16078 + t16079;
  t16213 = t16150*t15865;
  t16214 = -0.24*t15861*t15865;
  t16215 = t16213 + t16214;
  t16087 = -1.*t11479*t15910;
  t16088 = t16087 + t15889;
  t16208 = t16150*t15861;
  t16209 = Power(t15865,2);
  t16210 = 0.24*t16209;
  t16211 = t16208 + t16210;
  t16106 = t211*t16016;
  t16113 = -1.*t11479*t16032;
  t16117 = t16106 + t16113;
  t16090 = -1.*t15969*t11479;
  t16091 = -1.*t211*t15981;
  t16092 = t16090 + t16091;
  t16201 = t16177*t16014;
  t16202 = -0.24*t16010*t16014;
  t16203 = t16201 + t16202;
  t16129 = -1.*t11479*t16063;
  t16132 = t16129 + t16038;
  t16196 = t16177*t16010;
  t16197 = Power(t16014,2);
  t16198 = 0.24*t16197;
  t16199 = t16196 + t16198;
  t15854 = Power(t15844,2);
  t16008 = Power(t16007,2);
  t16140 = Power(t11565,2);
  t16141 = 0.11*t16140;
  t16142 = Power(t11653,2);
  t16143 = 0.11*t16142;
  t16144 = t16141 + t16143;
  t16154 = -1.*t16153*t15887;
  t16160 = -1.*t15869*t16159;
  t16161 = t16154 + t16160;
  t16163 = t16153*t15910;
  t16164 = t15887*t16159;
  t16165 = t16163 + t16164;
  t16167 = Power(t15969,2);
  t16168 = 0.11*t16167;
  t16169 = Power(t15981,2);
  t16170 = 0.11*t16169;
  t16171 = t16168 + t16170;
  t16181 = -1.*t16180*t16032;
  t16185 = -1.*t16016*t16184;
  t16186 = t16181 + t16185;
  t16190 = t16180*t16063;
  t16191 = t16032*t16184;
  t16192 = t16190 + t16191;
  t16219 = -1.*var1[6];
  t16220 = var3[4] + t16219;
  t16222 = -1.*var1[5];
  t16223 = var3[3] + t16222;
  t16224 = 0.748*t16080;
  t16305 = -1.*t11565*t15861;
  t16306 = t11653*t15865;
  t16307 = t16305 + t16306;
  t16308 = t11479*t16307;
  t16309 = t16083 + t16308;
  t16239 = -1.*var1[0];
  t16240 = var3[0] + t16239;
  t16241 = 13.6*t16080*t15844;
  t16242 = 13.6*t12674*t15844;
  t16251 = -1.*var1[1];
  t16252 = var3[1] + t16251;
  t16253 = Power(t16080,2);
  t16254 = 6.8*t16253;
  t16255 = 6.8*t16080*t12674;
  t16256 = 6.8*t15854;
  t16257 = -1.*t211*t11565;
  t16258 = t11479*t11653;
  t16259 = t16257 + t16258;
  t16260 = 6.8*t15844*t16259;
  t16261 = -1.*t11479*t15869;
  t16293 = -1.*var1[2];
  t16294 = var3[2] + t16293;
  t16296 = 6.8*t16080*t16144;
  t16328 = -1.*t16150*t11653;
  t16329 = -0.24*t11565*t15865;
  t16330 = t16328 + t16329;
  t16310 = 0.768*t16220*t16309;
  t16311 = 3.2*t16215*t15892;
  t16312 = 3.2*t16211*t16309;
  t16315 = 6.4*t15892*t15958;
  t16316 = 6.4*t15892*t16309;
  t16319 = 3.2*t15892*t16088;
  t16320 = 3.2*t16085*t15958;
  t16321 = t211*t16307;
  t16322 = t16261 + t16321;
  t16323 = 3.2*t15892*t16322;
  t16324 = 3.2*t16085*t16309;
  t16327 = 3.2*t15892*t16161;
  t16332 = t16153*t15887;
  t16333 = t15869*t16159;
  t16337 = 3.2*t16165*t16309;
  t16361 = -0.24*t15861*t11653;
  t16362 = t16361 + t16329;
  t16339 = -1.*t15869*t16153;
  t16364 = 0.24*t11565*t15861;
  t16365 = t16364 + t16158;
  t16341 = -1.*t16159*t16307;
  t16229 = -1.*var1[4];
  t16230 = var3[6] + t16229;
  t16232 = -1.*var1[3];
  t16233 = var3[5] + t16232;
  t16234 = 0.748*t16092;
  t16376 = -1.*t15969*t16010;
  t16377 = t15981*t16014;
  t16378 = t16376 + t16377;
  t16379 = t11479*t16378;
  t16380 = t16106 + t16379;
  t16245 = 13.6*t16092*t16007;
  t16246 = 13.6*t15992*t16007;
  t16272 = Power(t16092,2);
  t16273 = 6.8*t16272;
  t16274 = 6.8*t16092*t15992;
  t16275 = 6.8*t16008;
  t16276 = -1.*t211*t15969;
  t16277 = t11479*t15981;
  t16278 = t16276 + t16277;
  t16279 = 6.8*t16007*t16278;
  t16280 = -1.*t11479*t16016;
  t16299 = 6.8*t16092*t16171;
  t16399 = -1.*t16177*t15981;
  t16400 = -0.24*t15969*t16014;
  t16401 = t16399 + t16400;
  t16381 = 0.768*t16230*t16380;
  t16382 = 3.2*t16203*t16039;
  t16383 = 3.2*t16199*t16380;
  t16386 = 6.4*t16039*t16066;
  t16387 = 6.4*t16039*t16380;
  t16390 = 3.2*t16039*t16132;
  t16391 = 3.2*t16117*t16066;
  t16392 = t211*t16378;
  t16393 = t16280 + t16392;
  t16394 = 3.2*t16039*t16393;
  t16395 = 3.2*t16117*t16380;
  t16398 = 3.2*t16039*t16186;
  t16403 = t16180*t16032;
  t16404 = t16016*t16184;
  t16408 = 3.2*t16192*t16380;
  t16432 = -0.24*t16010*t15981;
  t16433 = t16432 + t16400;
  t16410 = -1.*t16016*t16180;
  t16435 = 0.24*t15969*t16010;
  t16436 = t16435 + t16183;
  t16412 = -1.*t16184*t16378;
  t9819 = Power(t211,2);
  t11530 = Power(t11479,2);
  t15826 = Power(t12674,2);
  t15900 = Power(t15892,2);
  t15965 = Power(t15958,2);
  t15999 = Power(t15992,2);
  t16048 = Power(t16039,2);
  t16071 = Power(t16066,2);
  t16081 = -6.8*t16080*t15844;
  t16082 = -6.8*t12674*t15844;
  t16086 = -3.2*t15892*t16085;
  t16089 = -3.2*t16088*t15958;
  t16101 = -6.8*t16092*t16007;
  t16102 = -6.8*t15992*t16007;
  t16124 = -3.2*t16039*t16117;
  t16137 = -3.2*t16132*t16066;
  t16138 = t16081 + t16082 + t16086 + t16089 + t16101 + t16102 + t16124 + t16137;
  t10853 = -12.*t9819;
  t11559 = -12.*t11530;
  t15855 = -6.8*t15854;
  t16265 = Power(t16088,2);
  t16267 = Power(t16085,2);
  t16009 = -6.8*t16008;
  t16284 = Power(t16132,2);
  t16286 = Power(t16117,2);
  t16262 = -1.*t211*t15887;
  t16263 = t16261 + t16262;
  t16269 = -1.*t211*t15910;
  t16270 = t16269 + t16084;
  t16281 = -1.*t211*t16032;
  t16282 = t16280 + t16281;
  t16288 = -1.*t211*t16063;
  t16289 = t16288 + t16113;
  t16264 = 3.2*t16263*t15892;
  t16266 = 3.2*t16265;
  t16268 = 3.2*t16267;
  t16271 = 3.2*t16270*t15958;
  t16283 = 3.2*t16282*t16039;
  t16285 = 3.2*t16284;
  t16287 = 3.2*t16286;
  t16290 = 3.2*t16289*t16066;
  t16291 = t16254 + t16255 + t16256 + t16260 + t16264 + t16266 + t16268 + t16271 + t16273 + t16274 + t16275 + t16279 + t16283 + t16285 + t16287 + t16290;
  t16139 = -2.88*t211;
  t16509 = 0.748*t16259;
  t16520 = 13.6*t16080*t16259;
  t16325 = t16254 + t16255 + t16256 + t16260 + t16319 + t16320 + t16323 + t16324;
  t16529 = 6.8*t16259*t16144;
  t16331 = t16330*t15887;
  t16334 = t15910*t16159;
  t16335 = t16331 + t16332 + t16333 + t16334;
  t16338 = -1.*t15869*t16330;
  t16340 = -1.*t15887*t16159;
  t16342 = t16338 + t16339 + t16340 + t16341;
  t16538 = 0.768*t16220*t16322;
  t16351 = Power(t15861,2);
  t16352 = -0.24*t16351;
  t16353 = t16208 + t16352;
  t16539 = 3.2*t16215*t16085;
  t16347 = -1.*t16150*t15865;
  t16348 = 0.24*t15861*t15865;
  t16349 = t16347 + t16348;
  t16540 = 3.2*t16211*t16322;
  t16543 = 6.4*t16088*t16085;
  t16544 = 6.4*t16085*t16322;
  t16359 = t16319 + t16320 + t16323 + t16324;
  t16548 = 3.2*t16085*t16161;
  t16363 = t16362*t15887;
  t16366 = t15910*t16365;
  t16367 = t16363 + t16332 + t16333 + t16366;
  t16550 = 3.2*t16165*t16322;
  t16369 = -1.*t15869*t16362;
  t16370 = -1.*t15887*t16365;
  t16371 = t16369 + t16339 + t16370 + t16341;
  t16515 = 0.748*t16278;
  t16523 = 13.6*t16092*t16278;
  t16396 = t16273 + t16274 + t16275 + t16279 + t16390 + t16391 + t16394 + t16395;
  t16532 = 6.8*t16278*t16171;
  t16402 = t16401*t16032;
  t16405 = t16063*t16184;
  t16406 = t16402 + t16403 + t16404 + t16405;
  t16409 = -1.*t16016*t16401;
  t16411 = -1.*t16032*t16184;
  t16413 = t16409 + t16410 + t16411 + t16412;
  t16567 = 0.768*t16230*t16393;
  t16422 = Power(t16010,2);
  t16423 = -0.24*t16422;
  t16424 = t16196 + t16423;
  t16568 = 3.2*t16203*t16117;
  t16418 = -1.*t16177*t16014;
  t16419 = 0.24*t16010*t16014;
  t16420 = t16418 + t16419;
  t16569 = 3.2*t16199*t16393;
  t16572 = 6.4*t16132*t16117;
  t16573 = 6.4*t16117*t16393;
  t16430 = t16390 + t16391 + t16394 + t16395;
  t16577 = 3.2*t16117*t16186;
  t16434 = t16433*t16032;
  t16437 = t16063*t16436;
  t16438 = t16434 + t16403 + t16404 + t16437;
  t16579 = 3.2*t16192*t16393;
  t16440 = -1.*t16016*t16433;
  t16441 = -1.*t16032*t16436;
  t16442 = t16440 + t16410 + t16441 + t16412;
  t16456 = 6.8*t16080*t15844;
  t16457 = 6.8*t12674*t15844;
  t16458 = 3.2*t15892*t16085;
  t16459 = 3.2*t16088*t15958;
  t16460 = 6.8*t16092*t16007;
  t16461 = 6.8*t15992*t16007;
  t16462 = 3.2*t16039*t16117;
  t16463 = 3.2*t16132*t16066;
  t16464 = t16456 + t16457 + t16458 + t16459 + t16460 + t16461 + t16462 + t16463;
  t16447 = 12.*t9819;
  t16448 = 12.*t11530;
  t16295 = -2.88*t11479;
  t16297 = 3.2*t16088*t16161;
  t16298 = 3.2*t16085*t16165;
  t16300 = 3.2*t16132*t16186;
  t16301 = 3.2*t16117*t16192;
  t16302 = t16295 + t16296 + t16297 + t16298 + t16299 + t16300 + t16301;
  t16225 = 3.2*t16215*t16088;
  t16226 = 3.2*t16211*t16085;
  t16227 = t16224 + t16225 + t16226;
  t16235 = 3.2*t16203*t16132;
  t16236 = 3.2*t16199*t16117;
  t16237 = t16234 + t16235 + t16236;
  t16145 = -6.8*t15844*t16144;
  t16162 = -3.2*t15958*t16161;
  t16166 = -3.2*t15892*t16165;
  t16172 = -6.8*t16007*t16171;
  t16187 = -3.2*t16066*t16186;
  t16193 = -3.2*t16039*t16192;
  t16194 = t16139 + t16145 + t16162 + t16166 + t16172 + t16187 + t16193;
  t16490 = 2.88*t11479;
  t16491 = -6.8*t16080*t16144;
  t16492 = -3.2*t16088*t16161;
  t16493 = -3.2*t16085*t16165;
  t16494 = -6.8*t16092*t16171;
  t16495 = -3.2*t16132*t16186;
  t16496 = -3.2*t16117*t16192;
  t16497 = t16490 + t16491 + t16492 + t16493 + t16494 + t16495 + t16496;
  t16530 = 3.2*t16270*t16161;
  t16531 = 3.2*t16263*t16165;
  t16533 = 3.2*t16289*t16186;
  t16534 = 3.2*t16282*t16192;
  t16535 = t16139 + t16529 + t16530 + t16531 + t16532 + t16533 + t16534;
  t16624 = 0.4*t16147*t16259;
  t16625 = -0.4*t12674*t15865;
  t16626 = t15861*t16259;
  t16627 = t12674*t15865;
  t16628 = t16626 + t16627;
  t16629 = 0.8*t16628;
  t16630 = t16624 + t16625 + t16629;
  t16631 = -1.*var4[2]*t16630;
  t16632 = 0.4*t16147*t16080;
  t16633 = -0.4*t16259*t15865;
  t16634 = t15861*t16080;
  t16635 = t16259*t15865;
  t16636 = t16634 + t16635;
  t16637 = 0.8*t16636;
  t16638 = t16632 + t16633 + t16637;
  t16639 = -1.*var4[0]*t16638;
  t16549 = 3.2*t16085*t16335;
  t16551 = 3.2*t16088*t16342;
  t16552 = t16529 + t16548 + t16549 + t16550 + t16551;
  t16336 = 3.2*t15892*t16335;
  t16343 = 3.2*t15958*t16342;
  t16344 = t16296 + t16327 + t16336 + t16337 + t16343;
  t16562 = 3.2*t16085*t16367;
  t16563 = 3.2*t16088*t16371;
  t16564 = t16548 + t16562 + t16550 + t16563;
  t16368 = 3.2*t15892*t16367;
  t16372 = 3.2*t15958*t16371;
  t16373 = t16327 + t16368 + t16337 + t16372;
  t16578 = 3.2*t16117*t16406;
  t16580 = 3.2*t16132*t16413;
  t16581 = t16532 + t16577 + t16578 + t16579 + t16580;
  t16407 = 3.2*t16039*t16406;
  t16414 = 3.2*t16066*t16413;
  t16415 = t16299 + t16398 + t16407 + t16408 + t16414;
  t16591 = 3.2*t16117*t16438;
  t16592 = 3.2*t16132*t16442;
  t16593 = t16577 + t16591 + t16579 + t16592;
  t16439 = 3.2*t16039*t16438;
  t16443 = 3.2*t16066*t16442;
  t16444 = t16398 + t16439 + t16408 + t16443;
  t16465 = 2.88*t211;
  t16466 = 6.8*t15844*t16144;
  t16467 = 3.2*t15958*t16161;
  t16468 = 3.2*t15892*t16165;
  t16469 = 6.8*t16007*t16171;
  t16470 = 3.2*t16066*t16186;
  t16471 = 3.2*t16039*t16192;
  t16472 = t16465 + t16466 + t16467 + t16468 + t16469 + t16470 + t16471;
  t16599 = Power(t16144,2);
  t16601 = Power(t16161,2);
  t16603 = Power(t16165,2);
  t16605 = Power(t16171,2);
  t16607 = Power(t16186,2);
  t16609 = Power(t16192,2);
  t16657 = 0.4*t16080*t15865;
  t16207 = -0.748*t15844;
  t16212 = -3.2*t16211*t15892;
  t16216 = -3.2*t16215*t15958;
  t16217 = t16207 + t16212 + t16216;
  t16503 = -0.748*t16080;
  t16504 = -3.2*t16215*t16088;
  t16505 = -3.2*t16211*t16085;
  t16506 = t16503 + t16504 + t16505;
  t16618 = -0.748*t16144;
  t16619 = -3.2*t16215*t16161;
  t16620 = -3.2*t16211*t16165;
  t16621 = -0.67 + t16618 + t16619 + t16620;
  t16510 = 3.2*t16211*t16263;
  t16511 = 3.2*t16215*t16270;
  t16512 = t16509 + t16510 + t16511;
  t16541 = t16509 + t16539 + t16540;
  t16313 = t16224 + t16311 + t16312;
  t16644 = 3.2*t16211*t16335;
  t16645 = 3.2*t16215*t16342;
  t16646 = t16644 + t16645;
  t16656 = -0.4*t15861*t16259;
  t16658 = -1.*t16080*t15865;
  t16659 = t16626 + t16658;
  t16660 = 0.8*t16659;
  t16661 = t16656 + t16657 + t16660;
  t16662 = -1.*var4[2]*t16661;
  t16663 = -0.4*t15861*t16080;
  t16664 = 0.4*t15844*t15865;
  t16665 = -1.*t15844*t15865;
  t16666 = t16634 + t16665;
  t16667 = 0.8*t16666;
  t16668 = t16663 + t16664 + t16667;
  t16669 = -1.*var4[0]*t16668;
  t16555 = 3.2*t16353*t16088;
  t16556 = 3.2*t16349*t16085;
  t16557 = t16555 + t16539 + t16556 + t16540;
  t16350 = 3.2*t16349*t15892;
  t16354 = 3.2*t16353*t15958;
  t16355 = t16311 + t16350 + t16354 + t16312;
  t16670 = 3.2*t16353*t16161;
  t16671 = 3.2*t16349*t16165;
  t16672 = 3.2*t16211*t16367;
  t16673 = 3.2*t16215*t16371;
  t16674 = t16670 + t16671 + t16672 + t16673;
  t16473 = 0.748*t15844;
  t16474 = 3.2*t16211*t15892;
  t16475 = 3.2*t16215*t15958;
  t16476 = t16473 + t16474 + t16475;
  t16716 = 0.748*t16144;
  t16717 = 3.2*t16215*t16161;
  t16718 = 3.2*t16211*t16165;
  t16719 = 0.67 + t16716 + t16717 + t16718;
  t16738 = Power(t16215,2);
  t16740 = Power(t16211,2);
  t16728 = -0.4*t16147*t15844;
  t16729 = t15861*t15844;
  t16730 = t16080*t15865;
  t16731 = t16729 + t16730;
  t16732 = -0.8*t16731;
  t16733 = t16728 + t16657 + t16732;
  t16734 = -0.4*t16147*t16080;
  t16735 = 0.4*t16259*t15865;
  t16736 = -0.8*t16636;
  t16737 = t16734 + t16735 + t16736;
  t16218 = -0.768*t15892;
  t16507 = -0.768*t16085;
  t16622 = -0.768*t16165;
  t16623 = -0.2 + t16622;
  t16743 = -0.768*t16211;
  t16744 = -0.2 + t16743;
  t16770 = 0.768*t16252*t16322;
  t16771 = 0.768*t16240*t16309;
  t16477 = 0.768*t15892;
  t16597 = 0.768*t16085;
  t16720 = 0.768*t16165;
  t16721 = 0.2 + t16720;
  t16764 = 0.768*t16211;
  t16765 = 0.2 + t16764;
  t16775 = 0.4*t15861*t15844;
  t16195 = -0.748*t16007;
  t16200 = -3.2*t16199*t16039;
  t16204 = -3.2*t16203*t16066;
  t16205 = t16195 + t16200 + t16204;
  t16498 = -0.748*t16092;
  t16499 = -3.2*t16203*t16132;
  t16500 = -3.2*t16199*t16117;
  t16501 = t16498 + t16499 + t16500;
  t16612 = -0.748*t16171;
  t16613 = -3.2*t16203*t16186;
  t16614 = -3.2*t16199*t16192;
  t16615 = -0.67 + t16612 + t16613 + t16614;
  t16516 = 3.2*t16199*t16282;
  t16517 = 3.2*t16203*t16289;
  t16518 = t16515 + t16516 + t16517;
  t16570 = t16515 + t16568 + t16569;
  t16384 = t16234 + t16382 + t16383;
  t16684 = 3.2*t16199*t16406;
  t16685 = 3.2*t16203*t16413;
  t16686 = t16684 + t16685;
  t16584 = 3.2*t16424*t16132;
  t16585 = 3.2*t16420*t16117;
  t16586 = t16584 + t16568 + t16585 + t16569;
  t16421 = 3.2*t16420*t16039;
  t16425 = 3.2*t16424*t16066;
  t16426 = t16382 + t16421 + t16425 + t16383;
  t16696 = 3.2*t16424*t16186;
  t16697 = 3.2*t16420*t16192;
  t16698 = 3.2*t16199*t16438;
  t16699 = 3.2*t16203*t16442;
  t16700 = t16696 + t16697 + t16698 + t16699;
  t16478 = 0.748*t16007;
  t16479 = 3.2*t16199*t16039;
  t16480 = 3.2*t16203*t16066;
  t16481 = t16478 + t16479 + t16480;
  t16722 = 0.748*t16171;
  t16723 = 3.2*t16203*t16186;
  t16724 = 3.2*t16199*t16192;
  t16725 = 0.67 + t16722 + t16723 + t16724;
  t16796 = Power(t16203,2);
  t16798 = Power(t16199,2);
  t16206 = -0.768*t16039;
  t16502 = -0.768*t16117;
  t16616 = -0.768*t16192;
  t16617 = -0.2 + t16616;
  t16801 = -0.768*t16199;
  t16802 = -0.2 + t16801;
  t16828 = 0.768*t16252*t16393;
  t16829 = 0.768*t16240*t16380;
  t16482 = 0.768*t16039;
  t16598 = 0.768*t16117;
  t16726 = 0.768*t16192;
  t16727 = 0.2 + t16726;
  t16822 = 0.768*t16199;
  t16823 = 0.2 + t16822;
  p_output1[0]=t10853 + t11559 - 6.8*t15826 + t15855 - 3.2*t15900 - 3.2*t15965 - 6.8*t15999 + t16009 - 3.2*t16048 - 3.2*t16071;
  p_output1[1]=t16138;
  p_output1[2]=t16194;
  p_output1[3]=t16205;
  p_output1[4]=t16206;
  p_output1[5]=t16217;
  p_output1[6]=t16218;
  p_output1[7]=0.768*t16085*t16220 + t16223*t16227 + 0.768*t16117*t16230 + t16233*t16237 + t16240*(6.4*t15892*t16085 + 6.4*t15958*t16088 + 6.4*t16039*t16117 + 6.4*t16066*t16132 + t16241 + t16242 + t16245 + t16246) + t16252*t16291 + t16294*t16302;
  p_output1[8]=t16310 + t16223*t16313 + t16240*(t16241 + t16242 + t16315 + t16316) + t16252*t16325 + t16294*t16344;
  p_output1[9]=t16310 + t16240*(t16315 + t16316) + t16223*t16355 + t16252*t16359 + t16294*t16373;
  p_output1[10]=t16381 + t16233*t16384 + t16240*(t16245 + t16246 + t16386 + t16387) + t16252*t16396 + t16294*t16415;
  p_output1[11]=t16381 + t16240*(t16386 + t16387) + t16233*t16426 + t16252*t16430 + t16294*t16444;
  p_output1[12]=6.8*t15826 + 3.2*t15900 + 3.2*t15965 + 6.8*t15999 + 3.2*t16048 + 3.2*t16071 + t16256 + t16275 + t16447 + t16448;
  p_output1[13]=t16464;
  p_output1[14]=t16472;
  p_output1[15]=t16476;
  p_output1[16]=t16477;
  p_output1[17]=t16481;
  p_output1[18]=t16482;
  p_output1[19]=-1.;
  p_output1[20]=t16138;
  p_output1[21]=t10853 + t11559 + t15855 + t16009 - 6.8*t16253 - 3.2*t16265 - 3.2*t16267 - 6.8*t16272 - 3.2*t16284 - 3.2*t16286;
  p_output1[22]=t16497;
  p_output1[23]=t16501;
  p_output1[24]=t16502;
  p_output1[25]=t16506;
  p_output1[26]=t16507;
  p_output1[27]=0.768*t16220*t16263 + 0.768*t16230*t16282 + t16240*t16291 + t16223*t16512 + t16233*t16518 + t16252*(t16241 + t16245 + 6.4*t16085*t16263 + 6.4*t16088*t16270 + 6.4*t16117*t16282 + 6.4*t16132*t16289 + t16520 + t16523) + t16294*t16535;
  p_output1[28]=t16240*t16325 + t16538 + t16223*t16541 + t16252*(t16241 + t16520 + t16543 + t16544) + t16294*t16552;
  p_output1[29]=t16240*t16359 + t16538 + t16252*(t16543 + t16544) + t16223*t16557 + t16294*t16564;
  p_output1[30]=t16240*t16396 + t16567 + t16233*t16570 + t16252*(t16245 + t16523 + t16572 + t16573) + t16294*t16581;
  p_output1[31]=t16240*t16430 + t16567 + t16252*(t16572 + t16573) + t16233*t16586 + t16294*t16593;
  p_output1[32]=t16464;
  p_output1[33]=t16254 + t16256 + t16266 + t16268 + t16273 + t16275 + t16285 + t16287 + t16447 + t16448;
  p_output1[34]=t16302;
  p_output1[35]=t16227;
  p_output1[36]=t16597;
  p_output1[37]=t16237;
  p_output1[38]=t16598;
  p_output1[39]=-1.;
  p_output1[40]=t16194;
  p_output1[41]=t16497;
  p_output1[42]=-3.3612 - 6.8*t16599 - 3.2*t16601 - 3.2*t16603 - 6.8*t16605 - 3.2*t16607 - 3.2*t16609;
  p_output1[43]=t16615;
  p_output1[44]=t16617;
  p_output1[45]=t16621;
  p_output1[46]=t16623;
  p_output1[47]=t16240*t16302 + t16252*t16535 + t16631 + t16639;
  p_output1[48]=0.768*t16220*t16335 + t16294*(6.4*t16165*t16335 + 6.4*t16161*t16342) + t16240*t16344 + t16252*t16552 + t16631 + t16639 + t16223*t16646;
  p_output1[49]=0.768*t16220*t16367 + t16294*(6.4*t16165*t16367 + 6.4*t16161*t16371) + t16240*t16373 + t16252*t16564 + t16662 + t16669 + t16223*t16674;
  p_output1[50]=0.768*t16230*t16406 + t16294*(6.4*t16192*t16406 + 6.4*t16186*t16413) + t16240*t16415 + t16252*t16581 + t16233*t16686;
  p_output1[51]=0.768*t16230*t16438 + t16294*(6.4*t16192*t16438 + 6.4*t16186*t16442) + t16240*t16444 + t16252*t16593 + t16233*t16700;
  p_output1[52]=t16472;
  p_output1[53]=t16302;
  p_output1[54]=3.3612 + 6.8*t16599 + 3.2*t16601 + 3.2*t16603 + 6.8*t16605 + 3.2*t16607 + 3.2*t16609;
  p_output1[55]=t16719;
  p_output1[56]=t16721;
  p_output1[57]=t16725;
  p_output1[58]=t16727;
  p_output1[59]=t16733;
  p_output1[60]=t16737;
  p_output1[61]=t16217;
  p_output1[62]=t16506;
  p_output1[63]=t16621;
  p_output1[64]=-1.58228 - 3.2*t16738 - 3.2*t16740;
  p_output1[65]=t16744;
  p_output1[66]=t16227*t16240 + t16252*t16512 + t16631 + t16639;
  p_output1[67]=t16240*t16313 + t16252*t16541 + t16631 + t16639 + t16294*t16646;
  p_output1[68]=0.768*t16220*t16349 + t16223*(6.4*t16211*t16349 + 6.4*t16215*t16353) + t16240*t16355 + t16252*t16557 + t16662 + t16669 + t16294*t16674;
  p_output1[69]=t16476;
  p_output1[70]=t16227;
  p_output1[71]=t16719;
  p_output1[72]=1.58228 + 3.2*t16738 + 3.2*t16740;
  p_output1[73]=t16765;
  p_output1[74]=t16733;
  p_output1[75]=t16737;
  p_output1[76]=t16218;
  p_output1[77]=t16507;
  p_output1[78]=t16623;
  p_output1[79]=t16744;
  p_output1[80]=-1.2143199999999998;
  p_output1[81]=0.768*t16085*t16240 + 0.768*t16252*t16263 + t16662 + t16669;
  p_output1[82]=0.768*t16294*t16335 + t16662 + t16669 + t16770 + t16771;
  p_output1[83]=0.768*t16223*t16349 + 0.768*t16294*t16367 + t16770 + t16771 - 1.*(0.4*t12674*t15861 + t16664 + 0.8*(-1.*t12674*t15861 + t16665))*var4[0] - 1.*(t16657 + 0.8*(-1.*t15844*t15861 + t16658) + t16775)*var4[2];
  p_output1[84]=t16477;
  p_output1[85]=t16597;
  p_output1[86]=t16721;
  p_output1[87]=t16765;
  p_output1[88]=1.2143199999999998;
  p_output1[89]=t16625 - 0.8*(-1.*t12674*t15865 + t16729) + t16775;
  p_output1[90]=-0.4*t15844*t15865 + 0.4*t15861*t16080 - 0.8*t16666;
  p_output1[91]=t16205;
  p_output1[92]=t16501;
  p_output1[93]=t16615;
  p_output1[94]=-1.58228 - 3.2*t16796 - 3.2*t16798;
  p_output1[95]=t16802;
  p_output1[96]=t16237*t16240 + t16252*t16518;
  p_output1[97]=t16240*t16384 + t16252*t16570 + t16294*t16686;
  p_output1[98]=0.768*t16230*t16420 + t16233*(6.4*t16199*t16420 + 6.4*t16203*t16424) + t16240*t16426 + t16252*t16586 + t16294*t16700;
  p_output1[99]=t16481;
  p_output1[100]=t16237;
  p_output1[101]=t16725;
  p_output1[102]=1.58228 + 3.2*t16796 + 3.2*t16798;
  p_output1[103]=t16823;
  p_output1[104]=t16206;
  p_output1[105]=t16502;
  p_output1[106]=t16617;
  p_output1[107]=t16802;
  p_output1[108]=-1.2143199999999998;
  p_output1[109]=0.768*t16117*t16240 + 0.768*t16252*t16282;
  p_output1[110]=0.768*t16294*t16406 + t16828 + t16829;
  p_output1[111]=0.768*t16233*t16420 + 0.768*t16294*t16438 + t16828 + t16829;
  p_output1[112]=t16482;
  p_output1[113]=t16598;
  p_output1[114]=t16727;
  p_output1[115]=t16823;
  p_output1[116]=1.2143199999999998;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 117, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "J_dxDiscreteMapRightImpact.hh"

namespace RightImpact
{

void J_dxDiscreteMapRightImpact_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
