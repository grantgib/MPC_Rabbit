/*
 * Automatically Generated from Mathematica.
 * Tue 7 Apr 2020 01:54:05 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t1243;
  double t386;
  double t1587;
  double t1640;
  double t2392;
  double t2643;
  double t2912;
  double t2962;
  double t2991;
  double t3978;
  double t4709;
  double t5359;
  double t5363;
  double t5367;
  double t5368;
  double t5371;
  double t1935;
  double t2004;
  double t2074;
  double t1619;
  double t1689;
  double t1725;
  double t2497;
  double t2671;
  double t2673;
  double t2887;
  double t3032;
  double t3033;
  double t3056;
  double t3074;
  double t3075;
  double t3085;
  double t3219;
  double t3573;
  double t5304;
  double t5336;
  double t5337;
  double t4463;
  double t4901;
  double t4954;
  double t5360;
  double t5364;
  double t5365;
  double t5366;
  double t5372;
  double t5373;
  double t5376;
  double t5386;
  double t5390;
  double t5437;
  double t5438;
  double t5447;
  double t5540;
  double t5541;
  double t5542;
  double t5543;
  double t5544;
  double t5545;
  double t5546;
  double t5547;
  double t5549;
  double t5550;
  double t5551;
  double t5567;
  double t5568;
  double t5569;
  double t5570;
  double t5571;
  double t5572;
  double t5573;
  double t5574;
  double t5576;
  double t5577;
  double t5578;
  double t5471;
  double t5476;
  double t5477;
  double t5462;
  double t5463;
  double t5464;
  double t5607;
  double t5608;
  double t5609;
  double t5479;
  double t5480;
  double t5602;
  double t5603;
  double t5604;
  double t5605;
  double t5489;
  double t5490;
  double t5491;
  double t5482;
  double t5483;
  double t5484;
  double t5595;
  double t5596;
  double t5597;
  double t5493;
  double t5502;
  double t5588;
  double t5591;
  double t5592;
  double t5593;
  double t2305;
  double t5341;
  double t5518;
  double t5525;
  double t5530;
  double t5533;
  double t5538;
  double t5548;
  double t5552;
  double t5553;
  double t5555;
  double t5558;
  double t5559;
  double t5561;
  double t5562;
  double t5563;
  double t5564;
  double t5565;
  double t5575;
  double t5579;
  double t5580;
  double t5582;
  double t5583;
  double t5584;
  double t5613;
  double t5614;
  double t5616;
  double t5617;
  double t5618;
  double t5699;
  double t5700;
  double t5701;
  double t5702;
  double t5703;
  double t5633;
  double t5634;
  double t5635;
  double t5636;
  double t5645;
  double t5646;
  double t5647;
  double t5648;
  double t5649;
  double t5650;
  double t5651;
  double t5652;
  double t5653;
  double t5654;
  double t5655;
  double t5687;
  double t5688;
  double t5690;
  double t5722;
  double t5723;
  double t5724;
  double t5704;
  double t5705;
  double t5706;
  double t5709;
  double t5710;
  double t5713;
  double t5714;
  double t5715;
  double t5716;
  double t5717;
  double t5718;
  double t5721;
  double t5726;
  double t5727;
  double t5731;
  double t5755;
  double t5756;
  double t5733;
  double t5758;
  double t5759;
  double t5735;
  double t5623;
  double t5624;
  double t5626;
  double t5627;
  double t5628;
  double t5770;
  double t5771;
  double t5772;
  double t5773;
  double t5774;
  double t5639;
  double t5640;
  double t5666;
  double t5667;
  double t5668;
  double t5669;
  double t5670;
  double t5671;
  double t5672;
  double t5673;
  double t5674;
  double t5693;
  double t5793;
  double t5794;
  double t5795;
  double t5775;
  double t5776;
  double t5777;
  double t5780;
  double t5781;
  double t5784;
  double t5785;
  double t5786;
  double t5787;
  double t5788;
  double t5789;
  double t5792;
  double t5797;
  double t5798;
  double t5802;
  double t5826;
  double t5827;
  double t5804;
  double t5829;
  double t5830;
  double t5806;
  double t439;
  double t1456;
  double t1758;
  double t3036;
  double t3710;
  double t5298;
  double t5374;
  double t5451;
  double t5465;
  double t5470;
  double t5478;
  double t5481;
  double t5485;
  double t5488;
  double t5492;
  double t5503;
  double t5507;
  double t465;
  double t1551;
  double t2313;
  double t5659;
  double t5661;
  double t5352;
  double t5678;
  double t5680;
  double t5656;
  double t5657;
  double t5663;
  double t5664;
  double t5675;
  double t5676;
  double t5682;
  double t5683;
  double t5658;
  double t5660;
  double t5662;
  double t5665;
  double t5677;
  double t5679;
  double t5681;
  double t5684;
  double t5685;
  double t5514;
  double t5903;
  double t5914;
  double t5719;
  double t5923;
  double t5725;
  double t5728;
  double t5729;
  double t5732;
  double t5734;
  double t5736;
  double t5932;
  double t5745;
  double t5746;
  double t5747;
  double t5933;
  double t5741;
  double t5742;
  double t5743;
  double t5934;
  double t5937;
  double t5938;
  double t5753;
  double t5942;
  double t5757;
  double t5760;
  double t5761;
  double t5944;
  double t5763;
  double t5764;
  double t5765;
  double t5909;
  double t5917;
  double t5790;
  double t5926;
  double t5796;
  double t5799;
  double t5800;
  double t5803;
  double t5805;
  double t5807;
  double t5961;
  double t5816;
  double t5817;
  double t5818;
  double t5962;
  double t5812;
  double t5813;
  double t5814;
  double t5963;
  double t5966;
  double t5967;
  double t5824;
  double t5971;
  double t5828;
  double t5831;
  double t5832;
  double t5973;
  double t5834;
  double t5835;
  double t5836;
  double t5850;
  double t5851;
  double t5852;
  double t5853;
  double t5854;
  double t5855;
  double t5856;
  double t5857;
  double t5858;
  double t5841;
  double t5842;
  double t5689;
  double t5691;
  double t5692;
  double t5694;
  double t5695;
  double t5696;
  double t5619;
  double t5620;
  double t5621;
  double t5629;
  double t5630;
  double t5631;
  double t5539;
  double t5554;
  double t5560;
  double t5566;
  double t5581;
  double t5585;
  double t5586;
  double t5884;
  double t5885;
  double t5886;
  double t5887;
  double t5888;
  double t5889;
  double t5890;
  double t5891;
  double t5924;
  double t5925;
  double t5927;
  double t5928;
  double t5929;
  double t6018;
  double t6019;
  double t6020;
  double t6021;
  double t6022;
  double t6023;
  double t6024;
  double t6025;
  double t6026;
  double t6027;
  double t6028;
  double t6029;
  double t6030;
  double t6031;
  double t6032;
  double t6033;
  double t5943;
  double t5945;
  double t5946;
  double t5730;
  double t5737;
  double t5738;
  double t5956;
  double t5957;
  double t5958;
  double t5762;
  double t5766;
  double t5767;
  double t5972;
  double t5974;
  double t5975;
  double t5801;
  double t5808;
  double t5809;
  double t5985;
  double t5986;
  double t5987;
  double t5833;
  double t5837;
  double t5838;
  double t5859;
  double t5860;
  double t5861;
  double t5862;
  double t5863;
  double t5864;
  double t5865;
  double t5866;
  double t5993;
  double t5995;
  double t5997;
  double t5999;
  double t6001;
  double t6003;
  double t6051;
  double t5601;
  double t5606;
  double t5610;
  double t5611;
  double t5897;
  double t5898;
  double t5899;
  double t5900;
  double t6012;
  double t6013;
  double t6014;
  double t6015;
  double t5904;
  double t5905;
  double t5906;
  double t5935;
  double t5707;
  double t6038;
  double t6039;
  double t6040;
  double t6050;
  double t6052;
  double t6053;
  double t6054;
  double t6055;
  double t6056;
  double t6057;
  double t6058;
  double t6059;
  double t6060;
  double t6061;
  double t6062;
  double t6063;
  double t5949;
  double t5950;
  double t5951;
  double t5744;
  double t5748;
  double t5749;
  double t6064;
  double t6065;
  double t6066;
  double t6067;
  double t6068;
  double t5867;
  double t5868;
  double t5869;
  double t5870;
  double t6110;
  double t6111;
  double t6112;
  double t6113;
  double t6132;
  double t6134;
  double t6122;
  double t6123;
  double t6124;
  double t6125;
  double t6126;
  double t6127;
  double t6128;
  double t6129;
  double t6130;
  double t6131;
  double t5612;
  double t5901;
  double t6016;
  double t6017;
  double t6137;
  double t6138;
  double t6164;
  double t6165;
  double t5871;
  double t5991;
  double t6114;
  double t6115;
  double t6158;
  double t6159;
  double t6169;
  double t5587;
  double t5594;
  double t5598;
  double t5599;
  double t5892;
  double t5893;
  double t5894;
  double t5895;
  double t6006;
  double t6007;
  double t6008;
  double t6009;
  double t5910;
  double t5911;
  double t5912;
  double t5964;
  double t5778;
  double t6078;
  double t6079;
  double t6080;
  double t5978;
  double t5979;
  double t5980;
  double t5815;
  double t5819;
  double t5820;
  double t6090;
  double t6091;
  double t6092;
  double t6093;
  double t6094;
  double t5872;
  double t5873;
  double t5874;
  double t5875;
  double t6116;
  double t6117;
  double t6118;
  double t6119;
  double t6190;
  double t6192;
  double t5600;
  double t5896;
  double t6010;
  double t6011;
  double t6195;
  double t6196;
  double t6222;
  double t6223;
  double t5876;
  double t5992;
  double t6120;
  double t6121;
  double t6216;
  double t6217;
  t1243 = Sin(var2[2]);
  t386 = Cos(var2[2]);
  t1587 = Cos(var2[3]);
  t1640 = Sin(var2[3]);
  t2392 = Cos(var2[4]);
  t2643 = Sin(var2[4]);
  t2912 = t1587*t2392;
  t2962 = -1.*t1640*t2643;
  t2991 = t2912 + t2962;
  t3978 = Cos(var2[5]);
  t4709 = Sin(var2[5]);
  t5359 = Cos(var2[6]);
  t5363 = Sin(var2[6]);
  t5367 = t3978*t5359;
  t5368 = -1.*t4709*t5363;
  t5371 = t5367 + t5368;
  t1935 = t386*t1587;
  t2004 = -1.*t1243*t1640;
  t2074 = t1935 + t2004;
  t1619 = t1587*t1243;
  t1689 = t386*t1640;
  t1725 = t1619 + t1689;
  t2497 = -1.*t2392*t1640;
  t2671 = -1.*t1587*t2643;
  t2673 = t2497 + t2671;
  t2887 = t1243*t2673;
  t3032 = t386*t2991;
  t3033 = t2887 + t3032;
  t3056 = t2392*t1640;
  t3074 = t1587*t2643;
  t3075 = t3056 + t3074;
  t3085 = t386*t3075;
  t3219 = t1243*t2991;
  t3573 = t3085 + t3219;
  t5304 = t386*t3978;
  t5336 = -1.*t1243*t4709;
  t5337 = t5304 + t5336;
  t4463 = t3978*t1243;
  t4901 = t386*t4709;
  t4954 = t4463 + t4901;
  t5360 = -1.*t5359*t4709;
  t5364 = -1.*t3978*t5363;
  t5365 = t5360 + t5364;
  t5366 = t1243*t5365;
  t5372 = t386*t5371;
  t5373 = t5366 + t5372;
  t5376 = t5359*t4709;
  t5386 = t3978*t5363;
  t5390 = t5376 + t5386;
  t5437 = t386*t5390;
  t5438 = t1243*t5371;
  t5447 = t5437 + t5438;
  t5540 = -1.*t2392;
  t5541 = 1. + t5540;
  t5542 = 0.4*t5541;
  t5543 = 0.64*t2392;
  t5544 = t5542 + t5543;
  t5545 = t5544*t1640;
  t5546 = 0.24*t1587*t2643;
  t5547 = t5545 + t5546;
  t5549 = t1587*t5544;
  t5550 = -0.24*t1640*t2643;
  t5551 = t5549 + t5550;
  t5567 = -1.*t5359;
  t5568 = 1. + t5567;
  t5569 = 0.4*t5568;
  t5570 = 0.64*t5359;
  t5571 = t5569 + t5570;
  t5572 = t5571*t4709;
  t5573 = 0.24*t3978*t5363;
  t5574 = t5572 + t5573;
  t5576 = t3978*t5571;
  t5577 = -0.24*t4709*t5363;
  t5578 = t5576 + t5577;
  t5471 = t386*t2673;
  t5476 = -1.*t1243*t2991;
  t5477 = t5471 + t5476;
  t5462 = -1.*t1587*t1243;
  t5463 = -1.*t386*t1640;
  t5464 = t5462 + t5463;
  t5607 = t5544*t2643;
  t5608 = -0.24*t2392*t2643;
  t5609 = t5607 + t5608;
  t5479 = -1.*t1243*t3075;
  t5480 = t5479 + t3032;
  t5602 = t5544*t2392;
  t5603 = Power(t2643,2);
  t5604 = 0.24*t5603;
  t5605 = t5602 + t5604;
  t5489 = t386*t5365;
  t5490 = -1.*t1243*t5371;
  t5491 = t5489 + t5490;
  t5482 = -1.*t3978*t1243;
  t5483 = -1.*t386*t4709;
  t5484 = t5482 + t5483;
  t5595 = t5571*t5363;
  t5596 = -0.24*t5359*t5363;
  t5597 = t5595 + t5596;
  t5493 = -1.*t1243*t5390;
  t5502 = t5493 + t5372;
  t5588 = t5571*t5359;
  t5591 = Power(t5363,2);
  t5592 = 0.24*t5591;
  t5593 = t5588 + t5592;
  t2305 = Power(t2074,2);
  t5341 = Power(t5337,2);
  t5518 = Power(t1587,2);
  t5525 = 0.11*t5518;
  t5530 = Power(t1640,2);
  t5533 = 0.11*t5530;
  t5538 = t5525 + t5533;
  t5548 = -1.*t5547*t2991;
  t5552 = -1.*t2673*t5551;
  t5553 = t5548 + t5552;
  t5555 = t5547*t3075;
  t5558 = t2991*t5551;
  t5559 = t5555 + t5558;
  t5561 = Power(t3978,2);
  t5562 = 0.11*t5561;
  t5563 = Power(t4709,2);
  t5564 = 0.11*t5563;
  t5565 = t5562 + t5564;
  t5575 = -1.*t5574*t5371;
  t5579 = -1.*t5365*t5578;
  t5580 = t5575 + t5579;
  t5582 = t5574*t5390;
  t5583 = t5371*t5578;
  t5584 = t5582 + t5583;
  t5613 = -1.*var1[6];
  t5614 = var3[4] + t5613;
  t5616 = -1.*var1[5];
  t5617 = var3[3] + t5616;
  t5618 = 0.748*t5464;
  t5699 = -1.*t1587*t2392;
  t5700 = t1640*t2643;
  t5701 = t5699 + t5700;
  t5702 = t1243*t5701;
  t5703 = t5471 + t5702;
  t5633 = -1.*var1[0];
  t5634 = var3[0] + t5633;
  t5635 = 13.6*t5464*t2074;
  t5636 = 13.6*t1725*t2074;
  t5645 = -1.*var1[1];
  t5646 = var3[1] + t5645;
  t5647 = Power(t5464,2);
  t5648 = 6.8*t5647;
  t5649 = 6.8*t5464*t1725;
  t5650 = 6.8*t2305;
  t5651 = -1.*t386*t1587;
  t5652 = t1243*t1640;
  t5653 = t5651 + t5652;
  t5654 = 6.8*t2074*t5653;
  t5655 = -1.*t1243*t2673;
  t5687 = -1.*var1[2];
  t5688 = var3[2] + t5687;
  t5690 = 6.8*t5464*t5538;
  t5722 = -1.*t5544*t1640;
  t5723 = -0.24*t1587*t2643;
  t5724 = t5722 + t5723;
  t5704 = 0.768*t5614*t5703;
  t5705 = 3.2*t5609*t3033;
  t5706 = 3.2*t5605*t5703;
  t5709 = 6.4*t3033*t3573;
  t5710 = 6.4*t3033*t5703;
  t5713 = 3.2*t3033*t5480;
  t5714 = 3.2*t5477*t3573;
  t5715 = t386*t5701;
  t5716 = t5655 + t5715;
  t5717 = 3.2*t3033*t5716;
  t5718 = 3.2*t5477*t5703;
  t5721 = 3.2*t3033*t5553;
  t5726 = t5547*t2991;
  t5727 = t2673*t5551;
  t5731 = 3.2*t5559*t5703;
  t5755 = -0.24*t2392*t1640;
  t5756 = t5755 + t5723;
  t5733 = -1.*t2673*t5547;
  t5758 = 0.24*t1587*t2392;
  t5759 = t5758 + t5550;
  t5735 = -1.*t5551*t5701;
  t5623 = -1.*var1[4];
  t5624 = var3[6] + t5623;
  t5626 = -1.*var1[3];
  t5627 = var3[5] + t5626;
  t5628 = 0.748*t5484;
  t5770 = -1.*t3978*t5359;
  t5771 = t4709*t5363;
  t5772 = t5770 + t5771;
  t5773 = t1243*t5772;
  t5774 = t5489 + t5773;
  t5639 = 13.6*t5484*t5337;
  t5640 = 13.6*t4954*t5337;
  t5666 = Power(t5484,2);
  t5667 = 6.8*t5666;
  t5668 = 6.8*t5484*t4954;
  t5669 = 6.8*t5341;
  t5670 = -1.*t386*t3978;
  t5671 = t1243*t4709;
  t5672 = t5670 + t5671;
  t5673 = 6.8*t5337*t5672;
  t5674 = -1.*t1243*t5365;
  t5693 = 6.8*t5484*t5565;
  t5793 = -1.*t5571*t4709;
  t5794 = -0.24*t3978*t5363;
  t5795 = t5793 + t5794;
  t5775 = 0.768*t5624*t5774;
  t5776 = 3.2*t5597*t5373;
  t5777 = 3.2*t5593*t5774;
  t5780 = 6.4*t5373*t5447;
  t5781 = 6.4*t5373*t5774;
  t5784 = 3.2*t5373*t5502;
  t5785 = 3.2*t5491*t5447;
  t5786 = t386*t5772;
  t5787 = t5674 + t5786;
  t5788 = 3.2*t5373*t5787;
  t5789 = 3.2*t5491*t5774;
  t5792 = 3.2*t5373*t5580;
  t5797 = t5574*t5371;
  t5798 = t5365*t5578;
  t5802 = 3.2*t5584*t5774;
  t5826 = -0.24*t5359*t4709;
  t5827 = t5826 + t5794;
  t5804 = -1.*t5365*t5574;
  t5829 = 0.24*t3978*t5359;
  t5830 = t5829 + t5577;
  t5806 = -1.*t5578*t5772;
  t439 = Power(t386,2);
  t1456 = Power(t1243,2);
  t1758 = Power(t1725,2);
  t3036 = Power(t3033,2);
  t3710 = Power(t3573,2);
  t5298 = Power(t4954,2);
  t5374 = Power(t5373,2);
  t5451 = Power(t5447,2);
  t5465 = -6.8*t5464*t2074;
  t5470 = -6.8*t1725*t2074;
  t5478 = -3.2*t3033*t5477;
  t5481 = -3.2*t5480*t3573;
  t5485 = -6.8*t5484*t5337;
  t5488 = -6.8*t4954*t5337;
  t5492 = -3.2*t5373*t5491;
  t5503 = -3.2*t5502*t5447;
  t5507 = t5465 + t5470 + t5478 + t5481 + t5485 + t5488 + t5492 + t5503;
  t465 = -12.*t439;
  t1551 = -12.*t1456;
  t2313 = -6.8*t2305;
  t5659 = Power(t5480,2);
  t5661 = Power(t5477,2);
  t5352 = -6.8*t5341;
  t5678 = Power(t5502,2);
  t5680 = Power(t5491,2);
  t5656 = -1.*t386*t2991;
  t5657 = t5655 + t5656;
  t5663 = -1.*t386*t3075;
  t5664 = t5663 + t5476;
  t5675 = -1.*t386*t5371;
  t5676 = t5674 + t5675;
  t5682 = -1.*t386*t5390;
  t5683 = t5682 + t5490;
  t5658 = 3.2*t5657*t3033;
  t5660 = 3.2*t5659;
  t5662 = 3.2*t5661;
  t5665 = 3.2*t5664*t3573;
  t5677 = 3.2*t5676*t5373;
  t5679 = 3.2*t5678;
  t5681 = 3.2*t5680;
  t5684 = 3.2*t5683*t5447;
  t5685 = t5648 + t5649 + t5650 + t5654 + t5658 + t5660 + t5662 + t5665 + t5667 + t5668 + t5669 + t5673 + t5677 + t5679 + t5681 + t5684;
  t5514 = -2.88*t386;
  t5903 = 0.748*t5653;
  t5914 = 13.6*t5464*t5653;
  t5719 = t5648 + t5649 + t5650 + t5654 + t5713 + t5714 + t5717 + t5718;
  t5923 = 6.8*t5653*t5538;
  t5725 = t5724*t2991;
  t5728 = t3075*t5551;
  t5729 = t5725 + t5726 + t5727 + t5728;
  t5732 = -1.*t2673*t5724;
  t5734 = -1.*t2991*t5551;
  t5736 = t5732 + t5733 + t5734 + t5735;
  t5932 = 0.768*t5614*t5716;
  t5745 = Power(t2392,2);
  t5746 = -0.24*t5745;
  t5747 = t5602 + t5746;
  t5933 = 3.2*t5609*t5477;
  t5741 = -1.*t5544*t2643;
  t5742 = 0.24*t2392*t2643;
  t5743 = t5741 + t5742;
  t5934 = 3.2*t5605*t5716;
  t5937 = 6.4*t5480*t5477;
  t5938 = 6.4*t5477*t5716;
  t5753 = t5713 + t5714 + t5717 + t5718;
  t5942 = 3.2*t5477*t5553;
  t5757 = t5756*t2991;
  t5760 = t3075*t5759;
  t5761 = t5757 + t5726 + t5727 + t5760;
  t5944 = 3.2*t5559*t5716;
  t5763 = -1.*t2673*t5756;
  t5764 = -1.*t2991*t5759;
  t5765 = t5763 + t5733 + t5764 + t5735;
  t5909 = 0.748*t5672;
  t5917 = 13.6*t5484*t5672;
  t5790 = t5667 + t5668 + t5669 + t5673 + t5784 + t5785 + t5788 + t5789;
  t5926 = 6.8*t5672*t5565;
  t5796 = t5795*t5371;
  t5799 = t5390*t5578;
  t5800 = t5796 + t5797 + t5798 + t5799;
  t5803 = -1.*t5365*t5795;
  t5805 = -1.*t5371*t5578;
  t5807 = t5803 + t5804 + t5805 + t5806;
  t5961 = 0.768*t5624*t5787;
  t5816 = Power(t5359,2);
  t5817 = -0.24*t5816;
  t5818 = t5588 + t5817;
  t5962 = 3.2*t5597*t5491;
  t5812 = -1.*t5571*t5363;
  t5813 = 0.24*t5359*t5363;
  t5814 = t5812 + t5813;
  t5963 = 3.2*t5593*t5787;
  t5966 = 6.4*t5502*t5491;
  t5967 = 6.4*t5491*t5787;
  t5824 = t5784 + t5785 + t5788 + t5789;
  t5971 = 3.2*t5491*t5580;
  t5828 = t5827*t5371;
  t5831 = t5390*t5830;
  t5832 = t5828 + t5797 + t5798 + t5831;
  t5973 = 3.2*t5584*t5787;
  t5834 = -1.*t5365*t5827;
  t5835 = -1.*t5371*t5830;
  t5836 = t5834 + t5804 + t5835 + t5806;
  t5850 = 6.8*t5464*t2074;
  t5851 = 6.8*t1725*t2074;
  t5852 = 3.2*t3033*t5477;
  t5853 = 3.2*t5480*t3573;
  t5854 = 6.8*t5484*t5337;
  t5855 = 6.8*t4954*t5337;
  t5856 = 3.2*t5373*t5491;
  t5857 = 3.2*t5502*t5447;
  t5858 = t5850 + t5851 + t5852 + t5853 + t5854 + t5855 + t5856 + t5857;
  t5841 = 12.*t439;
  t5842 = 12.*t1456;
  t5689 = -2.88*t1243;
  t5691 = 3.2*t5480*t5553;
  t5692 = 3.2*t5477*t5559;
  t5694 = 3.2*t5502*t5580;
  t5695 = 3.2*t5491*t5584;
  t5696 = t5689 + t5690 + t5691 + t5692 + t5693 + t5694 + t5695;
  t5619 = 3.2*t5609*t5480;
  t5620 = 3.2*t5605*t5477;
  t5621 = t5618 + t5619 + t5620;
  t5629 = 3.2*t5597*t5502;
  t5630 = 3.2*t5593*t5491;
  t5631 = t5628 + t5629 + t5630;
  t5539 = -6.8*t2074*t5538;
  t5554 = -3.2*t3573*t5553;
  t5560 = -3.2*t3033*t5559;
  t5566 = -6.8*t5337*t5565;
  t5581 = -3.2*t5447*t5580;
  t5585 = -3.2*t5373*t5584;
  t5586 = t5514 + t5539 + t5554 + t5560 + t5566 + t5581 + t5585;
  t5884 = 2.88*t1243;
  t5885 = -6.8*t5464*t5538;
  t5886 = -3.2*t5480*t5553;
  t5887 = -3.2*t5477*t5559;
  t5888 = -6.8*t5484*t5565;
  t5889 = -3.2*t5502*t5580;
  t5890 = -3.2*t5491*t5584;
  t5891 = t5884 + t5885 + t5886 + t5887 + t5888 + t5889 + t5890;
  t5924 = 3.2*t5664*t5553;
  t5925 = 3.2*t5657*t5559;
  t5927 = 3.2*t5683*t5580;
  t5928 = 3.2*t5676*t5584;
  t5929 = t5514 + t5923 + t5924 + t5925 + t5926 + t5927 + t5928;
  t6018 = 0.4*t5541*t5653;
  t6019 = -0.4*t1725*t2643;
  t6020 = t2392*t5653;
  t6021 = t1725*t2643;
  t6022 = t6020 + t6021;
  t6023 = 0.8*t6022;
  t6024 = t6018 + t6019 + t6023;
  t6025 = -1.*var4[2]*t6024;
  t6026 = 0.4*t5541*t5464;
  t6027 = -0.4*t5653*t2643;
  t6028 = t2392*t5464;
  t6029 = t5653*t2643;
  t6030 = t6028 + t6029;
  t6031 = 0.8*t6030;
  t6032 = t6026 + t6027 + t6031;
  t6033 = -1.*var4[0]*t6032;
  t5943 = 3.2*t5477*t5729;
  t5945 = 3.2*t5480*t5736;
  t5946 = t5923 + t5942 + t5943 + t5944 + t5945;
  t5730 = 3.2*t3033*t5729;
  t5737 = 3.2*t3573*t5736;
  t5738 = t5690 + t5721 + t5730 + t5731 + t5737;
  t5956 = 3.2*t5477*t5761;
  t5957 = 3.2*t5480*t5765;
  t5958 = t5942 + t5956 + t5944 + t5957;
  t5762 = 3.2*t3033*t5761;
  t5766 = 3.2*t3573*t5765;
  t5767 = t5721 + t5762 + t5731 + t5766;
  t5972 = 3.2*t5491*t5800;
  t5974 = 3.2*t5502*t5807;
  t5975 = t5926 + t5971 + t5972 + t5973 + t5974;
  t5801 = 3.2*t5373*t5800;
  t5808 = 3.2*t5447*t5807;
  t5809 = t5693 + t5792 + t5801 + t5802 + t5808;
  t5985 = 3.2*t5491*t5832;
  t5986 = 3.2*t5502*t5836;
  t5987 = t5971 + t5985 + t5973 + t5986;
  t5833 = 3.2*t5373*t5832;
  t5837 = 3.2*t5447*t5836;
  t5838 = t5792 + t5833 + t5802 + t5837;
  t5859 = 2.88*t386;
  t5860 = 6.8*t2074*t5538;
  t5861 = 3.2*t3573*t5553;
  t5862 = 3.2*t3033*t5559;
  t5863 = 6.8*t5337*t5565;
  t5864 = 3.2*t5447*t5580;
  t5865 = 3.2*t5373*t5584;
  t5866 = t5859 + t5860 + t5861 + t5862 + t5863 + t5864 + t5865;
  t5993 = Power(t5538,2);
  t5995 = Power(t5553,2);
  t5997 = Power(t5559,2);
  t5999 = Power(t5565,2);
  t6001 = Power(t5580,2);
  t6003 = Power(t5584,2);
  t6051 = 0.4*t5464*t2643;
  t5601 = -0.748*t2074;
  t5606 = -3.2*t5605*t3033;
  t5610 = -3.2*t5609*t3573;
  t5611 = t5601 + t5606 + t5610;
  t5897 = -0.748*t5464;
  t5898 = -3.2*t5609*t5480;
  t5899 = -3.2*t5605*t5477;
  t5900 = t5897 + t5898 + t5899;
  t6012 = -0.748*t5538;
  t6013 = -3.2*t5609*t5553;
  t6014 = -3.2*t5605*t5559;
  t6015 = -0.67 + t6012 + t6013 + t6014;
  t5904 = 3.2*t5605*t5657;
  t5905 = 3.2*t5609*t5664;
  t5906 = t5903 + t5904 + t5905;
  t5935 = t5903 + t5933 + t5934;
  t5707 = t5618 + t5705 + t5706;
  t6038 = 3.2*t5605*t5729;
  t6039 = 3.2*t5609*t5736;
  t6040 = t6038 + t6039;
  t6050 = -0.4*t2392*t5653;
  t6052 = -1.*t5464*t2643;
  t6053 = t6020 + t6052;
  t6054 = 0.8*t6053;
  t6055 = t6050 + t6051 + t6054;
  t6056 = -1.*var4[2]*t6055;
  t6057 = -0.4*t2392*t5464;
  t6058 = 0.4*t2074*t2643;
  t6059 = -1.*t2074*t2643;
  t6060 = t6028 + t6059;
  t6061 = 0.8*t6060;
  t6062 = t6057 + t6058 + t6061;
  t6063 = -1.*var4[0]*t6062;
  t5949 = 3.2*t5747*t5480;
  t5950 = 3.2*t5743*t5477;
  t5951 = t5949 + t5933 + t5950 + t5934;
  t5744 = 3.2*t5743*t3033;
  t5748 = 3.2*t5747*t3573;
  t5749 = t5705 + t5744 + t5748 + t5706;
  t6064 = 3.2*t5747*t5553;
  t6065 = 3.2*t5743*t5559;
  t6066 = 3.2*t5605*t5761;
  t6067 = 3.2*t5609*t5765;
  t6068 = t6064 + t6065 + t6066 + t6067;
  t5867 = 0.748*t2074;
  t5868 = 3.2*t5605*t3033;
  t5869 = 3.2*t5609*t3573;
  t5870 = t5867 + t5868 + t5869;
  t6110 = 0.748*t5538;
  t6111 = 3.2*t5609*t5553;
  t6112 = 3.2*t5605*t5559;
  t6113 = 0.67 + t6110 + t6111 + t6112;
  t6132 = Power(t5609,2);
  t6134 = Power(t5605,2);
  t6122 = -0.4*t5541*t2074;
  t6123 = t2392*t2074;
  t6124 = t5464*t2643;
  t6125 = t6123 + t6124;
  t6126 = -0.8*t6125;
  t6127 = t6122 + t6051 + t6126;
  t6128 = -0.4*t5541*t5464;
  t6129 = 0.4*t5653*t2643;
  t6130 = -0.8*t6030;
  t6131 = t6128 + t6129 + t6130;
  t5612 = -0.768*t3033;
  t5901 = -0.768*t5477;
  t6016 = -0.768*t5559;
  t6017 = -0.2 + t6016;
  t6137 = -0.768*t5605;
  t6138 = -0.2 + t6137;
  t6164 = 0.768*t5646*t5716;
  t6165 = 0.768*t5634*t5703;
  t5871 = 0.768*t3033;
  t5991 = 0.768*t5477;
  t6114 = 0.768*t5559;
  t6115 = 0.2 + t6114;
  t6158 = 0.768*t5605;
  t6159 = 0.2 + t6158;
  t6169 = 0.4*t2392*t2074;
  t5587 = -0.748*t5337;
  t5594 = -3.2*t5593*t5373;
  t5598 = -3.2*t5597*t5447;
  t5599 = t5587 + t5594 + t5598;
  t5892 = -0.748*t5484;
  t5893 = -3.2*t5597*t5502;
  t5894 = -3.2*t5593*t5491;
  t5895 = t5892 + t5893 + t5894;
  t6006 = -0.748*t5565;
  t6007 = -3.2*t5597*t5580;
  t6008 = -3.2*t5593*t5584;
  t6009 = -0.67 + t6006 + t6007 + t6008;
  t5910 = 3.2*t5593*t5676;
  t5911 = 3.2*t5597*t5683;
  t5912 = t5909 + t5910 + t5911;
  t5964 = t5909 + t5962 + t5963;
  t5778 = t5628 + t5776 + t5777;
  t6078 = 3.2*t5593*t5800;
  t6079 = 3.2*t5597*t5807;
  t6080 = t6078 + t6079;
  t5978 = 3.2*t5818*t5502;
  t5979 = 3.2*t5814*t5491;
  t5980 = t5978 + t5962 + t5979 + t5963;
  t5815 = 3.2*t5814*t5373;
  t5819 = 3.2*t5818*t5447;
  t5820 = t5776 + t5815 + t5819 + t5777;
  t6090 = 3.2*t5818*t5580;
  t6091 = 3.2*t5814*t5584;
  t6092 = 3.2*t5593*t5832;
  t6093 = 3.2*t5597*t5836;
  t6094 = t6090 + t6091 + t6092 + t6093;
  t5872 = 0.748*t5337;
  t5873 = 3.2*t5593*t5373;
  t5874 = 3.2*t5597*t5447;
  t5875 = t5872 + t5873 + t5874;
  t6116 = 0.748*t5565;
  t6117 = 3.2*t5597*t5580;
  t6118 = 3.2*t5593*t5584;
  t6119 = 0.67 + t6116 + t6117 + t6118;
  t6190 = Power(t5597,2);
  t6192 = Power(t5593,2);
  t5600 = -0.768*t5373;
  t5896 = -0.768*t5491;
  t6010 = -0.768*t5584;
  t6011 = -0.2 + t6010;
  t6195 = -0.768*t5593;
  t6196 = -0.2 + t6195;
  t6222 = 0.768*t5646*t5787;
  t6223 = 0.768*t5634*t5774;
  t5876 = 0.768*t5373;
  t5992 = 0.768*t5491;
  t6120 = 0.768*t5584;
  t6121 = 0.2 + t6120;
  t6216 = 0.768*t5593;
  t6217 = 0.2 + t6216;
  p_output1[0]=t1551 - 6.8*t1758 + t2313 - 3.2*t3036 - 3.2*t3710 + t465 - 6.8*t5298 + t5352 - 3.2*t5374 - 3.2*t5451;
  p_output1[1]=t5507;
  p_output1[2]=t5586;
  p_output1[3]=t5599;
  p_output1[4]=t5600;
  p_output1[5]=t5611;
  p_output1[6]=t5612;
  p_output1[7]=0.768*t5477*t5614 + t5617*t5621 + 0.768*t5491*t5624 + t5627*t5631 + t5634*(6.4*t3033*t5477 + 6.4*t3573*t5480 + 6.4*t5373*t5491 + 6.4*t5447*t5502 + t5635 + t5636 + t5639 + t5640) + t5646*t5685 + t5688*t5696;
  p_output1[8]=t5704 + t5617*t5707 + t5634*(t5635 + t5636 + t5709 + t5710) + t5646*t5719 + t5688*t5738;
  p_output1[9]=t5704 + t5634*(t5709 + t5710) + t5617*t5749 + t5646*t5753 + t5688*t5767;
  p_output1[10]=t5775 + t5627*t5778 + t5634*(t5639 + t5640 + t5780 + t5781) + t5646*t5790 + t5688*t5809;
  p_output1[11]=t5775 + t5634*(t5780 + t5781) + t5627*t5820 + t5646*t5824 + t5688*t5838;
  p_output1[12]=6.8*t1758 + 3.2*t3036 + 3.2*t3710 + 6.8*t5298 + 3.2*t5374 + 3.2*t5451 + t5650 + t5669 + t5841 + t5842;
  p_output1[13]=t5858;
  p_output1[14]=t5866;
  p_output1[15]=t5870;
  p_output1[16]=t5871;
  p_output1[17]=t5875;
  p_output1[18]=t5876;
  p_output1[19]=-1.;
  p_output1[20]=t5507;
  p_output1[21]=t1551 + t2313 + t465 + t5352 - 6.8*t5647 - 3.2*t5659 - 3.2*t5661 - 6.8*t5666 - 3.2*t5678 - 3.2*t5680;
  p_output1[22]=t5891;
  p_output1[23]=t5895;
  p_output1[24]=t5896;
  p_output1[25]=t5900;
  p_output1[26]=t5901;
  p_output1[27]=0.768*t5614*t5657 + 0.768*t5624*t5676 + t5634*t5685 + t5617*t5906 + t5627*t5912 + t5646*(t5635 + t5639 + 6.4*t5477*t5657 + 6.4*t5480*t5664 + 6.4*t5491*t5676 + 6.4*t5502*t5683 + t5914 + t5917) + t5688*t5929;
  p_output1[28]=t5634*t5719 + t5932 + t5617*t5935 + t5646*(t5635 + t5914 + t5937 + t5938) + t5688*t5946;
  p_output1[29]=t5634*t5753 + t5932 + t5646*(t5937 + t5938) + t5617*t5951 + t5688*t5958;
  p_output1[30]=t5634*t5790 + t5961 + t5627*t5964 + t5646*(t5639 + t5917 + t5966 + t5967) + t5688*t5975;
  p_output1[31]=t5634*t5824 + t5961 + t5646*(t5966 + t5967) + t5627*t5980 + t5688*t5987;
  p_output1[32]=t5858;
  p_output1[33]=t5648 + t5650 + t5660 + t5662 + t5667 + t5669 + t5679 + t5681 + t5841 + t5842;
  p_output1[34]=t5696;
  p_output1[35]=t5621;
  p_output1[36]=t5991;
  p_output1[37]=t5631;
  p_output1[38]=t5992;
  p_output1[39]=-1.;
  p_output1[40]=t5586;
  p_output1[41]=t5891;
  p_output1[42]=-3.3612 - 6.8*t5993 - 3.2*t5995 - 3.2*t5997 - 6.8*t5999 - 3.2*t6001 - 3.2*t6003;
  p_output1[43]=t6009;
  p_output1[44]=t6011;
  p_output1[45]=t6015;
  p_output1[46]=t6017;
  p_output1[47]=t5634*t5696 + t5646*t5929 + t6025 + t6033;
  p_output1[48]=0.768*t5614*t5729 + t5688*(6.4*t5559*t5729 + 6.4*t5553*t5736) + t5634*t5738 + t5646*t5946 + t6025 + t6033 + t5617*t6040;
  p_output1[49]=0.768*t5614*t5761 + t5688*(6.4*t5559*t5761 + 6.4*t5553*t5765) + t5634*t5767 + t5646*t5958 + t6056 + t6063 + t5617*t6068;
  p_output1[50]=0.768*t5624*t5800 + t5688*(6.4*t5584*t5800 + 6.4*t5580*t5807) + t5634*t5809 + t5646*t5975 + t5627*t6080;
  p_output1[51]=0.768*t5624*t5832 + t5688*(6.4*t5584*t5832 + 6.4*t5580*t5836) + t5634*t5838 + t5646*t5987 + t5627*t6094;
  p_output1[52]=t5866;
  p_output1[53]=t5696;
  p_output1[54]=3.3612 + 6.8*t5993 + 3.2*t5995 + 3.2*t5997 + 6.8*t5999 + 3.2*t6001 + 3.2*t6003;
  p_output1[55]=t6113;
  p_output1[56]=t6115;
  p_output1[57]=t6119;
  p_output1[58]=t6121;
  p_output1[59]=t6127;
  p_output1[60]=t6131;
  p_output1[61]=t5611;
  p_output1[62]=t5900;
  p_output1[63]=t6015;
  p_output1[64]=-1.58228 - 3.2*t6132 - 3.2*t6134;
  p_output1[65]=t6138;
  p_output1[66]=t5621*t5634 + t5646*t5906 + t6025 + t6033;
  p_output1[67]=t5634*t5707 + t5646*t5935 + t6025 + t6033 + t5688*t6040;
  p_output1[68]=0.768*t5614*t5743 + t5617*(6.4*t5605*t5743 + 6.4*t5609*t5747) + t5634*t5749 + t5646*t5951 + t6056 + t6063 + t5688*t6068;
  p_output1[69]=t5870;
  p_output1[70]=t5621;
  p_output1[71]=t6113;
  p_output1[72]=1.58228 + 3.2*t6132 + 3.2*t6134;
  p_output1[73]=t6159;
  p_output1[74]=t6127;
  p_output1[75]=t6131;
  p_output1[76]=t5612;
  p_output1[77]=t5901;
  p_output1[78]=t6017;
  p_output1[79]=t6138;
  p_output1[80]=-1.2143199999999998;
  p_output1[81]=0.768*t5477*t5634 + 0.768*t5646*t5657 + t6056 + t6063;
  p_output1[82]=0.768*t5688*t5729 + t6056 + t6063 + t6164 + t6165;
  p_output1[83]=0.768*t5617*t5743 + 0.768*t5688*t5761 + t6164 + t6165 - 1.*(0.4*t1725*t2392 + t6058 + 0.8*(-1.*t1725*t2392 + t6059))*var4[0] - 1.*(t6051 + 0.8*(-1.*t2074*t2392 + t6052) + t6169)*var4[2];
  p_output1[84]=t5871;
  p_output1[85]=t5991;
  p_output1[86]=t6115;
  p_output1[87]=t6159;
  p_output1[88]=1.2143199999999998;
  p_output1[89]=t6019 - 0.8*(-1.*t1725*t2643 + t6123) + t6169;
  p_output1[90]=-0.4*t2074*t2643 + 0.4*t2392*t5464 - 0.8*t6060;
  p_output1[91]=t5599;
  p_output1[92]=t5895;
  p_output1[93]=t6009;
  p_output1[94]=-1.58228 - 3.2*t6190 - 3.2*t6192;
  p_output1[95]=t6196;
  p_output1[96]=t5631*t5634 + t5646*t5912;
  p_output1[97]=t5634*t5778 + t5646*t5964 + t5688*t6080;
  p_output1[98]=0.768*t5624*t5814 + t5627*(6.4*t5593*t5814 + 6.4*t5597*t5818) + t5634*t5820 + t5646*t5980 + t5688*t6094;
  p_output1[99]=t5875;
  p_output1[100]=t5631;
  p_output1[101]=t6119;
  p_output1[102]=1.58228 + 3.2*t6190 + 3.2*t6192;
  p_output1[103]=t6217;
  p_output1[104]=t5600;
  p_output1[105]=t5896;
  p_output1[106]=t6011;
  p_output1[107]=t6196;
  p_output1[108]=-1.2143199999999998;
  p_output1[109]=0.768*t5491*t5634 + 0.768*t5646*t5676;
  p_output1[110]=0.768*t5688*t5800 + t6222 + t6223;
  p_output1[111]=0.768*t5627*t5814 + 0.768*t5688*t5832 + t6222 + t6223;
  p_output1[112]=t5876;
  p_output1[113]=t5992;
  p_output1[114]=t6121;
  p_output1[115]=t6217;
  p_output1[116]=1.2143199999999998;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 117, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "J_dxDiscreteMapRightImpact.hh"

namespace RightImpact
{

void J_dxDiscreteMapRightImpact_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
