/*
 * Automatically Generated from Mathematica.
 * Sun 19 Apr 2020 19:55:10 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t1466;
  double t850;
  double t1684;
  double t2081;
  double t2755;
  double t2822;
  double t2893;
  double t2942;
  double t2974;
  double t3481;
  double t3523;
  double t3832;
  double t3840;
  double t4003;
  double t4007;
  double t4041;
  double t2284;
  double t2299;
  double t2344;
  double t2006;
  double t2108;
  double t2116;
  double t2814;
  double t2844;
  double t2855;
  double t2878;
  double t2987;
  double t3002;
  double t3127;
  double t3135;
  double t3143;
  double t3181;
  double t3205;
  double t3212;
  double t3673;
  double t3675;
  double t3719;
  double t3517;
  double t3558;
  double t3656;
  double t3838;
  double t3849;
  double t3857;
  double t3907;
  double t4092;
  double t4196;
  double t4334;
  double t4422;
  double t4476;
  double t4588;
  double t4727;
  double t4728;
  double t6346;
  double t6360;
  double t6368;
  double t6416;
  double t6442;
  double t6450;
  double t6529;
  double t6538;
  double t6551;
  double t6552;
  double t6576;
  double t6799;
  double t6868;
  double t6883;
  double t6935;
  double t7024;
  double t7111;
  double t7138;
  double t7197;
  double t7206;
  double t7208;
  double t7210;
  double t4933;
  double t4958;
  double t4965;
  double t4830;
  double t4894;
  double t4904;
  double t7493;
  double t7494;
  double t7502;
  double t5009;
  double t5107;
  double t7469;
  double t7476;
  double t7477;
  double t7481;
  double t5520;
  double t5524;
  double t5533;
  double t5265;
  double t5266;
  double t5399;
  double t7389;
  double t7393;
  double t7423;
  double t5904;
  double t5913;
  double t7291;
  double t7293;
  double t7323;
  double t7345;
  double t2414;
  double t3781;
  double t6140;
  double t6198;
  double t6253;
  double t6279;
  double t6313;
  double t6541;
  double t6577;
  double t6591;
  double t6625;
  double t6628;
  double t6635;
  double t6664;
  double t6676;
  double t6695;
  double t6748;
  double t6762;
  double t7200;
  double t7218;
  double t7243;
  double t7263;
  double t7272;
  double t7282;
  double t7552;
  double t7564;
  double t7571;
  double t7582;
  double t7583;
  double t8247;
  double t8249;
  double t8251;
  double t8253;
  double t8255;
  double t7718;
  double t7719;
  double t7723;
  double t7725;
  double t7776;
  double t7798;
  double t7821;
  double t7843;
  double t7844;
  double t7852;
  double t7857;
  double t7881;
  double t7914;
  double t7915;
  double t7917;
  double t8145;
  double t8164;
  double t8208;
  double t8350;
  double t8352;
  double t8379;
  double t8261;
  double t8265;
  double t8279;
  double t8293;
  double t8294;
  double t8304;
  double t8316;
  double t8320;
  double t8321;
  double t8324;
  double t8329;
  double t8342;
  double t8417;
  double t8418;
  double t8444;
  double t8543;
  double t8544;
  double t8448;
  double t8546;
  double t8547;
  double t8456;
  double t7603;
  double t7608;
  double t7664;
  double t7678;
  double t7679;
  double t8598;
  double t8600;
  double t8602;
  double t8604;
  double t8606;
  double t7743;
  double t7744;
  double t7987;
  double t7999;
  double t8010;
  double t8012;
  double t8019;
  double t8029;
  double t8055;
  double t8071;
  double t8075;
  double t8219;
  double t8688;
  double t8695;
  double t8696;
  double t8611;
  double t8619;
  double t8623;
  double t8637;
  double t8649;
  double t8661;
  double t8662;
  double t8663;
  double t8664;
  double t8665;
  double t8675;
  double t8687;
  double t8706;
  double t8707;
  double t8714;
  double t8786;
  double t8790;
  double t8719;
  double t8798;
  double t8801;
  double t8735;
  double t882;
  double t1490;
  double t2172;
  double t3024;
  double t3264;
  double t3664;
  double t4228;
  double t4812;
  double t4918;
  double t4919;
  double t4994;
  double t5246;
  double t5412;
  double t5458;
  double t5767;
  double t6009;
  double t6011;
  double t920;
  double t1683;
  double t2458;
  double t7946;
  double t7959;
  double t3825;
  double t8097;
  double t8106;
  double t7928;
  double t7932;
  double t7969;
  double t7974;
  double t8088;
  double t8089;
  double t8122;
  double t8128;
  double t7943;
  double t7956;
  double t7965;
  double t7986;
  double t8095;
  double t8105;
  double t8109;
  double t8139;
  double t8140;
  double t6090;
  double t8924;
  double t8941;
  double t8335;
  double t8950;
  double t8415;
  double t8426;
  double t8434;
  double t8446;
  double t8455;
  double t8457;
  double t8959;
  double t8514;
  double t8524;
  double t8529;
  double t8960;
  double t8473;
  double t8479;
  double t8496;
  double t8961;
  double t8966;
  double t8969;
  double t8541;
  double t8975;
  double t8545;
  double t8548;
  double t8549;
  double t8977;
  double t8553;
  double t8556;
  double t8565;
  double t8932;
  double t8944;
  double t8676;
  double t8953;
  double t8697;
  double t8711;
  double t8712;
  double t8716;
  double t8723;
  double t8738;
  double t8994;
  double t8771;
  double t8772;
  double t8773;
  double t8995;
  double t8755;
  double t8756;
  double t8764;
  double t8996;
  double t8999;
  double t9000;
  double t8784;
  double t9004;
  double t8791;
  double t8802;
  double t8803;
  double t9006;
  double t8807;
  double t8808;
  double t8813;
  double t8835;
  double t8837;
  double t8838;
  double t8839;
  double t8840;
  double t8841;
  double t8842;
  double t8843;
  double t8844;
  double t8824;
  double t8825;
  double t8171;
  double t8215;
  double t8216;
  double t8223;
  double t8239;
  double t8240;
  double t7584;
  double t7585;
  double t7589;
  double t7682;
  double t7699;
  double t7703;
  double t6323;
  double t6596;
  double t6636;
  double t6765;
  double t7256;
  double t7283;
  double t7284;
  double t8900;
  double t8901;
  double t8902;
  double t8903;
  double t8904;
  double t8907;
  double t8908;
  double t8909;
  double t8951;
  double t8952;
  double t8954;
  double t8955;
  double t8956;
  double t9051;
  double t9052;
  double t9053;
  double t9054;
  double t9055;
  double t9056;
  double t9057;
  double t9058;
  double t9059;
  double t9060;
  double t9061;
  double t9062;
  double t9063;
  double t9064;
  double t9065;
  double t9066;
  double t8976;
  double t8978;
  double t8979;
  double t8440;
  double t8458;
  double t8459;
  double t8989;
  double t8990;
  double t8991;
  double t8550;
  double t8575;
  double t8581;
  double t9005;
  double t9007;
  double t9008;
  double t8713;
  double t8740;
  double t8744;
  double t9018;
  double t9019;
  double t9020;
  double t8806;
  double t8816;
  double t8819;
  double t8845;
  double t8851;
  double t8853;
  double t8854;
  double t8857;
  double t8859;
  double t8860;
  double t8863;
  double t9026;
  double t9028;
  double t9030;
  double t9032;
  double t9034;
  double t9036;
  double t9084;
  double t7447;
  double t7486;
  double t7524;
  double t7535;
  double t8916;
  double t8917;
  double t8918;
  double t8919;
  double t9045;
  double t9046;
  double t9047;
  double t9048;
  double t8925;
  double t8926;
  double t8929;
  double t8962;
  double t8284;
  double t9071;
  double t9072;
  double t9073;
  double t9083;
  double t9085;
  double t9086;
  double t9087;
  double t9088;
  double t9089;
  double t9090;
  double t9091;
  double t9092;
  double t9093;
  double t9094;
  double t9095;
  double t9096;
  double t8982;
  double t8983;
  double t8984;
  double t8512;
  double t8530;
  double t8531;
  double t9097;
  double t9098;
  double t9099;
  double t9100;
  double t9101;
  double t8864;
  double t8865;
  double t8866;
  double t8867;
  double t9143;
  double t9144;
  double t9145;
  double t9146;
  double t9165;
  double t9167;
  double t9155;
  double t9156;
  double t9157;
  double t9158;
  double t9159;
  double t9160;
  double t9161;
  double t9162;
  double t9163;
  double t9164;
  double t7550;
  double t8920;
  double t9049;
  double t9050;
  double t9170;
  double t9171;
  double t9197;
  double t9198;
  double t8868;
  double t9024;
  double t9147;
  double t9148;
  double t9191;
  double t9192;
  double t9202;
  double t7289;
  double t7358;
  double t7438;
  double t7443;
  double t8911;
  double t8912;
  double t8913;
  double t8914;
  double t9039;
  double t9040;
  double t9041;
  double t9042;
  double t8933;
  double t8938;
  double t8939;
  double t8997;
  double t8625;
  double t9111;
  double t9112;
  double t9113;
  double t9011;
  double t9012;
  double t9013;
  double t8767;
  double t8774;
  double t8778;
  double t9123;
  double t9124;
  double t9125;
  double t9126;
  double t9127;
  double t8870;
  double t8871;
  double t8872;
  double t8873;
  double t9149;
  double t9150;
  double t9151;
  double t9152;
  double t9223;
  double t9225;
  double t7446;
  double t8915;
  double t9043;
  double t9044;
  double t9228;
  double t9229;
  double t9255;
  double t9256;
  double t8877;
  double t9025;
  double t9153;
  double t9154;
  double t9249;
  double t9250;
  t1466 = Sin(var2[2]);
  t850 = Cos(var2[2]);
  t1684 = Cos(var2[3]);
  t2081 = Sin(var2[3]);
  t2755 = Cos(var2[4]);
  t2822 = Sin(var2[4]);
  t2893 = t1684*t2755;
  t2942 = -1.*t2081*t2822;
  t2974 = t2893 + t2942;
  t3481 = Cos(var2[5]);
  t3523 = Sin(var2[5]);
  t3832 = Cos(var2[6]);
  t3840 = Sin(var2[6]);
  t4003 = t3481*t3832;
  t4007 = -1.*t3523*t3840;
  t4041 = t4003 + t4007;
  t2284 = t850*t1684;
  t2299 = -1.*t1466*t2081;
  t2344 = t2284 + t2299;
  t2006 = t1684*t1466;
  t2108 = t850*t2081;
  t2116 = t2006 + t2108;
  t2814 = -1.*t2755*t2081;
  t2844 = -1.*t1684*t2822;
  t2855 = t2814 + t2844;
  t2878 = t1466*t2855;
  t2987 = t850*t2974;
  t3002 = t2878 + t2987;
  t3127 = t2755*t2081;
  t3135 = t1684*t2822;
  t3143 = t3127 + t3135;
  t3181 = t850*t3143;
  t3205 = t1466*t2974;
  t3212 = t3181 + t3205;
  t3673 = t850*t3481;
  t3675 = -1.*t1466*t3523;
  t3719 = t3673 + t3675;
  t3517 = t3481*t1466;
  t3558 = t850*t3523;
  t3656 = t3517 + t3558;
  t3838 = -1.*t3832*t3523;
  t3849 = -1.*t3481*t3840;
  t3857 = t3838 + t3849;
  t3907 = t1466*t3857;
  t4092 = t850*t4041;
  t4196 = t3907 + t4092;
  t4334 = t3832*t3523;
  t4422 = t3481*t3840;
  t4476 = t4334 + t4422;
  t4588 = t850*t4476;
  t4727 = t1466*t4041;
  t4728 = t4588 + t4727;
  t6346 = -1.*t2755;
  t6360 = 1. + t6346;
  t6368 = 0.4*t6360;
  t6416 = 0.64*t2755;
  t6442 = t6368 + t6416;
  t6450 = t6442*t2081;
  t6529 = 0.24*t1684*t2822;
  t6538 = t6450 + t6529;
  t6551 = t1684*t6442;
  t6552 = -0.24*t2081*t2822;
  t6576 = t6551 + t6552;
  t6799 = -1.*t3832;
  t6868 = 1. + t6799;
  t6883 = 0.4*t6868;
  t6935 = 0.64*t3832;
  t7024 = t6883 + t6935;
  t7111 = t7024*t3523;
  t7138 = 0.24*t3481*t3840;
  t7197 = t7111 + t7138;
  t7206 = t3481*t7024;
  t7208 = -0.24*t3523*t3840;
  t7210 = t7206 + t7208;
  t4933 = t850*t2855;
  t4958 = -1.*t1466*t2974;
  t4965 = t4933 + t4958;
  t4830 = -1.*t1684*t1466;
  t4894 = -1.*t850*t2081;
  t4904 = t4830 + t4894;
  t7493 = t6442*t2822;
  t7494 = -0.24*t2755*t2822;
  t7502 = t7493 + t7494;
  t5009 = -1.*t1466*t3143;
  t5107 = t5009 + t2987;
  t7469 = t6442*t2755;
  t7476 = Power(t2822,2);
  t7477 = 0.24*t7476;
  t7481 = t7469 + t7477;
  t5520 = t850*t3857;
  t5524 = -1.*t1466*t4041;
  t5533 = t5520 + t5524;
  t5265 = -1.*t3481*t1466;
  t5266 = -1.*t850*t3523;
  t5399 = t5265 + t5266;
  t7389 = t7024*t3840;
  t7393 = -0.24*t3832*t3840;
  t7423 = t7389 + t7393;
  t5904 = -1.*t1466*t4476;
  t5913 = t5904 + t4092;
  t7291 = t7024*t3832;
  t7293 = Power(t3840,2);
  t7323 = 0.24*t7293;
  t7345 = t7291 + t7323;
  t2414 = Power(t2344,2);
  t3781 = Power(t3719,2);
  t6140 = Power(t1684,2);
  t6198 = 0.11*t6140;
  t6253 = Power(t2081,2);
  t6279 = 0.11*t6253;
  t6313 = t6198 + t6279;
  t6541 = -1.*t6538*t2974;
  t6577 = -1.*t2855*t6576;
  t6591 = t6541 + t6577;
  t6625 = t6538*t3143;
  t6628 = t2974*t6576;
  t6635 = t6625 + t6628;
  t6664 = Power(t3481,2);
  t6676 = 0.11*t6664;
  t6695 = Power(t3523,2);
  t6748 = 0.11*t6695;
  t6762 = t6676 + t6748;
  t7200 = -1.*t7197*t4041;
  t7218 = -1.*t3857*t7210;
  t7243 = t7200 + t7218;
  t7263 = t7197*t4476;
  t7272 = t4041*t7210;
  t7282 = t7263 + t7272;
  t7552 = -1.*var1[6];
  t7564 = var3[4] + t7552;
  t7571 = -1.*var1[5];
  t7582 = var3[3] + t7571;
  t7583 = 0.748*t4904;
  t8247 = -1.*t1684*t2755;
  t8249 = t2081*t2822;
  t8251 = t8247 + t8249;
  t8253 = t1466*t8251;
  t8255 = t4933 + t8253;
  t7718 = -1.*var1[0];
  t7719 = var3[0] + t7718;
  t7723 = 13.6*t4904*t2344;
  t7725 = 13.6*t2116*t2344;
  t7776 = -1.*var1[1];
  t7798 = var3[1] + t7776;
  t7821 = Power(t4904,2);
  t7843 = 6.8*t7821;
  t7844 = 6.8*t4904*t2116;
  t7852 = 6.8*t2414;
  t7857 = -1.*t850*t1684;
  t7881 = t1466*t2081;
  t7914 = t7857 + t7881;
  t7915 = 6.8*t2344*t7914;
  t7917 = -1.*t1466*t2855;
  t8145 = -1.*var1[2];
  t8164 = var3[2] + t8145;
  t8208 = 6.8*t4904*t6313;
  t8350 = -1.*t6442*t2081;
  t8352 = -0.24*t1684*t2822;
  t8379 = t8350 + t8352;
  t8261 = 0.768*t7564*t8255;
  t8265 = 3.2*t7502*t3002;
  t8279 = 3.2*t7481*t8255;
  t8293 = 6.4*t3002*t3212;
  t8294 = 6.4*t3002*t8255;
  t8304 = 3.2*t3002*t5107;
  t8316 = 3.2*t4965*t3212;
  t8320 = t850*t8251;
  t8321 = t7917 + t8320;
  t8324 = 3.2*t3002*t8321;
  t8329 = 3.2*t4965*t8255;
  t8342 = 3.2*t3002*t6591;
  t8417 = t6538*t2974;
  t8418 = t2855*t6576;
  t8444 = 3.2*t6635*t8255;
  t8543 = -0.24*t2755*t2081;
  t8544 = t8543 + t8352;
  t8448 = -1.*t2855*t6538;
  t8546 = 0.24*t1684*t2755;
  t8547 = t8546 + t6552;
  t8456 = -1.*t6576*t8251;
  t7603 = -1.*var1[4];
  t7608 = var3[6] + t7603;
  t7664 = -1.*var1[3];
  t7678 = var3[5] + t7664;
  t7679 = 0.748*t5399;
  t8598 = -1.*t3481*t3832;
  t8600 = t3523*t3840;
  t8602 = t8598 + t8600;
  t8604 = t1466*t8602;
  t8606 = t5520 + t8604;
  t7743 = 13.6*t5399*t3719;
  t7744 = 13.6*t3656*t3719;
  t7987 = Power(t5399,2);
  t7999 = 6.8*t7987;
  t8010 = 6.8*t5399*t3656;
  t8012 = 6.8*t3781;
  t8019 = -1.*t850*t3481;
  t8029 = t1466*t3523;
  t8055 = t8019 + t8029;
  t8071 = 6.8*t3719*t8055;
  t8075 = -1.*t1466*t3857;
  t8219 = 6.8*t5399*t6762;
  t8688 = -1.*t7024*t3523;
  t8695 = -0.24*t3481*t3840;
  t8696 = t8688 + t8695;
  t8611 = 0.768*t7608*t8606;
  t8619 = 3.2*t7423*t4196;
  t8623 = 3.2*t7345*t8606;
  t8637 = 6.4*t4196*t4728;
  t8649 = 6.4*t4196*t8606;
  t8661 = 3.2*t4196*t5913;
  t8662 = 3.2*t5533*t4728;
  t8663 = t850*t8602;
  t8664 = t8075 + t8663;
  t8665 = 3.2*t4196*t8664;
  t8675 = 3.2*t5533*t8606;
  t8687 = 3.2*t4196*t7243;
  t8706 = t7197*t4041;
  t8707 = t3857*t7210;
  t8714 = 3.2*t7282*t8606;
  t8786 = -0.24*t3832*t3523;
  t8790 = t8786 + t8695;
  t8719 = -1.*t3857*t7197;
  t8798 = 0.24*t3481*t3832;
  t8801 = t8798 + t7208;
  t8735 = -1.*t7210*t8602;
  t882 = Power(t850,2);
  t1490 = Power(t1466,2);
  t2172 = Power(t2116,2);
  t3024 = Power(t3002,2);
  t3264 = Power(t3212,2);
  t3664 = Power(t3656,2);
  t4228 = Power(t4196,2);
  t4812 = Power(t4728,2);
  t4918 = -6.8*t4904*t2344;
  t4919 = -6.8*t2116*t2344;
  t4994 = -3.2*t3002*t4965;
  t5246 = -3.2*t5107*t3212;
  t5412 = -6.8*t5399*t3719;
  t5458 = -6.8*t3656*t3719;
  t5767 = -3.2*t4196*t5533;
  t6009 = -3.2*t5913*t4728;
  t6011 = t4918 + t4919 + t4994 + t5246 + t5412 + t5458 + t5767 + t6009;
  t920 = -12.*t882;
  t1683 = -12.*t1490;
  t2458 = -6.8*t2414;
  t7946 = Power(t5107,2);
  t7959 = Power(t4965,2);
  t3825 = -6.8*t3781;
  t8097 = Power(t5913,2);
  t8106 = Power(t5533,2);
  t7928 = -1.*t850*t2974;
  t7932 = t7917 + t7928;
  t7969 = -1.*t850*t3143;
  t7974 = t7969 + t4958;
  t8088 = -1.*t850*t4041;
  t8089 = t8075 + t8088;
  t8122 = -1.*t850*t4476;
  t8128 = t8122 + t5524;
  t7943 = 3.2*t7932*t3002;
  t7956 = 3.2*t7946;
  t7965 = 3.2*t7959;
  t7986 = 3.2*t7974*t3212;
  t8095 = 3.2*t8089*t4196;
  t8105 = 3.2*t8097;
  t8109 = 3.2*t8106;
  t8139 = 3.2*t8128*t4728;
  t8140 = t7843 + t7844 + t7852 + t7915 + t7943 + t7956 + t7965 + t7986 + t7999 + t8010 + t8012 + t8071 + t8095 + t8105 + t8109 + t8139;
  t6090 = -2.88*t850;
  t8924 = 0.748*t7914;
  t8941 = 13.6*t4904*t7914;
  t8335 = t7843 + t7844 + t7852 + t7915 + t8304 + t8316 + t8324 + t8329;
  t8950 = 6.8*t7914*t6313;
  t8415 = t8379*t2974;
  t8426 = t3143*t6576;
  t8434 = t8415 + t8417 + t8418 + t8426;
  t8446 = -1.*t2855*t8379;
  t8455 = -1.*t2974*t6576;
  t8457 = t8446 + t8448 + t8455 + t8456;
  t8959 = 0.768*t7564*t8321;
  t8514 = Power(t2755,2);
  t8524 = -0.24*t8514;
  t8529 = t7469 + t8524;
  t8960 = 3.2*t7502*t4965;
  t8473 = -1.*t6442*t2822;
  t8479 = 0.24*t2755*t2822;
  t8496 = t8473 + t8479;
  t8961 = 3.2*t7481*t8321;
  t8966 = 6.4*t5107*t4965;
  t8969 = 6.4*t4965*t8321;
  t8541 = t8304 + t8316 + t8324 + t8329;
  t8975 = 3.2*t4965*t6591;
  t8545 = t8544*t2974;
  t8548 = t3143*t8547;
  t8549 = t8545 + t8417 + t8418 + t8548;
  t8977 = 3.2*t6635*t8321;
  t8553 = -1.*t2855*t8544;
  t8556 = -1.*t2974*t8547;
  t8565 = t8553 + t8448 + t8556 + t8456;
  t8932 = 0.748*t8055;
  t8944 = 13.6*t5399*t8055;
  t8676 = t7999 + t8010 + t8012 + t8071 + t8661 + t8662 + t8665 + t8675;
  t8953 = 6.8*t8055*t6762;
  t8697 = t8696*t4041;
  t8711 = t4476*t7210;
  t8712 = t8697 + t8706 + t8707 + t8711;
  t8716 = -1.*t3857*t8696;
  t8723 = -1.*t4041*t7210;
  t8738 = t8716 + t8719 + t8723 + t8735;
  t8994 = 0.768*t7608*t8664;
  t8771 = Power(t3832,2);
  t8772 = -0.24*t8771;
  t8773 = t7291 + t8772;
  t8995 = 3.2*t7423*t5533;
  t8755 = -1.*t7024*t3840;
  t8756 = 0.24*t3832*t3840;
  t8764 = t8755 + t8756;
  t8996 = 3.2*t7345*t8664;
  t8999 = 6.4*t5913*t5533;
  t9000 = 6.4*t5533*t8664;
  t8784 = t8661 + t8662 + t8665 + t8675;
  t9004 = 3.2*t5533*t7243;
  t8791 = t8790*t4041;
  t8802 = t4476*t8801;
  t8803 = t8791 + t8706 + t8707 + t8802;
  t9006 = 3.2*t7282*t8664;
  t8807 = -1.*t3857*t8790;
  t8808 = -1.*t4041*t8801;
  t8813 = t8807 + t8719 + t8808 + t8735;
  t8835 = 6.8*t4904*t2344;
  t8837 = 6.8*t2116*t2344;
  t8838 = 3.2*t3002*t4965;
  t8839 = 3.2*t5107*t3212;
  t8840 = 6.8*t5399*t3719;
  t8841 = 6.8*t3656*t3719;
  t8842 = 3.2*t4196*t5533;
  t8843 = 3.2*t5913*t4728;
  t8844 = t8835 + t8837 + t8838 + t8839 + t8840 + t8841 + t8842 + t8843;
  t8824 = 12.*t882;
  t8825 = 12.*t1490;
  t8171 = -2.88*t1466;
  t8215 = 3.2*t5107*t6591;
  t8216 = 3.2*t4965*t6635;
  t8223 = 3.2*t5913*t7243;
  t8239 = 3.2*t5533*t7282;
  t8240 = t8171 + t8208 + t8215 + t8216 + t8219 + t8223 + t8239;
  t7584 = 3.2*t7502*t5107;
  t7585 = 3.2*t7481*t4965;
  t7589 = t7583 + t7584 + t7585;
  t7682 = 3.2*t7423*t5913;
  t7699 = 3.2*t7345*t5533;
  t7703 = t7679 + t7682 + t7699;
  t6323 = -6.8*t2344*t6313;
  t6596 = -3.2*t3212*t6591;
  t6636 = -3.2*t3002*t6635;
  t6765 = -6.8*t3719*t6762;
  t7256 = -3.2*t4728*t7243;
  t7283 = -3.2*t4196*t7282;
  t7284 = t6090 + t6323 + t6596 + t6636 + t6765 + t7256 + t7283;
  t8900 = 2.88*t1466;
  t8901 = -6.8*t4904*t6313;
  t8902 = -3.2*t5107*t6591;
  t8903 = -3.2*t4965*t6635;
  t8904 = -6.8*t5399*t6762;
  t8907 = -3.2*t5913*t7243;
  t8908 = -3.2*t5533*t7282;
  t8909 = t8900 + t8901 + t8902 + t8903 + t8904 + t8907 + t8908;
  t8951 = 3.2*t7974*t6591;
  t8952 = 3.2*t7932*t6635;
  t8954 = 3.2*t8128*t7243;
  t8955 = 3.2*t8089*t7282;
  t8956 = t6090 + t8950 + t8951 + t8952 + t8953 + t8954 + t8955;
  t9051 = 0.4*t6360*t7914;
  t9052 = -0.4*t2116*t2822;
  t9053 = t2755*t7914;
  t9054 = t2116*t2822;
  t9055 = t9053 + t9054;
  t9056 = 0.8*t9055;
  t9057 = t9051 + t9052 + t9056;
  t9058 = -1.*var4[2]*t9057;
  t9059 = 0.4*t6360*t4904;
  t9060 = -0.4*t7914*t2822;
  t9061 = t2755*t4904;
  t9062 = t7914*t2822;
  t9063 = t9061 + t9062;
  t9064 = 0.8*t9063;
  t9065 = t9059 + t9060 + t9064;
  t9066 = -1.*var4[0]*t9065;
  t8976 = 3.2*t4965*t8434;
  t8978 = 3.2*t5107*t8457;
  t8979 = t8950 + t8975 + t8976 + t8977 + t8978;
  t8440 = 3.2*t3002*t8434;
  t8458 = 3.2*t3212*t8457;
  t8459 = t8208 + t8342 + t8440 + t8444 + t8458;
  t8989 = 3.2*t4965*t8549;
  t8990 = 3.2*t5107*t8565;
  t8991 = t8975 + t8989 + t8977 + t8990;
  t8550 = 3.2*t3002*t8549;
  t8575 = 3.2*t3212*t8565;
  t8581 = t8342 + t8550 + t8444 + t8575;
  t9005 = 3.2*t5533*t8712;
  t9007 = 3.2*t5913*t8738;
  t9008 = t8953 + t9004 + t9005 + t9006 + t9007;
  t8713 = 3.2*t4196*t8712;
  t8740 = 3.2*t4728*t8738;
  t8744 = t8219 + t8687 + t8713 + t8714 + t8740;
  t9018 = 3.2*t5533*t8803;
  t9019 = 3.2*t5913*t8813;
  t9020 = t9004 + t9018 + t9006 + t9019;
  t8806 = 3.2*t4196*t8803;
  t8816 = 3.2*t4728*t8813;
  t8819 = t8687 + t8806 + t8714 + t8816;
  t8845 = 2.88*t850;
  t8851 = 6.8*t2344*t6313;
  t8853 = 3.2*t3212*t6591;
  t8854 = 3.2*t3002*t6635;
  t8857 = 6.8*t3719*t6762;
  t8859 = 3.2*t4728*t7243;
  t8860 = 3.2*t4196*t7282;
  t8863 = t8845 + t8851 + t8853 + t8854 + t8857 + t8859 + t8860;
  t9026 = Power(t6313,2);
  t9028 = Power(t6591,2);
  t9030 = Power(t6635,2);
  t9032 = Power(t6762,2);
  t9034 = Power(t7243,2);
  t9036 = Power(t7282,2);
  t9084 = 0.4*t4904*t2822;
  t7447 = -0.748*t2344;
  t7486 = -3.2*t7481*t3002;
  t7524 = -3.2*t7502*t3212;
  t7535 = t7447 + t7486 + t7524;
  t8916 = -0.748*t4904;
  t8917 = -3.2*t7502*t5107;
  t8918 = -3.2*t7481*t4965;
  t8919 = t8916 + t8917 + t8918;
  t9045 = -0.748*t6313;
  t9046 = -3.2*t7502*t6591;
  t9047 = -3.2*t7481*t6635;
  t9048 = -0.67 + t9045 + t9046 + t9047;
  t8925 = 3.2*t7481*t7932;
  t8926 = 3.2*t7502*t7974;
  t8929 = t8924 + t8925 + t8926;
  t8962 = t8924 + t8960 + t8961;
  t8284 = t7583 + t8265 + t8279;
  t9071 = 3.2*t7481*t8434;
  t9072 = 3.2*t7502*t8457;
  t9073 = t9071 + t9072;
  t9083 = -0.4*t2755*t7914;
  t9085 = -1.*t4904*t2822;
  t9086 = t9053 + t9085;
  t9087 = 0.8*t9086;
  t9088 = t9083 + t9084 + t9087;
  t9089 = -1.*var4[2]*t9088;
  t9090 = -0.4*t2755*t4904;
  t9091 = 0.4*t2344*t2822;
  t9092 = -1.*t2344*t2822;
  t9093 = t9061 + t9092;
  t9094 = 0.8*t9093;
  t9095 = t9090 + t9091 + t9094;
  t9096 = -1.*var4[0]*t9095;
  t8982 = 3.2*t8529*t5107;
  t8983 = 3.2*t8496*t4965;
  t8984 = t8982 + t8960 + t8983 + t8961;
  t8512 = 3.2*t8496*t3002;
  t8530 = 3.2*t8529*t3212;
  t8531 = t8265 + t8512 + t8530 + t8279;
  t9097 = 3.2*t8529*t6591;
  t9098 = 3.2*t8496*t6635;
  t9099 = 3.2*t7481*t8549;
  t9100 = 3.2*t7502*t8565;
  t9101 = t9097 + t9098 + t9099 + t9100;
  t8864 = 0.748*t2344;
  t8865 = 3.2*t7481*t3002;
  t8866 = 3.2*t7502*t3212;
  t8867 = t8864 + t8865 + t8866;
  t9143 = 0.748*t6313;
  t9144 = 3.2*t7502*t6591;
  t9145 = 3.2*t7481*t6635;
  t9146 = 0.67 + t9143 + t9144 + t9145;
  t9165 = Power(t7502,2);
  t9167 = Power(t7481,2);
  t9155 = -0.4*t6360*t2344;
  t9156 = t2755*t2344;
  t9157 = t4904*t2822;
  t9158 = t9156 + t9157;
  t9159 = -0.8*t9158;
  t9160 = t9155 + t9084 + t9159;
  t9161 = -0.4*t6360*t4904;
  t9162 = 0.4*t7914*t2822;
  t9163 = -0.8*t9063;
  t9164 = t9161 + t9162 + t9163;
  t7550 = -0.768*t3002;
  t8920 = -0.768*t4965;
  t9049 = -0.768*t6635;
  t9050 = -0.2 + t9049;
  t9170 = -0.768*t7481;
  t9171 = -0.2 + t9170;
  t9197 = 0.768*t7798*t8321;
  t9198 = 0.768*t7719*t8255;
  t8868 = 0.768*t3002;
  t9024 = 0.768*t4965;
  t9147 = 0.768*t6635;
  t9148 = 0.2 + t9147;
  t9191 = 0.768*t7481;
  t9192 = 0.2 + t9191;
  t9202 = 0.4*t2755*t2344;
  t7289 = -0.748*t3719;
  t7358 = -3.2*t7345*t4196;
  t7438 = -3.2*t7423*t4728;
  t7443 = t7289 + t7358 + t7438;
  t8911 = -0.748*t5399;
  t8912 = -3.2*t7423*t5913;
  t8913 = -3.2*t7345*t5533;
  t8914 = t8911 + t8912 + t8913;
  t9039 = -0.748*t6762;
  t9040 = -3.2*t7423*t7243;
  t9041 = -3.2*t7345*t7282;
  t9042 = -0.67 + t9039 + t9040 + t9041;
  t8933 = 3.2*t7345*t8089;
  t8938 = 3.2*t7423*t8128;
  t8939 = t8932 + t8933 + t8938;
  t8997 = t8932 + t8995 + t8996;
  t8625 = t7679 + t8619 + t8623;
  t9111 = 3.2*t7345*t8712;
  t9112 = 3.2*t7423*t8738;
  t9113 = t9111 + t9112;
  t9011 = 3.2*t8773*t5913;
  t9012 = 3.2*t8764*t5533;
  t9013 = t9011 + t8995 + t9012 + t8996;
  t8767 = 3.2*t8764*t4196;
  t8774 = 3.2*t8773*t4728;
  t8778 = t8619 + t8767 + t8774 + t8623;
  t9123 = 3.2*t8773*t7243;
  t9124 = 3.2*t8764*t7282;
  t9125 = 3.2*t7345*t8803;
  t9126 = 3.2*t7423*t8813;
  t9127 = t9123 + t9124 + t9125 + t9126;
  t8870 = 0.748*t3719;
  t8871 = 3.2*t7345*t4196;
  t8872 = 3.2*t7423*t4728;
  t8873 = t8870 + t8871 + t8872;
  t9149 = 0.748*t6762;
  t9150 = 3.2*t7423*t7243;
  t9151 = 3.2*t7345*t7282;
  t9152 = 0.67 + t9149 + t9150 + t9151;
  t9223 = Power(t7423,2);
  t9225 = Power(t7345,2);
  t7446 = -0.768*t4196;
  t8915 = -0.768*t5533;
  t9043 = -0.768*t7282;
  t9044 = -0.2 + t9043;
  t9228 = -0.768*t7345;
  t9229 = -0.2 + t9228;
  t9255 = 0.768*t7798*t8664;
  t9256 = 0.768*t7719*t8606;
  t8877 = 0.768*t4196;
  t9025 = 0.768*t5533;
  t9153 = 0.768*t7282;
  t9154 = 0.2 + t9153;
  t9249 = 0.768*t7345;
  t9250 = 0.2 + t9249;
  p_output1[0]=t1683 - 6.8*t2172 + t2458 - 3.2*t3024 - 3.2*t3264 - 6.8*t3664 + t3825 - 3.2*t4228 - 3.2*t4812 + t920;
  p_output1[1]=t6011;
  p_output1[2]=t7284;
  p_output1[3]=t7443;
  p_output1[4]=t7446;
  p_output1[5]=t7535;
  p_output1[6]=t7550;
  p_output1[7]=0.768*t4965*t7564 + t7582*t7589 + 0.768*t5533*t7608 + t7678*t7703 + t7719*(6.4*t3002*t4965 + 6.4*t3212*t5107 + 6.4*t4196*t5533 + 6.4*t4728*t5913 + t7723 + t7725 + t7743 + t7744) + t7798*t8140 + t8164*t8240;
  p_output1[8]=t8261 + t7582*t8284 + t7719*(t7723 + t7725 + t8293 + t8294) + t7798*t8335 + t8164*t8459;
  p_output1[9]=t8261 + t7719*(t8293 + t8294) + t7582*t8531 + t7798*t8541 + t8164*t8581;
  p_output1[10]=t8611 + t7678*t8625 + t7719*(t7743 + t7744 + t8637 + t8649) + t7798*t8676 + t8164*t8744;
  p_output1[11]=t8611 + t7719*(t8637 + t8649) + t7678*t8778 + t7798*t8784 + t8164*t8819;
  p_output1[12]=6.8*t2172 + 3.2*t3024 + 3.2*t3264 + 6.8*t3664 + 3.2*t4228 + 3.2*t4812 + t7852 + t8012 + t8824 + t8825;
  p_output1[13]=t8844;
  p_output1[14]=t8863;
  p_output1[15]=t8867;
  p_output1[16]=t8868;
  p_output1[17]=t8873;
  p_output1[18]=t8877;
  p_output1[19]=-1.;
  p_output1[20]=t6011;
  p_output1[21]=t1683 + t2458 + t3825 - 6.8*t7821 - 3.2*t7946 - 3.2*t7959 - 6.8*t7987 - 3.2*t8097 - 3.2*t8106 + t920;
  p_output1[22]=t8909;
  p_output1[23]=t8914;
  p_output1[24]=t8915;
  p_output1[25]=t8919;
  p_output1[26]=t8920;
  p_output1[27]=0.768*t7564*t7932 + 0.768*t7608*t8089 + t7719*t8140 + t7582*t8929 + t7678*t8939 + t7798*(t7723 + t7743 + 6.4*t4965*t7932 + 6.4*t5107*t7974 + 6.4*t5533*t8089 + 6.4*t5913*t8128 + t8941 + t8944) + t8164*t8956;
  p_output1[28]=t7719*t8335 + t8959 + t7582*t8962 + t7798*(t7723 + t8941 + t8966 + t8969) + t8164*t8979;
  p_output1[29]=t7719*t8541 + t8959 + t7798*(t8966 + t8969) + t7582*t8984 + t8164*t8991;
  p_output1[30]=t7719*t8676 + t8994 + t7678*t8997 + t7798*(t7743 + t8944 + t8999 + t9000) + t8164*t9008;
  p_output1[31]=t7719*t8784 + t8994 + t7798*(t8999 + t9000) + t7678*t9013 + t8164*t9020;
  p_output1[32]=t8844;
  p_output1[33]=t7843 + t7852 + t7956 + t7965 + t7999 + t8012 + t8105 + t8109 + t8824 + t8825;
  p_output1[34]=t8240;
  p_output1[35]=t7589;
  p_output1[36]=t9024;
  p_output1[37]=t7703;
  p_output1[38]=t9025;
  p_output1[39]=-1.;
  p_output1[40]=t7284;
  p_output1[41]=t8909;
  p_output1[42]=-3.3612 - 6.8*t9026 - 3.2*t9028 - 3.2*t9030 - 6.8*t9032 - 3.2*t9034 - 3.2*t9036;
  p_output1[43]=t9042;
  p_output1[44]=t9044;
  p_output1[45]=t9048;
  p_output1[46]=t9050;
  p_output1[47]=t7719*t8240 + t7798*t8956 + t9058 + t9066;
  p_output1[48]=0.768*t7564*t8434 + t8164*(6.4*t6635*t8434 + 6.4*t6591*t8457) + t7719*t8459 + t7798*t8979 + t9058 + t9066 + t7582*t9073;
  p_output1[49]=0.768*t7564*t8549 + t8164*(6.4*t6635*t8549 + 6.4*t6591*t8565) + t7719*t8581 + t7798*t8991 + t9089 + t9096 + t7582*t9101;
  p_output1[50]=0.768*t7608*t8712 + t8164*(6.4*t7282*t8712 + 6.4*t7243*t8738) + t7719*t8744 + t7798*t9008 + t7678*t9113;
  p_output1[51]=0.768*t7608*t8803 + t8164*(6.4*t7282*t8803 + 6.4*t7243*t8813) + t7719*t8819 + t7798*t9020 + t7678*t9127;
  p_output1[52]=t8863;
  p_output1[53]=t8240;
  p_output1[54]=3.3612 + 6.8*t9026 + 3.2*t9028 + 3.2*t9030 + 6.8*t9032 + 3.2*t9034 + 3.2*t9036;
  p_output1[55]=t9146;
  p_output1[56]=t9148;
  p_output1[57]=t9152;
  p_output1[58]=t9154;
  p_output1[59]=t9160;
  p_output1[60]=t9164;
  p_output1[61]=t7535;
  p_output1[62]=t8919;
  p_output1[63]=t9048;
  p_output1[64]=-1.58228 - 3.2*t9165 - 3.2*t9167;
  p_output1[65]=t9171;
  p_output1[66]=t7589*t7719 + t7798*t8929 + t9058 + t9066;
  p_output1[67]=t7719*t8284 + t7798*t8962 + t9058 + t9066 + t8164*t9073;
  p_output1[68]=0.768*t7564*t8496 + t7582*(6.4*t7481*t8496 + 6.4*t7502*t8529) + t7719*t8531 + t7798*t8984 + t9089 + t9096 + t8164*t9101;
  p_output1[69]=t8867;
  p_output1[70]=t7589;
  p_output1[71]=t9146;
  p_output1[72]=1.58228 + 3.2*t9165 + 3.2*t9167;
  p_output1[73]=t9192;
  p_output1[74]=t9160;
  p_output1[75]=t9164;
  p_output1[76]=t7550;
  p_output1[77]=t8920;
  p_output1[78]=t9050;
  p_output1[79]=t9171;
  p_output1[80]=-1.2143199999999998;
  p_output1[81]=0.768*t4965*t7719 + 0.768*t7798*t7932 + t9089 + t9096;
  p_output1[82]=0.768*t8164*t8434 + t9089 + t9096 + t9197 + t9198;
  p_output1[83]=0.768*t7582*t8496 + 0.768*t8164*t8549 + t9197 + t9198 - 1.*(0.4*t2116*t2755 + t9091 + 0.8*(-1.*t2116*t2755 + t9092))*var4[0] - 1.*(t9084 + 0.8*(-1.*t2344*t2755 + t9085) + t9202)*var4[2];
  p_output1[84]=t8868;
  p_output1[85]=t9024;
  p_output1[86]=t9148;
  p_output1[87]=t9192;
  p_output1[88]=1.2143199999999998;
  p_output1[89]=t9052 - 0.8*(-1.*t2116*t2822 + t9156) + t9202;
  p_output1[90]=-0.4*t2344*t2822 + 0.4*t2755*t4904 - 0.8*t9093;
  p_output1[91]=t7443;
  p_output1[92]=t8914;
  p_output1[93]=t9042;
  p_output1[94]=-1.58228 - 3.2*t9223 - 3.2*t9225;
  p_output1[95]=t9229;
  p_output1[96]=t7703*t7719 + t7798*t8939;
  p_output1[97]=t7719*t8625 + t7798*t8997 + t8164*t9113;
  p_output1[98]=0.768*t7608*t8764 + t7678*(6.4*t7345*t8764 + 6.4*t7423*t8773) + t7719*t8778 + t7798*t9013 + t8164*t9127;
  p_output1[99]=t8873;
  p_output1[100]=t7703;
  p_output1[101]=t9152;
  p_output1[102]=1.58228 + 3.2*t9223 + 3.2*t9225;
  p_output1[103]=t9250;
  p_output1[104]=t7446;
  p_output1[105]=t8915;
  p_output1[106]=t9044;
  p_output1[107]=t9229;
  p_output1[108]=-1.2143199999999998;
  p_output1[109]=0.768*t5533*t7719 + 0.768*t7798*t8089;
  p_output1[110]=0.768*t8164*t8712 + t9255 + t9256;
  p_output1[111]=0.768*t7678*t8764 + 0.768*t8164*t8803 + t9255 + t9256;
  p_output1[112]=t8877;
  p_output1[113]=t9025;
  p_output1[114]=t9154;
  p_output1[115]=t9250;
  p_output1[116]=1.2143199999999998;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 117, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "J_dxDiscreteMapRightImpact.hh"

namespace RightImpact
{

void J_dxDiscreteMapRightImpact_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
