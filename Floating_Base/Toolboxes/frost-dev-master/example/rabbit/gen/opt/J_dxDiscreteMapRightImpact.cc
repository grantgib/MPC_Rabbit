/*
 * Automatically Generated from Mathematica.
 * Wed 26 Aug 2020 15:06:29 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t1918;
  double t166;
  double t2562;
  double t3637;
  double t3669;
  double t3674;
  double t3690;
  double t3693;
  double t3701;
  double t3744;
  double t3759;
  double t3773;
  double t3775;
  double t3796;
  double t3797;
  double t3806;
  double t3657;
  double t3658;
  double t3663;
  double t3623;
  double t3641;
  double t3644;
  double t3670;
  double t3684;
  double t3685;
  double t3688;
  double t3702;
  double t3707;
  double t3713;
  double t3714;
  double t3718;
  double t3725;
  double t3726;
  double t3729;
  double t3766;
  double t3767;
  double t3768;
  double t3752;
  double t3760;
  double t3763;
  double t3774;
  double t3776;
  double t3786;
  double t3790;
  double t3810;
  double t3816;
  double t3822;
  double t3823;
  double t3824;
  double t3829;
  double t3830;
  double t3835;
  double t3907;
  double t3908;
  double t3909;
  double t3910;
  double t3911;
  double t3912;
  double t3915;
  double t3916;
  double t3918;
  double t3919;
  double t3920;
  double t3934;
  double t3935;
  double t3936;
  double t3937;
  double t3938;
  double t3939;
  double t3940;
  double t3941;
  double t3943;
  double t3944;
  double t3945;
  double t3844;
  double t3845;
  double t3846;
  double t3839;
  double t3840;
  double t3841;
  double t3974;
  double t3975;
  double t3976;
  double t3848;
  double t3849;
  double t3969;
  double t3970;
  double t3971;
  double t3972;
  double t3882;
  double t3887;
  double t3890;
  double t3859;
  double t3860;
  double t3864;
  double t3962;
  double t3963;
  double t3964;
  double t3896;
  double t3897;
  double t3957;
  double t3958;
  double t3959;
  double t3960;
  double t3666;
  double t3771;
  double t3901;
  double t3902;
  double t3903;
  double t3904;
  double t3905;
  double t3917;
  double t3921;
  double t3922;
  double t3924;
  double t3925;
  double t3926;
  double t3928;
  double t3929;
  double t3930;
  double t3931;
  double t3932;
  double t3942;
  double t3948;
  double t3949;
  double t3951;
  double t3952;
  double t3953;
  double t3980;
  double t3981;
  double t3983;
  double t3984;
  double t3985;
  double t4066;
  double t4067;
  double t4068;
  double t4069;
  double t4070;
  double t4000;
  double t4001;
  double t4002;
  double t4003;
  double t4012;
  double t4013;
  double t4014;
  double t4015;
  double t4016;
  double t4017;
  double t4018;
  double t4019;
  double t4020;
  double t4021;
  double t4022;
  double t4054;
  double t4055;
  double t4057;
  double t4089;
  double t4090;
  double t4091;
  double t4071;
  double t4072;
  double t4073;
  double t4076;
  double t4077;
  double t4080;
  double t4081;
  double t4082;
  double t4083;
  double t4084;
  double t4085;
  double t4088;
  double t4093;
  double t4094;
  double t4098;
  double t4122;
  double t4123;
  double t4100;
  double t4125;
  double t4126;
  double t4102;
  double t3990;
  double t3991;
  double t3993;
  double t3994;
  double t3995;
  double t4137;
  double t4138;
  double t4139;
  double t4140;
  double t4141;
  double t4006;
  double t4007;
  double t4033;
  double t4034;
  double t4035;
  double t4036;
  double t4037;
  double t4038;
  double t4039;
  double t4040;
  double t4041;
  double t4060;
  double t4160;
  double t4161;
  double t4162;
  double t4142;
  double t4143;
  double t4144;
  double t4147;
  double t4148;
  double t4151;
  double t4152;
  double t4153;
  double t4154;
  double t4155;
  double t4156;
  double t4159;
  double t4164;
  double t4165;
  double t4169;
  double t4193;
  double t4194;
  double t4171;
  double t4196;
  double t4197;
  double t4173;
  double t1530;
  double t2085;
  double t3646;
  double t3710;
  double t3740;
  double t3764;
  double t3817;
  double t3836;
  double t3842;
  double t3843;
  double t3847;
  double t3850;
  double t3871;
  double t3875;
  double t3895;
  double t3898;
  double t3899;
  double t1655;
  double t2281;
  double t3667;
  double t4026;
  double t4028;
  double t3772;
  double t4045;
  double t4047;
  double t4023;
  double t4024;
  double t4030;
  double t4031;
  double t4042;
  double t4043;
  double t4049;
  double t4050;
  double t4025;
  double t4027;
  double t4029;
  double t4032;
  double t4044;
  double t4046;
  double t4048;
  double t4051;
  double t4052;
  double t3900;
  double t4270;
  double t4281;
  double t4086;
  double t4290;
  double t4092;
  double t4095;
  double t4096;
  double t4099;
  double t4101;
  double t4103;
  double t4299;
  double t4112;
  double t4113;
  double t4114;
  double t4300;
  double t4108;
  double t4109;
  double t4110;
  double t4301;
  double t4304;
  double t4305;
  double t4120;
  double t4309;
  double t4124;
  double t4127;
  double t4128;
  double t4311;
  double t4130;
  double t4131;
  double t4132;
  double t4276;
  double t4284;
  double t4157;
  double t4293;
  double t4163;
  double t4166;
  double t4167;
  double t4170;
  double t4172;
  double t4174;
  double t4328;
  double t4183;
  double t4184;
  double t4185;
  double t4329;
  double t4179;
  double t4180;
  double t4181;
  double t4330;
  double t4333;
  double t4334;
  double t4191;
  double t4338;
  double t4195;
  double t4198;
  double t4199;
  double t4340;
  double t4201;
  double t4202;
  double t4203;
  double t4217;
  double t4218;
  double t4219;
  double t4220;
  double t4221;
  double t4222;
  double t4223;
  double t4224;
  double t4225;
  double t4208;
  double t4209;
  double t4056;
  double t4058;
  double t4059;
  double t4061;
  double t4062;
  double t4063;
  double t3986;
  double t3987;
  double t3988;
  double t3996;
  double t3997;
  double t3998;
  double t3906;
  double t3923;
  double t3927;
  double t3933;
  double t3950;
  double t3954;
  double t3955;
  double t4251;
  double t4252;
  double t4253;
  double t4254;
  double t4255;
  double t4256;
  double t4257;
  double t4258;
  double t4291;
  double t4292;
  double t4294;
  double t4295;
  double t4296;
  double t4385;
  double t4386;
  double t4387;
  double t4388;
  double t4389;
  double t4390;
  double t4391;
  double t4392;
  double t4393;
  double t4394;
  double t4395;
  double t4396;
  double t4397;
  double t4398;
  double t4399;
  double t4400;
  double t4310;
  double t4312;
  double t4313;
  double t4097;
  double t4104;
  double t4105;
  double t4323;
  double t4324;
  double t4325;
  double t4129;
  double t4133;
  double t4134;
  double t4339;
  double t4341;
  double t4342;
  double t4168;
  double t4175;
  double t4176;
  double t4352;
  double t4353;
  double t4354;
  double t4200;
  double t4204;
  double t4205;
  double t4226;
  double t4227;
  double t4228;
  double t4229;
  double t4230;
  double t4231;
  double t4232;
  double t4233;
  double t4360;
  double t4362;
  double t4364;
  double t4366;
  double t4368;
  double t4370;
  double t4418;
  double t3968;
  double t3973;
  double t3977;
  double t3978;
  double t4264;
  double t4265;
  double t4266;
  double t4267;
  double t4379;
  double t4380;
  double t4381;
  double t4382;
  double t4271;
  double t4272;
  double t4273;
  double t4302;
  double t4074;
  double t4405;
  double t4406;
  double t4407;
  double t4417;
  double t4419;
  double t4420;
  double t4421;
  double t4422;
  double t4423;
  double t4424;
  double t4425;
  double t4426;
  double t4427;
  double t4428;
  double t4429;
  double t4430;
  double t4316;
  double t4317;
  double t4318;
  double t4111;
  double t4115;
  double t4116;
  double t4431;
  double t4432;
  double t4433;
  double t4434;
  double t4435;
  double t4234;
  double t4235;
  double t4236;
  double t4237;
  double t4477;
  double t4478;
  double t4479;
  double t4480;
  double t4499;
  double t4501;
  double t4489;
  double t4490;
  double t4491;
  double t4492;
  double t4493;
  double t4494;
  double t4495;
  double t4496;
  double t4497;
  double t4498;
  double t3979;
  double t4268;
  double t4383;
  double t4384;
  double t4504;
  double t4505;
  double t4531;
  double t4532;
  double t4238;
  double t4358;
  double t4481;
  double t4482;
  double t4525;
  double t4526;
  double t4536;
  double t3956;
  double t3961;
  double t3965;
  double t3966;
  double t4259;
  double t4260;
  double t4261;
  double t4262;
  double t4373;
  double t4374;
  double t4375;
  double t4376;
  double t4277;
  double t4278;
  double t4279;
  double t4331;
  double t4145;
  double t4445;
  double t4446;
  double t4447;
  double t4345;
  double t4346;
  double t4347;
  double t4182;
  double t4186;
  double t4187;
  double t4457;
  double t4458;
  double t4459;
  double t4460;
  double t4461;
  double t4239;
  double t4240;
  double t4241;
  double t4242;
  double t4483;
  double t4484;
  double t4485;
  double t4486;
  double t4557;
  double t4559;
  double t3967;
  double t4263;
  double t4377;
  double t4378;
  double t4562;
  double t4563;
  double t4589;
  double t4590;
  double t4243;
  double t4359;
  double t4487;
  double t4488;
  double t4583;
  double t4584;
  t1918 = Sin(var2[2]);
  t166 = Cos(var2[2]);
  t2562 = Cos(var2[3]);
  t3637 = Sin(var2[3]);
  t3669 = Cos(var2[4]);
  t3674 = Sin(var2[4]);
  t3690 = t2562*t3669;
  t3693 = -1.*t3637*t3674;
  t3701 = t3690 + t3693;
  t3744 = Cos(var2[5]);
  t3759 = Sin(var2[5]);
  t3773 = Cos(var2[6]);
  t3775 = Sin(var2[6]);
  t3796 = t3744*t3773;
  t3797 = -1.*t3759*t3775;
  t3806 = t3796 + t3797;
  t3657 = t166*t2562;
  t3658 = -1.*t1918*t3637;
  t3663 = t3657 + t3658;
  t3623 = t2562*t1918;
  t3641 = t166*t3637;
  t3644 = t3623 + t3641;
  t3670 = -1.*t3669*t3637;
  t3684 = -1.*t2562*t3674;
  t3685 = t3670 + t3684;
  t3688 = t1918*t3685;
  t3702 = t166*t3701;
  t3707 = t3688 + t3702;
  t3713 = t3669*t3637;
  t3714 = t2562*t3674;
  t3718 = t3713 + t3714;
  t3725 = t166*t3718;
  t3726 = t1918*t3701;
  t3729 = t3725 + t3726;
  t3766 = t166*t3744;
  t3767 = -1.*t1918*t3759;
  t3768 = t3766 + t3767;
  t3752 = t3744*t1918;
  t3760 = t166*t3759;
  t3763 = t3752 + t3760;
  t3774 = -1.*t3773*t3759;
  t3776 = -1.*t3744*t3775;
  t3786 = t3774 + t3776;
  t3790 = t1918*t3786;
  t3810 = t166*t3806;
  t3816 = t3790 + t3810;
  t3822 = t3773*t3759;
  t3823 = t3744*t3775;
  t3824 = t3822 + t3823;
  t3829 = t166*t3824;
  t3830 = t1918*t3806;
  t3835 = t3829 + t3830;
  t3907 = -1.*t3669;
  t3908 = 1. + t3907;
  t3909 = 0.4*t3908;
  t3910 = 0.64*t3669;
  t3911 = t3909 + t3910;
  t3912 = t3911*t3637;
  t3915 = 0.24*t2562*t3674;
  t3916 = t3912 + t3915;
  t3918 = t2562*t3911;
  t3919 = -0.24*t3637*t3674;
  t3920 = t3918 + t3919;
  t3934 = -1.*t3773;
  t3935 = 1. + t3934;
  t3936 = 0.4*t3935;
  t3937 = 0.64*t3773;
  t3938 = t3936 + t3937;
  t3939 = t3938*t3759;
  t3940 = 0.24*t3744*t3775;
  t3941 = t3939 + t3940;
  t3943 = t3744*t3938;
  t3944 = -0.24*t3759*t3775;
  t3945 = t3943 + t3944;
  t3844 = t166*t3685;
  t3845 = -1.*t1918*t3701;
  t3846 = t3844 + t3845;
  t3839 = -1.*t2562*t1918;
  t3840 = -1.*t166*t3637;
  t3841 = t3839 + t3840;
  t3974 = t3911*t3674;
  t3975 = -0.24*t3669*t3674;
  t3976 = t3974 + t3975;
  t3848 = -1.*t1918*t3718;
  t3849 = t3848 + t3702;
  t3969 = t3911*t3669;
  t3970 = Power(t3674,2);
  t3971 = 0.24*t3970;
  t3972 = t3969 + t3971;
  t3882 = t166*t3786;
  t3887 = -1.*t1918*t3806;
  t3890 = t3882 + t3887;
  t3859 = -1.*t3744*t1918;
  t3860 = -1.*t166*t3759;
  t3864 = t3859 + t3860;
  t3962 = t3938*t3775;
  t3963 = -0.24*t3773*t3775;
  t3964 = t3962 + t3963;
  t3896 = -1.*t1918*t3824;
  t3897 = t3896 + t3810;
  t3957 = t3938*t3773;
  t3958 = Power(t3775,2);
  t3959 = 0.24*t3958;
  t3960 = t3957 + t3959;
  t3666 = Power(t3663,2);
  t3771 = Power(t3768,2);
  t3901 = Power(t2562,2);
  t3902 = 0.11*t3901;
  t3903 = Power(t3637,2);
  t3904 = 0.11*t3903;
  t3905 = t3902 + t3904;
  t3917 = -1.*t3916*t3701;
  t3921 = -1.*t3685*t3920;
  t3922 = t3917 + t3921;
  t3924 = t3916*t3718;
  t3925 = t3701*t3920;
  t3926 = t3924 + t3925;
  t3928 = Power(t3744,2);
  t3929 = 0.11*t3928;
  t3930 = Power(t3759,2);
  t3931 = 0.11*t3930;
  t3932 = t3929 + t3931;
  t3942 = -1.*t3941*t3806;
  t3948 = -1.*t3786*t3945;
  t3949 = t3942 + t3948;
  t3951 = t3941*t3824;
  t3952 = t3806*t3945;
  t3953 = t3951 + t3952;
  t3980 = -1.*var1[6];
  t3981 = var3[4] + t3980;
  t3983 = -1.*var1[5];
  t3984 = var3[3] + t3983;
  t3985 = 0.748*t3841;
  t4066 = -1.*t2562*t3669;
  t4067 = t3637*t3674;
  t4068 = t4066 + t4067;
  t4069 = t1918*t4068;
  t4070 = t3844 + t4069;
  t4000 = -1.*var1[0];
  t4001 = var3[0] + t4000;
  t4002 = 13.6*t3841*t3663;
  t4003 = 13.6*t3644*t3663;
  t4012 = -1.*var1[1];
  t4013 = var3[1] + t4012;
  t4014 = Power(t3841,2);
  t4015 = 6.8*t4014;
  t4016 = 6.8*t3841*t3644;
  t4017 = 6.8*t3666;
  t4018 = -1.*t166*t2562;
  t4019 = t1918*t3637;
  t4020 = t4018 + t4019;
  t4021 = 6.8*t3663*t4020;
  t4022 = -1.*t1918*t3685;
  t4054 = -1.*var1[2];
  t4055 = var3[2] + t4054;
  t4057 = 6.8*t3841*t3905;
  t4089 = -1.*t3911*t3637;
  t4090 = -0.24*t2562*t3674;
  t4091 = t4089 + t4090;
  t4071 = 0.768*t3981*t4070;
  t4072 = 3.2*t3976*t3707;
  t4073 = 3.2*t3972*t4070;
  t4076 = 6.4*t3707*t3729;
  t4077 = 6.4*t3707*t4070;
  t4080 = 3.2*t3707*t3849;
  t4081 = 3.2*t3846*t3729;
  t4082 = t166*t4068;
  t4083 = t4022 + t4082;
  t4084 = 3.2*t3707*t4083;
  t4085 = 3.2*t3846*t4070;
  t4088 = 3.2*t3707*t3922;
  t4093 = t3916*t3701;
  t4094 = t3685*t3920;
  t4098 = 3.2*t3926*t4070;
  t4122 = -0.24*t3669*t3637;
  t4123 = t4122 + t4090;
  t4100 = -1.*t3685*t3916;
  t4125 = 0.24*t2562*t3669;
  t4126 = t4125 + t3919;
  t4102 = -1.*t3920*t4068;
  t3990 = -1.*var1[4];
  t3991 = var3[6] + t3990;
  t3993 = -1.*var1[3];
  t3994 = var3[5] + t3993;
  t3995 = 0.748*t3864;
  t4137 = -1.*t3744*t3773;
  t4138 = t3759*t3775;
  t4139 = t4137 + t4138;
  t4140 = t1918*t4139;
  t4141 = t3882 + t4140;
  t4006 = 13.6*t3864*t3768;
  t4007 = 13.6*t3763*t3768;
  t4033 = Power(t3864,2);
  t4034 = 6.8*t4033;
  t4035 = 6.8*t3864*t3763;
  t4036 = 6.8*t3771;
  t4037 = -1.*t166*t3744;
  t4038 = t1918*t3759;
  t4039 = t4037 + t4038;
  t4040 = 6.8*t3768*t4039;
  t4041 = -1.*t1918*t3786;
  t4060 = 6.8*t3864*t3932;
  t4160 = -1.*t3938*t3759;
  t4161 = -0.24*t3744*t3775;
  t4162 = t4160 + t4161;
  t4142 = 0.768*t3991*t4141;
  t4143 = 3.2*t3964*t3816;
  t4144 = 3.2*t3960*t4141;
  t4147 = 6.4*t3816*t3835;
  t4148 = 6.4*t3816*t4141;
  t4151 = 3.2*t3816*t3897;
  t4152 = 3.2*t3890*t3835;
  t4153 = t166*t4139;
  t4154 = t4041 + t4153;
  t4155 = 3.2*t3816*t4154;
  t4156 = 3.2*t3890*t4141;
  t4159 = 3.2*t3816*t3949;
  t4164 = t3941*t3806;
  t4165 = t3786*t3945;
  t4169 = 3.2*t3953*t4141;
  t4193 = -0.24*t3773*t3759;
  t4194 = t4193 + t4161;
  t4171 = -1.*t3786*t3941;
  t4196 = 0.24*t3744*t3773;
  t4197 = t4196 + t3944;
  t4173 = -1.*t3945*t4139;
  t1530 = Power(t166,2);
  t2085 = Power(t1918,2);
  t3646 = Power(t3644,2);
  t3710 = Power(t3707,2);
  t3740 = Power(t3729,2);
  t3764 = Power(t3763,2);
  t3817 = Power(t3816,2);
  t3836 = Power(t3835,2);
  t3842 = -6.8*t3841*t3663;
  t3843 = -6.8*t3644*t3663;
  t3847 = -3.2*t3707*t3846;
  t3850 = -3.2*t3849*t3729;
  t3871 = -6.8*t3864*t3768;
  t3875 = -6.8*t3763*t3768;
  t3895 = -3.2*t3816*t3890;
  t3898 = -3.2*t3897*t3835;
  t3899 = t3842 + t3843 + t3847 + t3850 + t3871 + t3875 + t3895 + t3898;
  t1655 = -12.*t1530;
  t2281 = -12.*t2085;
  t3667 = -6.8*t3666;
  t4026 = Power(t3849,2);
  t4028 = Power(t3846,2);
  t3772 = -6.8*t3771;
  t4045 = Power(t3897,2);
  t4047 = Power(t3890,2);
  t4023 = -1.*t166*t3701;
  t4024 = t4022 + t4023;
  t4030 = -1.*t166*t3718;
  t4031 = t4030 + t3845;
  t4042 = -1.*t166*t3806;
  t4043 = t4041 + t4042;
  t4049 = -1.*t166*t3824;
  t4050 = t4049 + t3887;
  t4025 = 3.2*t4024*t3707;
  t4027 = 3.2*t4026;
  t4029 = 3.2*t4028;
  t4032 = 3.2*t4031*t3729;
  t4044 = 3.2*t4043*t3816;
  t4046 = 3.2*t4045;
  t4048 = 3.2*t4047;
  t4051 = 3.2*t4050*t3835;
  t4052 = t4015 + t4016 + t4017 + t4021 + t4025 + t4027 + t4029 + t4032 + t4034 + t4035 + t4036 + t4040 + t4044 + t4046 + t4048 + t4051;
  t3900 = -2.88*t166;
  t4270 = 0.748*t4020;
  t4281 = 13.6*t3841*t4020;
  t4086 = t4015 + t4016 + t4017 + t4021 + t4080 + t4081 + t4084 + t4085;
  t4290 = 6.8*t4020*t3905;
  t4092 = t4091*t3701;
  t4095 = t3718*t3920;
  t4096 = t4092 + t4093 + t4094 + t4095;
  t4099 = -1.*t3685*t4091;
  t4101 = -1.*t3701*t3920;
  t4103 = t4099 + t4100 + t4101 + t4102;
  t4299 = 0.768*t3981*t4083;
  t4112 = Power(t3669,2);
  t4113 = -0.24*t4112;
  t4114 = t3969 + t4113;
  t4300 = 3.2*t3976*t3846;
  t4108 = -1.*t3911*t3674;
  t4109 = 0.24*t3669*t3674;
  t4110 = t4108 + t4109;
  t4301 = 3.2*t3972*t4083;
  t4304 = 6.4*t3849*t3846;
  t4305 = 6.4*t3846*t4083;
  t4120 = t4080 + t4081 + t4084 + t4085;
  t4309 = 3.2*t3846*t3922;
  t4124 = t4123*t3701;
  t4127 = t3718*t4126;
  t4128 = t4124 + t4093 + t4094 + t4127;
  t4311 = 3.2*t3926*t4083;
  t4130 = -1.*t3685*t4123;
  t4131 = -1.*t3701*t4126;
  t4132 = t4130 + t4100 + t4131 + t4102;
  t4276 = 0.748*t4039;
  t4284 = 13.6*t3864*t4039;
  t4157 = t4034 + t4035 + t4036 + t4040 + t4151 + t4152 + t4155 + t4156;
  t4293 = 6.8*t4039*t3932;
  t4163 = t4162*t3806;
  t4166 = t3824*t3945;
  t4167 = t4163 + t4164 + t4165 + t4166;
  t4170 = -1.*t3786*t4162;
  t4172 = -1.*t3806*t3945;
  t4174 = t4170 + t4171 + t4172 + t4173;
  t4328 = 0.768*t3991*t4154;
  t4183 = Power(t3773,2);
  t4184 = -0.24*t4183;
  t4185 = t3957 + t4184;
  t4329 = 3.2*t3964*t3890;
  t4179 = -1.*t3938*t3775;
  t4180 = 0.24*t3773*t3775;
  t4181 = t4179 + t4180;
  t4330 = 3.2*t3960*t4154;
  t4333 = 6.4*t3897*t3890;
  t4334 = 6.4*t3890*t4154;
  t4191 = t4151 + t4152 + t4155 + t4156;
  t4338 = 3.2*t3890*t3949;
  t4195 = t4194*t3806;
  t4198 = t3824*t4197;
  t4199 = t4195 + t4164 + t4165 + t4198;
  t4340 = 3.2*t3953*t4154;
  t4201 = -1.*t3786*t4194;
  t4202 = -1.*t3806*t4197;
  t4203 = t4201 + t4171 + t4202 + t4173;
  t4217 = 6.8*t3841*t3663;
  t4218 = 6.8*t3644*t3663;
  t4219 = 3.2*t3707*t3846;
  t4220 = 3.2*t3849*t3729;
  t4221 = 6.8*t3864*t3768;
  t4222 = 6.8*t3763*t3768;
  t4223 = 3.2*t3816*t3890;
  t4224 = 3.2*t3897*t3835;
  t4225 = t4217 + t4218 + t4219 + t4220 + t4221 + t4222 + t4223 + t4224;
  t4208 = 12.*t1530;
  t4209 = 12.*t2085;
  t4056 = -2.88*t1918;
  t4058 = 3.2*t3849*t3922;
  t4059 = 3.2*t3846*t3926;
  t4061 = 3.2*t3897*t3949;
  t4062 = 3.2*t3890*t3953;
  t4063 = t4056 + t4057 + t4058 + t4059 + t4060 + t4061 + t4062;
  t3986 = 3.2*t3976*t3849;
  t3987 = 3.2*t3972*t3846;
  t3988 = t3985 + t3986 + t3987;
  t3996 = 3.2*t3964*t3897;
  t3997 = 3.2*t3960*t3890;
  t3998 = t3995 + t3996 + t3997;
  t3906 = -6.8*t3663*t3905;
  t3923 = -3.2*t3729*t3922;
  t3927 = -3.2*t3707*t3926;
  t3933 = -6.8*t3768*t3932;
  t3950 = -3.2*t3835*t3949;
  t3954 = -3.2*t3816*t3953;
  t3955 = t3900 + t3906 + t3923 + t3927 + t3933 + t3950 + t3954;
  t4251 = 2.88*t1918;
  t4252 = -6.8*t3841*t3905;
  t4253 = -3.2*t3849*t3922;
  t4254 = -3.2*t3846*t3926;
  t4255 = -6.8*t3864*t3932;
  t4256 = -3.2*t3897*t3949;
  t4257 = -3.2*t3890*t3953;
  t4258 = t4251 + t4252 + t4253 + t4254 + t4255 + t4256 + t4257;
  t4291 = 3.2*t4031*t3922;
  t4292 = 3.2*t4024*t3926;
  t4294 = 3.2*t4050*t3949;
  t4295 = 3.2*t4043*t3953;
  t4296 = t3900 + t4290 + t4291 + t4292 + t4293 + t4294 + t4295;
  t4385 = 0.4*t3908*t4020;
  t4386 = -0.4*t3644*t3674;
  t4387 = t3669*t4020;
  t4388 = t3644*t3674;
  t4389 = t4387 + t4388;
  t4390 = 0.8*t4389;
  t4391 = t4385 + t4386 + t4390;
  t4392 = -1.*var4[2]*t4391;
  t4393 = 0.4*t3908*t3841;
  t4394 = -0.4*t4020*t3674;
  t4395 = t3669*t3841;
  t4396 = t4020*t3674;
  t4397 = t4395 + t4396;
  t4398 = 0.8*t4397;
  t4399 = t4393 + t4394 + t4398;
  t4400 = -1.*var4[0]*t4399;
  t4310 = 3.2*t3846*t4096;
  t4312 = 3.2*t3849*t4103;
  t4313 = t4290 + t4309 + t4310 + t4311 + t4312;
  t4097 = 3.2*t3707*t4096;
  t4104 = 3.2*t3729*t4103;
  t4105 = t4057 + t4088 + t4097 + t4098 + t4104;
  t4323 = 3.2*t3846*t4128;
  t4324 = 3.2*t3849*t4132;
  t4325 = t4309 + t4323 + t4311 + t4324;
  t4129 = 3.2*t3707*t4128;
  t4133 = 3.2*t3729*t4132;
  t4134 = t4088 + t4129 + t4098 + t4133;
  t4339 = 3.2*t3890*t4167;
  t4341 = 3.2*t3897*t4174;
  t4342 = t4293 + t4338 + t4339 + t4340 + t4341;
  t4168 = 3.2*t3816*t4167;
  t4175 = 3.2*t3835*t4174;
  t4176 = t4060 + t4159 + t4168 + t4169 + t4175;
  t4352 = 3.2*t3890*t4199;
  t4353 = 3.2*t3897*t4203;
  t4354 = t4338 + t4352 + t4340 + t4353;
  t4200 = 3.2*t3816*t4199;
  t4204 = 3.2*t3835*t4203;
  t4205 = t4159 + t4200 + t4169 + t4204;
  t4226 = 2.88*t166;
  t4227 = 6.8*t3663*t3905;
  t4228 = 3.2*t3729*t3922;
  t4229 = 3.2*t3707*t3926;
  t4230 = 6.8*t3768*t3932;
  t4231 = 3.2*t3835*t3949;
  t4232 = 3.2*t3816*t3953;
  t4233 = t4226 + t4227 + t4228 + t4229 + t4230 + t4231 + t4232;
  t4360 = Power(t3905,2);
  t4362 = Power(t3922,2);
  t4364 = Power(t3926,2);
  t4366 = Power(t3932,2);
  t4368 = Power(t3949,2);
  t4370 = Power(t3953,2);
  t4418 = 0.4*t3841*t3674;
  t3968 = -0.748*t3663;
  t3973 = -3.2*t3972*t3707;
  t3977 = -3.2*t3976*t3729;
  t3978 = t3968 + t3973 + t3977;
  t4264 = -0.748*t3841;
  t4265 = -3.2*t3976*t3849;
  t4266 = -3.2*t3972*t3846;
  t4267 = t4264 + t4265 + t4266;
  t4379 = -0.748*t3905;
  t4380 = -3.2*t3976*t3922;
  t4381 = -3.2*t3972*t3926;
  t4382 = -0.67 + t4379 + t4380 + t4381;
  t4271 = 3.2*t3972*t4024;
  t4272 = 3.2*t3976*t4031;
  t4273 = t4270 + t4271 + t4272;
  t4302 = t4270 + t4300 + t4301;
  t4074 = t3985 + t4072 + t4073;
  t4405 = 3.2*t3972*t4096;
  t4406 = 3.2*t3976*t4103;
  t4407 = t4405 + t4406;
  t4417 = -0.4*t3669*t4020;
  t4419 = -1.*t3841*t3674;
  t4420 = t4387 + t4419;
  t4421 = 0.8*t4420;
  t4422 = t4417 + t4418 + t4421;
  t4423 = -1.*var4[2]*t4422;
  t4424 = -0.4*t3669*t3841;
  t4425 = 0.4*t3663*t3674;
  t4426 = -1.*t3663*t3674;
  t4427 = t4395 + t4426;
  t4428 = 0.8*t4427;
  t4429 = t4424 + t4425 + t4428;
  t4430 = -1.*var4[0]*t4429;
  t4316 = 3.2*t4114*t3849;
  t4317 = 3.2*t4110*t3846;
  t4318 = t4316 + t4300 + t4317 + t4301;
  t4111 = 3.2*t4110*t3707;
  t4115 = 3.2*t4114*t3729;
  t4116 = t4072 + t4111 + t4115 + t4073;
  t4431 = 3.2*t4114*t3922;
  t4432 = 3.2*t4110*t3926;
  t4433 = 3.2*t3972*t4128;
  t4434 = 3.2*t3976*t4132;
  t4435 = t4431 + t4432 + t4433 + t4434;
  t4234 = 0.748*t3663;
  t4235 = 3.2*t3972*t3707;
  t4236 = 3.2*t3976*t3729;
  t4237 = t4234 + t4235 + t4236;
  t4477 = 0.748*t3905;
  t4478 = 3.2*t3976*t3922;
  t4479 = 3.2*t3972*t3926;
  t4480 = 0.67 + t4477 + t4478 + t4479;
  t4499 = Power(t3976,2);
  t4501 = Power(t3972,2);
  t4489 = -0.4*t3908*t3663;
  t4490 = t3669*t3663;
  t4491 = t3841*t3674;
  t4492 = t4490 + t4491;
  t4493 = -0.8*t4492;
  t4494 = t4489 + t4418 + t4493;
  t4495 = -0.4*t3908*t3841;
  t4496 = 0.4*t4020*t3674;
  t4497 = -0.8*t4397;
  t4498 = t4495 + t4496 + t4497;
  t3979 = -0.768*t3707;
  t4268 = -0.768*t3846;
  t4383 = -0.768*t3926;
  t4384 = -0.2 + t4383;
  t4504 = -0.768*t3972;
  t4505 = -0.2 + t4504;
  t4531 = 0.768*t4013*t4083;
  t4532 = 0.768*t4001*t4070;
  t4238 = 0.768*t3707;
  t4358 = 0.768*t3846;
  t4481 = 0.768*t3926;
  t4482 = 0.2 + t4481;
  t4525 = 0.768*t3972;
  t4526 = 0.2 + t4525;
  t4536 = 0.4*t3669*t3663;
  t3956 = -0.748*t3768;
  t3961 = -3.2*t3960*t3816;
  t3965 = -3.2*t3964*t3835;
  t3966 = t3956 + t3961 + t3965;
  t4259 = -0.748*t3864;
  t4260 = -3.2*t3964*t3897;
  t4261 = -3.2*t3960*t3890;
  t4262 = t4259 + t4260 + t4261;
  t4373 = -0.748*t3932;
  t4374 = -3.2*t3964*t3949;
  t4375 = -3.2*t3960*t3953;
  t4376 = -0.67 + t4373 + t4374 + t4375;
  t4277 = 3.2*t3960*t4043;
  t4278 = 3.2*t3964*t4050;
  t4279 = t4276 + t4277 + t4278;
  t4331 = t4276 + t4329 + t4330;
  t4145 = t3995 + t4143 + t4144;
  t4445 = 3.2*t3960*t4167;
  t4446 = 3.2*t3964*t4174;
  t4447 = t4445 + t4446;
  t4345 = 3.2*t4185*t3897;
  t4346 = 3.2*t4181*t3890;
  t4347 = t4345 + t4329 + t4346 + t4330;
  t4182 = 3.2*t4181*t3816;
  t4186 = 3.2*t4185*t3835;
  t4187 = t4143 + t4182 + t4186 + t4144;
  t4457 = 3.2*t4185*t3949;
  t4458 = 3.2*t4181*t3953;
  t4459 = 3.2*t3960*t4199;
  t4460 = 3.2*t3964*t4203;
  t4461 = t4457 + t4458 + t4459 + t4460;
  t4239 = 0.748*t3768;
  t4240 = 3.2*t3960*t3816;
  t4241 = 3.2*t3964*t3835;
  t4242 = t4239 + t4240 + t4241;
  t4483 = 0.748*t3932;
  t4484 = 3.2*t3964*t3949;
  t4485 = 3.2*t3960*t3953;
  t4486 = 0.67 + t4483 + t4484 + t4485;
  t4557 = Power(t3964,2);
  t4559 = Power(t3960,2);
  t3967 = -0.768*t3816;
  t4263 = -0.768*t3890;
  t4377 = -0.768*t3953;
  t4378 = -0.2 + t4377;
  t4562 = -0.768*t3960;
  t4563 = -0.2 + t4562;
  t4589 = 0.768*t4013*t4154;
  t4590 = 0.768*t4001*t4141;
  t4243 = 0.768*t3816;
  t4359 = 0.768*t3890;
  t4487 = 0.768*t3953;
  t4488 = 0.2 + t4487;
  t4583 = 0.768*t3960;
  t4584 = 0.2 + t4583;
  p_output1[0]=t1655 + t2281 - 6.8*t3646 + t3667 - 3.2*t3710 - 3.2*t3740 - 6.8*t3764 + t3772 - 3.2*t3817 - 3.2*t3836;
  p_output1[1]=t3899;
  p_output1[2]=t3955;
  p_output1[3]=t3966;
  p_output1[4]=t3967;
  p_output1[5]=t3978;
  p_output1[6]=t3979;
  p_output1[7]=0.768*t3846*t3981 + t3984*t3988 + 0.768*t3890*t3991 + t3994*t3998 + t4001*(6.4*t3707*t3846 + 6.4*t3729*t3849 + 6.4*t3816*t3890 + 6.4*t3835*t3897 + t4002 + t4003 + t4006 + t4007) + t4013*t4052 + t4055*t4063;
  p_output1[8]=t4071 + t3984*t4074 + t4001*(t4002 + t4003 + t4076 + t4077) + t4013*t4086 + t4055*t4105;
  p_output1[9]=t4071 + t4001*(t4076 + t4077) + t3984*t4116 + t4013*t4120 + t4055*t4134;
  p_output1[10]=t4142 + t3994*t4145 + t4001*(t4006 + t4007 + t4147 + t4148) + t4013*t4157 + t4055*t4176;
  p_output1[11]=t4142 + t4001*(t4147 + t4148) + t3994*t4187 + t4013*t4191 + t4055*t4205;
  p_output1[12]=6.8*t3646 + 3.2*t3710 + 3.2*t3740 + 6.8*t3764 + 3.2*t3817 + 3.2*t3836 + t4017 + t4036 + t4208 + t4209;
  p_output1[13]=t4225;
  p_output1[14]=t4233;
  p_output1[15]=t4237;
  p_output1[16]=t4238;
  p_output1[17]=t4242;
  p_output1[18]=t4243;
  p_output1[19]=-1.;
  p_output1[20]=t3899;
  p_output1[21]=t1655 + t2281 + t3667 + t3772 - 6.8*t4014 - 3.2*t4026 - 3.2*t4028 - 6.8*t4033 - 3.2*t4045 - 3.2*t4047;
  p_output1[22]=t4258;
  p_output1[23]=t4262;
  p_output1[24]=t4263;
  p_output1[25]=t4267;
  p_output1[26]=t4268;
  p_output1[27]=0.768*t3981*t4024 + 0.768*t3991*t4043 + t4001*t4052 + t3984*t4273 + t3994*t4279 + t4013*(t4002 + t4006 + 6.4*t3846*t4024 + 6.4*t3849*t4031 + 6.4*t3890*t4043 + 6.4*t3897*t4050 + t4281 + t4284) + t4055*t4296;
  p_output1[28]=t4001*t4086 + t4299 + t3984*t4302 + t4013*(t4002 + t4281 + t4304 + t4305) + t4055*t4313;
  p_output1[29]=t4001*t4120 + t4299 + t4013*(t4304 + t4305) + t3984*t4318 + t4055*t4325;
  p_output1[30]=t4001*t4157 + t4328 + t3994*t4331 + t4013*(t4006 + t4284 + t4333 + t4334) + t4055*t4342;
  p_output1[31]=t4001*t4191 + t4328 + t4013*(t4333 + t4334) + t3994*t4347 + t4055*t4354;
  p_output1[32]=t4225;
  p_output1[33]=t4015 + t4017 + t4027 + t4029 + t4034 + t4036 + t4046 + t4048 + t4208 + t4209;
  p_output1[34]=t4063;
  p_output1[35]=t3988;
  p_output1[36]=t4358;
  p_output1[37]=t3998;
  p_output1[38]=t4359;
  p_output1[39]=-1.;
  p_output1[40]=t3955;
  p_output1[41]=t4258;
  p_output1[42]=-3.3612 - 6.8*t4360 - 3.2*t4362 - 3.2*t4364 - 6.8*t4366 - 3.2*t4368 - 3.2*t4370;
  p_output1[43]=t4376;
  p_output1[44]=t4378;
  p_output1[45]=t4382;
  p_output1[46]=t4384;
  p_output1[47]=t4001*t4063 + t4013*t4296 + t4392 + t4400;
  p_output1[48]=0.768*t3981*t4096 + t4055*(6.4*t3926*t4096 + 6.4*t3922*t4103) + t4001*t4105 + t4013*t4313 + t4392 + t4400 + t3984*t4407;
  p_output1[49]=0.768*t3981*t4128 + t4055*(6.4*t3926*t4128 + 6.4*t3922*t4132) + t4001*t4134 + t4013*t4325 + t4423 + t4430 + t3984*t4435;
  p_output1[50]=0.768*t3991*t4167 + t4055*(6.4*t3953*t4167 + 6.4*t3949*t4174) + t4001*t4176 + t4013*t4342 + t3994*t4447;
  p_output1[51]=0.768*t3991*t4199 + t4055*(6.4*t3953*t4199 + 6.4*t3949*t4203) + t4001*t4205 + t4013*t4354 + t3994*t4461;
  p_output1[52]=t4233;
  p_output1[53]=t4063;
  p_output1[54]=3.3612 + 6.8*t4360 + 3.2*t4362 + 3.2*t4364 + 6.8*t4366 + 3.2*t4368 + 3.2*t4370;
  p_output1[55]=t4480;
  p_output1[56]=t4482;
  p_output1[57]=t4486;
  p_output1[58]=t4488;
  p_output1[59]=t4494;
  p_output1[60]=t4498;
  p_output1[61]=t3978;
  p_output1[62]=t4267;
  p_output1[63]=t4382;
  p_output1[64]=-1.58228 - 3.2*t4499 - 3.2*t4501;
  p_output1[65]=t4505;
  p_output1[66]=t3988*t4001 + t4013*t4273 + t4392 + t4400;
  p_output1[67]=t4001*t4074 + t4013*t4302 + t4392 + t4400 + t4055*t4407;
  p_output1[68]=0.768*t3981*t4110 + t3984*(6.4*t3972*t4110 + 6.4*t3976*t4114) + t4001*t4116 + t4013*t4318 + t4423 + t4430 + t4055*t4435;
  p_output1[69]=t4237;
  p_output1[70]=t3988;
  p_output1[71]=t4480;
  p_output1[72]=1.58228 + 3.2*t4499 + 3.2*t4501;
  p_output1[73]=t4526;
  p_output1[74]=t4494;
  p_output1[75]=t4498;
  p_output1[76]=t3979;
  p_output1[77]=t4268;
  p_output1[78]=t4384;
  p_output1[79]=t4505;
  p_output1[80]=-1.2143199999999998;
  p_output1[81]=0.768*t3846*t4001 + 0.768*t4013*t4024 + t4423 + t4430;
  p_output1[82]=0.768*t4055*t4096 + t4423 + t4430 + t4531 + t4532;
  p_output1[83]=0.768*t3984*t4110 + 0.768*t4055*t4128 + t4531 + t4532 - 1.*(0.4*t3644*t3669 + t4425 + 0.8*(-1.*t3644*t3669 + t4426))*var4[0] - 1.*(t4418 + 0.8*(-1.*t3663*t3669 + t4419) + t4536)*var4[2];
  p_output1[84]=t4238;
  p_output1[85]=t4358;
  p_output1[86]=t4482;
  p_output1[87]=t4526;
  p_output1[88]=1.2143199999999998;
  p_output1[89]=t4386 - 0.8*(-1.*t3644*t3674 + t4490) + t4536;
  p_output1[90]=-0.4*t3663*t3674 + 0.4*t3669*t3841 - 0.8*t4427;
  p_output1[91]=t3966;
  p_output1[92]=t4262;
  p_output1[93]=t4376;
  p_output1[94]=-1.58228 - 3.2*t4557 - 3.2*t4559;
  p_output1[95]=t4563;
  p_output1[96]=t3998*t4001 + t4013*t4279;
  p_output1[97]=t4001*t4145 + t4013*t4331 + t4055*t4447;
  p_output1[98]=0.768*t3991*t4181 + t3994*(6.4*t3960*t4181 + 6.4*t3964*t4185) + t4001*t4187 + t4013*t4347 + t4055*t4461;
  p_output1[99]=t4242;
  p_output1[100]=t3998;
  p_output1[101]=t4486;
  p_output1[102]=1.58228 + 3.2*t4557 + 3.2*t4559;
  p_output1[103]=t4584;
  p_output1[104]=t3967;
  p_output1[105]=t4263;
  p_output1[106]=t4378;
  p_output1[107]=t4563;
  p_output1[108]=-1.2143199999999998;
  p_output1[109]=0.768*t3890*t4001 + 0.768*t4013*t4043;
  p_output1[110]=0.768*t4055*t4167 + t4589 + t4590;
  p_output1[111]=0.768*t3994*t4181 + 0.768*t4055*t4199 + t4589 + t4590;
  p_output1[112]=t4243;
  p_output1[113]=t4359;
  p_output1[114]=t4488;
  p_output1[115]=t4584;
  p_output1[116]=1.2143199999999998;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 117, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "J_dxDiscreteMapRightImpact.hh"

namespace RightImpact
{

void J_dxDiscreteMapRightImpact_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
